{"ast":null,"code":"import * as React from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { notifyManager } from '@tanstack/query-core';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary.mjs';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nimport { useIsRestoring } from './isRestoring.mjs';\nimport { ensurePreventErrorBoundaryRetry, useClearResetErrorBoundary, getHasError } from './errorBoundaryUtils.mjs';\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense.mjs';\n\nfunction useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic'; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  ensureStaleTime(defaultedOptions);\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  useClearResetErrorBoundary(errorResetBoundary);\n  const [observer] = React.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore(React.useCallback(onStoreChange => isRestoring ? () => undefined : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);\n  } // Handle error boundary\n\n\n  if (getHasError({\n    result,\n    errorResetBoundary,\n    useErrorBoundary: defaultedOptions.useErrorBoundary,\n    query: observer.getCurrentQuery()\n  })) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\n\nexport { useBaseQuery };","map":{"version":3,"mappings":";;;;;;;;;AAgBO,SAASA,YAAT,CAOLC,OAPK,EAcLC,QAdK,EAeL;AACA,QAAMC,WAAW,GAAGC,cAAc,CAAC;AAAEC,WAAO,EAAEJ,OAAO,CAACI;AAAnB,GAAD,CAAlC;AACA,QAAMC,WAAW,GAAGC,cAAc,EAAlC;AACA,QAAMC,kBAAkB,GAAGC,0BAA0B,EAArD;AACA,QAAMC,gBAAgB,GAAGP,WAAW,CAACQ,mBAAZR,CAAgCF,OAAhCE,CAAzB,CAJA;;AAOAO,kBAAgB,CAACE,kBAAjBF,GAAsCJ,WAAW,GAC7C,aAD6C,GAE7C,YAFJI,CAPA;;AAYA,MAAIA,gBAAgB,CAACG,OAArB,EAA8B;AAC5BH,oBAAgB,CAACG,OAAjBH,GAA2BI,aAAa,CAACC,UAAdD,CACzBJ,gBAAgB,CAACG,OADQC,CAA3BJ;AAGD;;AAED,MAAIA,gBAAgB,CAACM,SAArB,EAAgC;AAC9BN,oBAAgB,CAACM,SAAjBN,GAA6BI,aAAa,CAACC,UAAdD,CAC3BJ,gBAAgB,CAACM,SADUF,CAA7BJ;AAGD;;AAED,MAAIA,gBAAgB,CAACO,SAArB,EAAgC;AAC9BP,oBAAgB,CAACO,SAAjBP,GAA6BI,aAAa,CAACC,UAAdD,CAC3BJ,gBAAgB,CAACO,SADUH,CAA7BJ;AAGD;;AAEDQ,iBAAe,CAACR,gBAAD,CAAfQ;AACAC,iCAA+B,CAACT,gBAAD,EAAmBF,kBAAnB,CAA/BW;AAEAC,4BAA0B,CAACZ,kBAAD,CAA1BY;AAEA,QAAM,CAACC,QAAD,IAAaC,KAAK,CAACC,QAAND,CACjB,MACE,IAAIpB,QAAJ,CACEC,WADF,EAEEO,gBAFF,CAFeY,CAAnB;AAQA,QAAME,MAAM,GAAGH,QAAQ,CAACI,mBAATJ,CAA6BX,gBAA7BW,CAAf;AAEAK,sBAAoB,CAClBJ,KAAK,CAACK,WAANL,CACGM,aAAD,IACEtB,WAAW,GACP,MAAMuB,SADC,GAEPR,QAAQ,CAACS,SAATT,CAAmBP,aAAa,CAACC,UAAdD,CAAyBc,aAAzBd,CAAnBO,CAJRC,EAKE,CAACD,QAAD,EAAWf,WAAX,CALFgB,CADkB,EAQlB,MAAMD,QAAQ,CAACU,gBAATV,EARY,EASlB,MAAMA,QAAQ,CAACU,gBAATV,EATY,CAApBK;AAYAJ,OAAK,CAACU,SAANV,CAAgB,MAAM;AACpB;AACA;AACAD,YAAQ,CAACY,UAATZ,CAAoBX,gBAApBW,EAAsC;AAAEa,eAAS,EAAE;AAAb,KAAtCb;AAHF,KAIG,CAACX,gBAAD,EAAmBW,QAAnB,CAJHC,EAzDA;;AAgEA,MAAIa,aAAa,CAACzB,gBAAD,EAAmBc,MAAnB,EAA2BlB,WAA3B,CAAjB,EAA0D;AACxD,UAAM8B,eAAe,CAAC1B,gBAAD,EAAmBW,QAAnB,EAA6Bb,kBAA7B,CAArB;AAjEF;;;AAqEA,MACE6B,WAAW,CAAC;AACVb,UADU;AAEVhB,sBAFU;AAGV8B,oBAAgB,EAAE5B,gBAAgB,CAAC4B,gBAHzB;AAIVC,SAAK,EAAElB,QAAQ,CAACmB,eAATnB;AAJG,GAAD,CADb,EAOE;AACA,UAAMG,MAAM,CAACiB,KAAb;AA7EF;;;AAiFA,SAAO,CAAC/B,gBAAgB,CAACgC,mBAAlB,GACHrB,QAAQ,CAACsB,WAATtB,CAAqBG,MAArBH,CADG,GAEHG,MAFJ;AAGD","names":["useBaseQuery","options","Observer","queryClient","useQueryClient","context","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedOptions","defaultQueryOptions","_optimisticResults","onError","notifyManager","batchCalls","onSuccess","onSettled","ensureStaleTime","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","observer","React","useState","result","getOptimisticResult","useSyncExternalStore","useCallback","onStoreChange","undefined","subscribe","getCurrentResult","useEffect","setOptions","listeners","shouldSuspend","fetchOptimistic","getHasError","useErrorBoundary","query","getCurrentQuery","error","notifyOnChangeProps","trackResult"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"]},"metadata":{},"sourceType":"module"}