{"ast":null,"code":"function createSyncStoragePersister(_ref) {\n  let {\n    storage,\n    key = \"REACT_QUERY_OFFLINE_CACHE\",\n    throttleTime = 1000,\n    serialize = JSON.stringify,\n    deserialize = JSON.parse,\n    retry\n  } = _ref;\n\n  if (typeof storage !== 'undefined') {\n    const trySave = persistedClient => {\n      try {\n        storage.setItem(key, serialize(persistedClient));\n        return;\n      } catch (error) {\n        return error;\n      }\n    };\n\n    return {\n      persistClient: throttle(persistedClient => {\n        let client = persistedClient;\n        let error = trySave(client);\n        let errorCount = 0;\n\n        while (error && client) {\n          errorCount++;\n          client = retry == null ? void 0 : retry({\n            persistedClient: client,\n            error,\n            errorCount\n          });\n\n          if (client) {\n            error = trySave(client);\n          }\n        }\n      }, throttleTime),\n      restoreClient: () => {\n        const cacheString = storage.getItem(key);\n\n        if (!cacheString) {\n          return;\n        }\n\n        return deserialize(cacheString);\n      },\n      removeClient: () => {\n        storage.removeItem(key);\n      }\n    };\n  }\n\n  return {\n    persistClient: noop,\n    restoreClient: () => undefined,\n    removeClient: noop\n  };\n}\n\nfunction throttle(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  let timer = null;\n  let params;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    params = args;\n\n    if (timer === null) {\n      timer = setTimeout(() => {\n        func(...params);\n        timer = null;\n      }, wait);\n    }\n  };\n} // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\nfunction noop() {}\n\nexport { createSyncStoragePersister };","map":{"version":3,"mappings":"AAoCO,SAASA,0BAAT,OAO0C;AAAA,MAPN;AACzCC,WADyC;AAEzCC,OAAG,GAFsC;AAGzCC,gBAAY,GAAG,IAH0B;AAIzCC,aAAS,GAAGC,IAAI,CAACC,SAJwB;AAKzCC,eAAW,GAAGF,IAAI,CAACG,KALsB;AAMzCC;AANyC,GAOM;;AAC/C,MAAI,OAAOR,OAAP,KAAmB,WAAvB,EAAoC;AAClC,UAAMS,OAAO,GAAIC,eAAD,IAAyD;AACvE,UAAI;AACFV,eAAO,CAACW,OAARX,CAAgBC,GAAhBD,EAAqBG,SAAS,CAACO,eAAD,CAA9BV;AACA;AAFF,QAGE,OAAOY,KAAP,EAAc;AACd,eAAOA,KAAP;AACD;AANH;;AAQA,WAAO;AACLC,mBAAa,EAAEC,QAAQ,CAAEJ,eAAD,IAAqB;AAC3C,YAAIK,MAAmC,GAAGL,eAA1C;AACA,YAAIE,KAAK,GAAGH,OAAO,CAACM,MAAD,CAAnB;AACA,YAAIC,UAAU,GAAG,CAAjB;;AACA,eAAOJ,KAAK,IAAIG,MAAhB,EAAwB;AACtBC,oBAAU;AACVD,gBAAM,GAAGP,KAAH,IAAGA,qBAAK,CAAG;AACfE,2BAAe,EAAEK,MADF;AAEfH,iBAFe;AAGfI;AAHe,WAAH,CAAdD;;AAMA,cAAIA,MAAJ,EAAY;AACVH,iBAAK,GAAGH,OAAO,CAACM,MAAD,CAAfH;AACD;AACF;AAfoB,SAgBpBV,YAhBoB,CADlB;AAkBLe,mBAAa,EAAE,MAAM;AACnB,cAAMC,WAAW,GAAGlB,OAAO,CAACmB,OAARnB,CAAgBC,GAAhBD,CAApB;;AAEA,YAAI,CAACkB,WAAL,EAAkB;AAChB;AACD;;AAED,eAAOZ,WAAW,CAACY,WAAD,CAAlB;AAzBG;AA2BLE,kBAAY,EAAE,MAAM;AAClBpB,eAAO,CAACqB,UAARrB,CAAmBC,GAAnBD;AACD;AA7BI,KAAP;AA+BD;;AAED,SAAO;AACLa,iBAAa,EAAES,IADV;AAELL,iBAAa,EAAE,MAAMM,SAFhB;AAGLH,gBAAY,EAAEE;AAHT,GAAP;AAKD;;AAED,SAASR,QAAT,CACEU,IADF,EAGE;AAAA,MADAC,IACA,uEADO,GACP;AACA,MAAIC,KAA2C,GAAG,IAAlD;AACA,MAAIC,MAAJ;AACA,SAAO,YAA0B;AAAA,sCAAbC,IAAa;AAAbA,UAAa;AAAA;;AAC/BD,UAAM,GAAGC,IAATD;;AACA,QAAID,KAAK,KAAK,IAAd,EAAoB;AAClBA,WAAK,GAAGG,UAAU,CAAC,MAAM;AACvBL,YAAI,CAAC,GAAGG,MAAJ,CAAJH;AACAE,aAAK,GAAG,IAARA;AAFgB,SAGfD,IAHe,CAAlBC;AAID;AAPH;AASD,C,CAAA;;;AAGD,SAASJ,IAAT,GAAgB","names":["createSyncStoragePersister","storage","key","throttleTime","serialize","JSON","stringify","deserialize","parse","retry","trySave","persistedClient","setItem","error","persistClient","throttle","client","errorCount","restoreClient","cacheString","getItem","removeClient","removeItem","noop","undefined","func","wait","timer","params","args","setTimeout"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/query-sync-storage-persister/src/index.ts"],"sourcesContent":["import type {\n  PersistedClient,\n  Persister,\n  PersistRetryer,\n} from '@tanstack/query-persist-client-core'\n\ninterface Storage {\n  getItem: (key: string) => string | null\n  setItem: (key: string, value: string) => void\n  removeItem: (key: string) => void\n}\n\ninterface CreateSyncStoragePersisterOptions {\n  /** The storage client used for setting and retrieving items from cache.\n   * For SSR pass in `undefined`.\n   */\n  storage: Storage | undefined\n  /** The key to use when storing the cache */\n  key?: string\n  /** To avoid spamming,\n   * pass a time in ms to throttle saving the cache to disk */\n  throttleTime?: number\n  /**\n   * How to serialize the data to storage.\n   * @default `JSON.stringify`\n   */\n  serialize?: (client: PersistedClient) => string\n  /**\n   * How to deserialize the data from storage.\n   * @default `JSON.parse`\n   */\n  deserialize?: (cachedString: string) => PersistedClient\n\n  retry?: PersistRetryer\n}\n\nexport function createSyncStoragePersister({\n  storage,\n  key = `REACT_QUERY_OFFLINE_CACHE`,\n  throttleTime = 1000,\n  serialize = JSON.stringify,\n  deserialize = JSON.parse,\n  retry,\n}: CreateSyncStoragePersisterOptions): Persister {\n  if (typeof storage !== 'undefined') {\n    const trySave = (persistedClient: PersistedClient): Error | undefined => {\n      try {\n        storage.setItem(key, serialize(persistedClient))\n        return\n      } catch (error) {\n        return error as Error\n      }\n    }\n    return {\n      persistClient: throttle((persistedClient) => {\n        let client: PersistedClient | undefined = persistedClient\n        let error = trySave(client)\n        let errorCount = 0\n        while (error && client) {\n          errorCount++\n          client = retry?.({\n            persistedClient: client,\n            error,\n            errorCount,\n          })\n\n          if (client) {\n            error = trySave(client)\n          }\n        }\n      }, throttleTime),\n      restoreClient: () => {\n        const cacheString = storage.getItem(key)\n\n        if (!cacheString) {\n          return\n        }\n\n        return deserialize(cacheString) as PersistedClient\n      },\n      removeClient: () => {\n        storage.removeItem(key)\n      },\n    }\n  }\n\n  return {\n    persistClient: noop,\n    restoreClient: () => undefined,\n    removeClient: noop,\n  }\n}\n\nfunction throttle<TArgs extends any[]>(\n  func: (...args: TArgs) => any,\n  wait = 100,\n) {\n  let timer: ReturnType<typeof setTimeout> | null = null\n  let params: TArgs\n  return function (...args: TArgs) {\n    params = args\n    if (timer === null) {\n      timer = setTimeout(() => {\n        func(...params)\n        timer = null\n      }, wait)\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"]},"metadata":{},"sourceType":"module"}