{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\n\nfunction staller(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\n\nfunction bodyify(value, type) {\n  if (value == null) {\n    return null;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  if (isBytesLike(value)) {\n    if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n      try {\n        return toUtf8String(value);\n      } catch (error) {}\n\n      ;\n    }\n\n    return hexlify(value);\n  }\n\n  return value;\n} // This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\n\n\nexport function _fetchData(connection, body, processFunc) {\n  // How many times to retry in the event of a throttle\n  const attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n  const throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n  const throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n  const errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n  const headers = {};\n  let url = null; // @TODO: Allow ConnectionInfo to override some of these values\n\n  const options = {\n    method: \"GET\"\n  };\n  let allow304 = false;\n  let timeout = 2 * 60 * 1000;\n\n  if (typeof connection === \"string\") {\n    url = connection;\n  } else if (typeof connection === \"object\") {\n    if (connection == null || connection.url == null) {\n      logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n    }\n\n    url = connection.url;\n\n    if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n      timeout = connection.timeout;\n    }\n\n    if (connection.headers) {\n      for (const key in connection.headers) {\n        headers[key.toLowerCase()] = {\n          key: key,\n          value: String(connection.headers[key])\n        };\n\n        if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n          allow304 = true;\n        }\n      }\n    }\n\n    options.allowGzip = !!connection.allowGzip;\n\n    if (connection.user != null && connection.password != null) {\n      if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n        logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"url\",\n          url: url,\n          user: connection.user,\n          password: \"[REDACTED]\"\n        });\n      }\n\n      const authorization = connection.user + \":\" + connection.password;\n      headers[\"authorization\"] = {\n        key: \"Authorization\",\n        value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n      };\n    }\n\n    if (connection.skipFetchSetup != null) {\n      options.skipFetchSetup = !!connection.skipFetchSetup;\n    }\n  }\n\n  const reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\n  const dataMatch = url ? url.match(reData) : null;\n\n  if (dataMatch) {\n    try {\n      const response = {\n        statusCode: 200,\n        statusMessage: \"OK\",\n        headers: {\n          \"content-type\": dataMatch[1]\n        },\n        body: base64Decode(dataMatch[2])\n      };\n      let result = response.body;\n\n      if (processFunc) {\n        result = processFunc(response.body, response);\n      }\n\n      return Promise.resolve(result);\n    } catch (error) {\n      logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n        body: bodyify(dataMatch[1], dataMatch[2]),\n        error: error,\n        requestBody: null,\n        requestMethod: \"GET\",\n        url: url\n      });\n    }\n  }\n\n  if (body) {\n    options.method = \"POST\";\n    options.body = body;\n\n    if (headers[\"content-type\"] == null) {\n      headers[\"content-type\"] = {\n        key: \"Content-Type\",\n        value: \"application/octet-stream\"\n      };\n    }\n\n    if (headers[\"content-length\"] == null) {\n      headers[\"content-length\"] = {\n        key: \"Content-Length\",\n        value: String(body.length)\n      };\n    }\n  }\n\n  const flatHeaders = {};\n  Object.keys(headers).forEach(key => {\n    const header = headers[key];\n    flatHeaders[header.key] = header.value;\n  });\n  options.headers = flatHeaders;\n\n  const runningTimeout = function () {\n    let timer = null;\n    const promise = new Promise(function (resolve, reject) {\n      if (timeout) {\n        timer = setTimeout(() => {\n          if (timer == null) {\n            return;\n          }\n\n          timer = null;\n          reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            timeout: timeout,\n            url: url\n          }));\n        }, timeout);\n      }\n    });\n\n    const cancel = function () {\n      if (timer == null) {\n        return;\n      }\n\n      clearTimeout(timer);\n      timer = null;\n    };\n\n    return {\n      promise,\n      cancel\n    };\n  }();\n\n  const runningFetch = function () {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (let attempt = 0; attempt < attemptLimit; attempt++) {\n        let response = null;\n\n        try {\n          response = yield getUrl(url, options);\n\n          if (attempt < attemptLimit) {\n            if (response.statusCode === 301 || response.statusCode === 302) {\n              // Redirection; for now we only support absolute locataions\n              const location = response.headers.location || \"\";\n\n              if (options.method === \"GET\" && location.match(/^https:/)) {\n                url = response.headers.location;\n                continue;\n              }\n            } else if (response.statusCode === 429) {\n              // Exponential back-off throttling\n              let tryAgain = true;\n\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n\n              if (tryAgain) {\n                let stall = 0;\n                const retryAfter = response.headers[\"retry-after\"];\n\n                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                  stall = parseInt(retryAfter) * 1000;\n                } else {\n                  stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                } //console.log(\"Stalling 429\");\n\n\n                yield staller(stall);\n                continue;\n              }\n            }\n          }\n        } catch (error) {\n          response = error.response;\n\n          if (response == null) {\n            runningTimeout.cancel();\n            logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              serverError: error,\n              url: url\n            });\n          }\n        }\n\n        let body = response.body;\n\n        if (allow304 && response.statusCode === 304) {\n          body = null;\n        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n          runningTimeout.cancel();\n          logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n            status: response.statusCode,\n            headers: response.headers,\n            body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n          });\n        }\n\n        if (processFunc) {\n          try {\n            const result = yield processFunc(body, response);\n            runningTimeout.cancel();\n            return result;\n          } catch (error) {\n            // Allow the processFunc to trigger a throttle\n            if (error.throttleRetry && attempt < attemptLimit) {\n              let tryAgain = true;\n\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n\n              if (tryAgain) {\n                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log(\"Stalling callback\");\n\n                yield staller(timeout);\n                continue;\n              }\n            }\n\n            runningTimeout.cancel();\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n              body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n              error: error,\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              url: url\n            });\n          }\n        }\n\n        runningTimeout.cancel(); // If we had a processFunc, it either returned a T or threw above.\n        // The \"body\" is now a Uint8Array.\n\n        return body;\n      }\n\n      return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n        requestMethod: options.method,\n        url: url\n      });\n    });\n  }();\n\n  return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n  let processJsonFunc = (value, response) => {\n    let result = null;\n\n    if (value != null) {\n      try {\n        result = JSON.parse(toUtf8String(value));\n      } catch (error) {\n        logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n          body: value,\n          error: error\n        });\n      }\n    }\n\n    if (processFunc) {\n      result = processFunc(result, response);\n    }\n\n    return result;\n  }; // If we have json to send, we must\n  // - add content-type of application/json (unless already overridden)\n  // - convert the json to bytes\n\n\n  let body = null;\n\n  if (json != null) {\n    body = toUtf8Bytes(json); // Create a connection with the content-type set for JSON\n\n    const updated = typeof connection === \"string\" ? {\n      url: connection\n    } : shallowCopy(connection);\n\n    if (updated.headers) {\n      const hasContentType = Object.keys(updated.headers).filter(k => k.toLowerCase() === \"content-type\").length !== 0;\n\n      if (!hasContentType) {\n        updated.headers = shallowCopy(updated.headers);\n        updated.headers[\"content-type\"] = \"application/json\";\n      }\n    } else {\n      updated.headers = {\n        \"content-type\": \"application/json\"\n      };\n    }\n\n    connection = updated;\n  }\n\n  return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n  if (!options) {\n    options = {};\n  }\n\n  options = shallowCopy(options);\n\n  if (options.floor == null) {\n    options.floor = 0;\n  }\n\n  if (options.ceiling == null) {\n    options.ceiling = 10000;\n  }\n\n  if (options.interval == null) {\n    options.interval = 250;\n  }\n\n  return new Promise(function (resolve, reject) {\n    let timer = null;\n    let done = false; // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n\n    const cancel = () => {\n      if (done) {\n        return false;\n      }\n\n      done = true;\n\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      return true;\n    };\n\n    if (options.timeout) {\n      timer = setTimeout(() => {\n        if (cancel()) {\n          reject(new Error(\"timeout\"));\n        }\n      }, options.timeout);\n    }\n\n    const retryLimit = options.retryLimit;\n    let attempt = 0;\n\n    function check() {\n      return func().then(function (result) {\n        // If we have a result, or are allowed null then we're done\n        if (result !== undefined) {\n          if (cancel()) {\n            resolve(result);\n          }\n        } else if (options.oncePoll) {\n          options.oncePoll.once(\"poll\", check);\n        } else if (options.onceBlock) {\n          options.onceBlock.once(\"block\", check); // Otherwise, exponential back-off (up to 10s) our next request\n        } else if (!done) {\n          attempt++;\n\n          if (attempt > retryLimit) {\n            if (cancel()) {\n              reject(new Error(\"retry limit reached\"));\n            }\n\n            return;\n          }\n\n          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\n          if (timeout < options.floor) {\n            timeout = options.floor;\n          }\n\n          if (timeout > options.ceiling) {\n            timeout = options.ceiling;\n          }\n\n          setTimeout(check, timeout);\n        }\n\n        return null;\n      }, function (error) {\n        if (cancel()) {\n          reject(error);\n        }\n      });\n    }\n\n    check();\n  });\n}","map":{"version":3,"mappings":"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","names":["decode","base64Decode","encode","base64Encode","hexlify","isBytesLike","shallowCopy","toUtf8Bytes","toUtf8String","Logger","version","logger","getUrl","staller","duration","Promise","resolve","setTimeout","bodyify","value","type","split","trim","error","_fetchData","connection","body","processFunc","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","errorPassThrough","headers","url","options","method","allow304","timeout","throwArgumentError","key","toLowerCase","String","indexOf","allowGzip","user","password","substring","allowInsecureAuthentication","throwError","errors","INVALID_ARGUMENT","argument","authorization","skipFetchSetup","reData","RegExp","dataMatch","match","response","statusCode","statusMessage","result","SERVER_ERROR","requestBody","requestMethod","length","flatHeaders","Object","keys","forEach","header","runningTimeout","timer","promise","reject","makeError","TIMEOUT","cancel","clearTimeout","runningFetch","attempt","location","tryAgain","stall","retryAfter","parseInt","Math","random","pow","serverError","status","throttleRetry","race","fetchJson","json","processJsonFunc","JSON","parse","updated","hasContentType","filter","k","poll","func","floor","ceiling","interval","done","Error","retryLimit","check","then","undefined","oncePoll","once","onceBlock"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/web/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n    }\n    const reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": dataMatch[1] },\n                body: base64Decode(dataMatch[2])\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n"]},"metadata":{},"sourceType":"module"}