{"ast":null,"code":"import { parseFilterArgs, parseQueryArgs, functionalUpdate, noop, hashQueryKey, partialMatchKey, hashQueryKeyByOptions } from './utils.mjs';\nimport { QueryCache } from './queryCache.mjs';\nimport { MutationCache } from './mutationCache.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior.mjs';\nimport { defaultLogger } from './logger.mjs'; // CLASS\n\nclass QueryClient {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n    this.mountCount = 0;\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n    }\n  }\n\n  mount() {\n    this.mountCount++;\n    if (this.mountCount !== 1) return;\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    this.mountCount--;\n    if (this.mountCount !== 0) return;\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    this.unsubscribeFocus = undefined;\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n    this.unsubscribeOnline = undefined;\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  ensureQueryData(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const cachedData = this.getQueryData(parsedOptions.queryKey);\n    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(_ref2 => {\n      let {\n        queryKey,\n        state\n      } = _ref2;\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(_ref3 => {\n      let {\n        queryKey\n      } = _ref3;\n      return [queryKey, this.setQueryData(queryKey, updater, options)];\n    }));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}\n\nexport { QueryClient };","map":{"version":3,"mappings":"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","names":["QueryClient","constructor","config","queryCache","QueryCache","mutationCache","MutationCache","logger","defaultLogger","defaultOptions","queryDefaults","mutationDefaults","mountCount","process","env","NODE_ENV","error","mount","unsubscribeFocus","focusManager","subscribe","isFocused","resumePausedMutations","onFocus","unsubscribeOnline","onlineManager","isOnline","onOnline","unmount","undefined","isFetching","arg1","arg2","filters","parseFilterArgs","fetchStatus","findAll","length","isMutating","fetching","getQueryData","queryKey","find","_this$queryCache$find","state","data","ensureQueryData","arg3","parsedOptions","parseQueryArgs","cachedData","Promise","resolve","fetchQuery","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","updater","options","query","prevData","functionalUpdate","defaultedOptions","defaultQueryOptions","build","setData","manual","setQueriesData","notifyManager","batch","getQueryState","removeQueries","forEach","remove","resetQueries","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","revert","promises","cancel","all","then","noop","catch","invalidateQueries","invalidate","refetchType","_ref","filter","isDisabled","fetch","cancelRefetch","meta","refetchPage","promise","throwOnError","retry","isStaleByTime","staleTime","prefetchQuery","fetchInfiniteQuery","behavior","infiniteQueryBehavior","prefetchInfiniteQuery","getMutationCache","getLogger","getDefaultOptions","setDefaultOptions","setQueryDefaults","result","x","hashQueryKey","push","getQueryDefaults","firstMatchingDefaults","partialMatchKey","matchingDefaults","JSON","stringify","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","queryHash","hashQueryKeyByOptions","refetchOnReconnect","networkMode","useErrorBoundary","suspense","defaultMutationOptions","mutations","clear"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/query-core/src/queryClient.ts"],"sourcesContent":["import type { QueryFilters, Updater, MutationFilters } from './utils'\nimport {\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  functionalUpdate,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n  WithRequired,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private mountCount: number\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n    this.mountCount = 0\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\n        `Passing a custom logger has been deprecated and will be removed in the next major version.`,\n      )\n    }\n  }\n\n  mount(): void {\n    this.mountCount++\n    if (this.mountCount !== 1) return\n\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.mountCount--\n    if (this.mountCount !== 0) return\n\n    this.unsubscribeFocus?.()\n    this.unsubscribeFocus = undefined\n\n    this.unsubscribeOnline?.()\n    this.unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): TQueryFnData | undefined {\n    return this.queryCache.find<TQueryFnData>(queryKey, filters)?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: WithRequired<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: Omit<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: Omit<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey' | 'queryFn'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | WithRequired<\n          FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n          'queryKey'\n        >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const cachedData = this.getQueryData<TData>(parsedOptions.queryKey!)\n\n    return cachedData\n      ? Promise.resolve(cachedData)\n      : this.fetchQuery(parsedOptions)\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): TQueryFnData | undefined {\n    const query = this.queryCache.find<TQueryFnData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.queryCache.find<TQueryFnData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions,\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(cancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          }),\n        ),\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>,\n  ): void {\n    const result = this.queryDefaults.find(\n      (x) => hashQueryKey(queryKey) === hashQueryKey(x.queryKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find((x) =>\n      partialMatchKey(queryKey, x.queryKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter((x) =>\n        partialMatchKey(queryKey, x.queryKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several query defaults match with key '${JSON.stringify(\n            queryKey,\n          )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>,\n  ): void {\n    const result = this.mutationDefaults.find(\n      (x) => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find((x) =>\n      partialMatchKey(mutationKey, x.mutationKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter((x) =>\n        partialMatchKey(mutationKey, x.mutationKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n            mutationKey,\n          )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey,\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}