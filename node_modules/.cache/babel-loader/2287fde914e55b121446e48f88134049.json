{"ast":null,"code":"import * as React from 'react';\nconst defaultContext = /*#__PURE__*/React.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nconst useQueryClient = function () {\n  let {\n    context\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\n\nconst QueryClientProvider = _ref => {\n  let {\n    client,\n    children,\n    context,\n    contextSharing = false\n  } = _ref;\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n\n  if (process.env.NODE_ENV !== 'production' && contextSharing) {\n    client.getLogger().error(\"The contextSharing option has been deprecated and will be removed in the next major version\");\n  }\n\n  const Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};\n\nexport { QueryClientProvider, defaultContext, useQueryClient };","map":{"version":3,"mappings":";AAYO,MAAMA,cAAc,gBAAGC,KAAK,CAACC,aAAND,CAC5BE,SAD4BF,CAAvB;AAGP,MAAMG,yBAAyB,gBAAGH,KAAK,CAACC,aAAND,CAA6B,KAA7BA,CAAlC,C,CAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,qBAAT,CACEC,OADF,EAEEC,cAFF,EAGE;AACA,MAAID,OAAJ,EAAa;AACX,WAAOA,OAAP;AACD;;AACD,MAAIC,cAAc,IAAI,OAAOC,MAAP,KAAkB,WAAxC,EAAqD;AACnD,QAAI,CAACA,MAAM,CAACC,uBAAZ,EAAqC;AACnCD,YAAM,CAACC,uBAAPD,GAAiCR,cAAjCQ;AACD;;AAED,WAAOA,MAAM,CAACC,uBAAd;AACD;;AAED,SAAOT,cAAP;AACD;;AAEM,MAAMU,cAAc,GAAG,YAAsC;AAAA,MAArC;AAAEJ;AAAF,GAAqC,uEAAP,EAAO;AAClE,QAAMK,WAAW,GAAGV,KAAK,CAACW,UAANX,CAClBI,qBAAqB,CAACC,OAAD,EAAUL,KAAK,CAACW,UAANX,CAAiBG,yBAAjBH,CAAV,CADHA,CAApB;;AAIA,MAAI,CAACU,WAAL,EAAkB;AAChB,UAAM,IAAIE,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,SAAOF,WAAP;AACD,CAVM;;AA4BA,MAAMG,mBAAmB,GAAG,QAKU;AAAA,MALT;AAClCC,UADkC;AAElCC,YAFkC;AAGlCV,WAHkC;AAIlCC,kBAAc,GAAG;AAJiB,GAKS;AAC3CN,OAAK,CAACgB,SAANhB,CAAgB,MAAM;AACpBc,UAAM,CAACG,KAAPH;AACA,WAAO,MAAM;AACXA,YAAM,CAACI,OAAPJ;AADF;AAFF,KAKG,CAACA,MAAD,CALHd;;AAOA,MAAImB,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAAzBA,IAAyCb,cAA7C,EAA6D;AAC3DQ,UAAM,CACHQ,SADHR,GAEGS,KAFHT;AAKD;;AAED,QAAMU,OAAO,GAAGpB,qBAAqB,CAACC,OAAD,EAAUC,cAAV,CAArC;AAEA,sBACEN,oBAACG,yBAAD,CAA2BsB,QAA3B;AAAoCC,SAAK,EAAE,CAACrB,OAAD,IAAYC;AAAvD,KACE,iCAACkB,OAAD,CAASC,QAAT;AAAkBC,SAAK,EAAEZ;AAAzB,KAAkCC,QAAlC,CADF,CADF;AAKD,CA5BM","names":["defaultContext","React","createContext","undefined","QueryClientSharingContext","getQueryClientContext","context","contextSharing","window","ReactQueryClientContext","useQueryClient","queryClient","useContext","Error","QueryClientProvider","client","children","useEffect","mount","unmount","process","env","NODE_ENV","getLogger","error","Context","Provider","value"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/react-query/src/QueryClientProvider.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nexport const defaultContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(\n  context: React.Context<QueryClient | undefined> | undefined,\n  contextSharing: boolean,\n) {\n  if (context) {\n    return context\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = ({ context }: ContextOptions = {}) => {\n  const queryClient = React.useContext(\n    getQueryClientContext(context, React.useContext(QueryClientSharingContext)),\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\ntype QueryClientProviderPropsBase = {\n  client: QueryClient\n  children?: React.ReactNode\n}\ntype QueryClientProviderPropsWithContext = ContextOptions & {\n  contextSharing?: never\n} & QueryClientProviderPropsBase\ntype QueryClientProviderPropsWithContextSharing = {\n  context?: never\n  contextSharing?: boolean\n} & QueryClientProviderPropsBase\n\nexport type QueryClientProviderProps =\n  | QueryClientProviderPropsWithContext\n  | QueryClientProviderPropsWithContextSharing\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  if (process.env.NODE_ENV !== 'production' && contextSharing) {\n    client\n      .getLogger()\n      .error(\n        `The contextSharing option has been deprecated and will be removed in the next major version`,\n      )\n  }\n\n  const Context = getQueryClientContext(context, contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={!context && contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}