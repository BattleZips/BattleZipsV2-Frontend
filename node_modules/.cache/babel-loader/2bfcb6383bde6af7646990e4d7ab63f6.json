{"ast":null,"code":"import { isValidTimeout, isServer } from './utils.mjs';\n\nclass Removable {\n  destroy() {\n    this.clearGcTimeout();\n  }\n\n  scheduleGc() {\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime);\n    }\n  }\n\n  updateCacheTime(newCacheTime) {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n  }\n\n  clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  }\n\n}\n\nexport { Removable };","map":{"version":3,"mappings":";;AAEO,MAAeA,SAAf,CAAyB;AAI9BC,SAAO,GAAS;AACd,SAAKC,cAAL;AACD;;AAESC,YAAU,GAAS;AAC3B,SAAKD,cAAL;;AAEA,QAAIE,cAAc,CAAC,KAAKC,SAAN,CAAlB,EAAoC;AAClC,WAAKC,SAAL,GAAiBC,UAAU,CAAC,MAAM;AAChC,aAAKC,cAAL;AADyB,SAExB,KAAKH,SAFmB,CAA3B;AAGD;AACF;;AAESI,iBAAe,CAACC,YAAD,EAAyC;AAChE;AACA,SAAKL,SAAL,GAAiBM,IAAI,CAACC,GAALD,CACf,KAAKN,SAAL,IAAkB,CADHM,EAEfD,YAFe,IAEfA,sBAAiBG,QAAQ,GAAGC,QAAH,GAAc,IAAI,EAAJ,GAAS,IAFjCH,CAAjB;AAID;;AAEST,gBAAc,GAAG;AACzB,QAAI,KAAKI,SAAT,EAAoB;AAClBS,kBAAY,CAAC,KAAKT,SAAN,CAAZS;AACA,WAAKT,SAAL,GAAiBU,SAAjB;AACD;AACF;;AA/B6B","names":["Removable","destroy","clearGcTimeout","scheduleGc","isValidTimeout","cacheTime","gcTimeout","setTimeout","optionalRemove","updateCacheTime","newCacheTime","Math","max","isServer","Infinity","clearTimeout","undefined"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/query-core/src/removable.ts"],"sourcesContent":["import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n"]},"metadata":{},"sourceType":"module"}