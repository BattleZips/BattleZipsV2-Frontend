{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { arrayify } from \"@ethersproject/bytes\";\nexport function getUrl(href, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (options == null) {\n      options = {};\n    }\n\n    const request = {\n      method: options.method || \"GET\",\n      headers: options.headers || {},\n      body: options.body || undefined\n    };\n\n    if (options.skipFetchSetup !== true) {\n      request.mode = \"cors\"; // no-cors, cors, *same-origin\n\n      request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n\n      request.credentials = \"same-origin\"; // include, *same-origin, omit\n\n      request.redirect = \"follow\"; // manual, *follow, error\n\n      request.referrer = \"client\"; // no-referrer, *client\n    }\n\n    ;\n    const response = yield fetch(href, request);\n    const body = yield response.arrayBuffer();\n    const headers = {};\n\n    if (response.headers.forEach) {\n      response.headers.forEach((value, key) => {\n        headers[key.toLowerCase()] = value;\n      });\n    } else {\n      response.headers.keys().forEach(key => {\n        headers[key.toLowerCase()] = response.headers.get(key);\n      });\n    }\n\n    return {\n      headers: headers,\n      statusCode: response.status,\n      statusMessage: response.statusText,\n      body: arrayify(new Uint8Array(body))\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,QAAT,QAAyB,sBAAzB;AAMA,OAAM,SAAgBC,MAAhB,CAAuBC,IAAvB,EAAqCC,OAArC,EAAsD;;AACxD,QAAIA,OAAO,IAAI,IAAf,EAAqB;AAAEA,aAAO,GAAG,EAAV;AAAgB;;AAEvC,UAAMC,OAAO,GAAgB;AACzBC,YAAM,EAAGF,OAAO,CAACE,MAAR,IAAkB,KADF;AAEzBC,aAAO,EAAGH,OAAO,CAACG,OAAR,IAAmB,EAFJ;AAGzBC,UAAI,EAAGJ,OAAO,CAACI,IAAR,IAAgBC;AAHE,KAA7B;;AAMA,QAAIL,OAAO,CAACM,cAAR,KAA2B,IAA/B,EAAqC;AACjCL,aAAO,CAACM,IAAR,GAA4B,MAA5B,CADiC,CACgB;;AACjDN,aAAO,CAACO,KAAR,GAA8B,UAA9B,CAFiC,CAEgB;;AACjDP,aAAO,CAACQ,WAAR,GAA0C,aAA1C,CAHiC,CAGyB;;AAC1DR,aAAO,CAACS,QAAR,GAAoC,QAApC,CAJiC,CAIgB;;AACjDT,aAAO,CAACU,QAAR,GAAmB,QAAnB,CALiC,CAKgB;AACpD;;AAAA;AAED,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACd,IAAD,EAAOE,OAAP,CAA5B;AACA,UAAMG,IAAI,GAAG,MAAMQ,QAAQ,CAACE,WAAT,EAAnB;AAEA,UAAMX,OAAO,GAAiC,EAA9C;;AACA,QAAIS,QAAQ,CAACT,OAAT,CAAiBY,OAArB,EAA8B;AAC1BH,cAAQ,CAACT,OAAT,CAAiBY,OAAjB,CAAyB,CAACC,KAAD,EAAQC,GAAR,KAAe;AACpCd,eAAO,CAACc,GAAG,CAACC,WAAJ,EAAD,CAAP,GAA6BF,KAA7B;AACH,OAFD;AAGH,KAJD,MAIO;AAC2BJ,cAAQ,CAACT,OAAV,CAAoBgB,IAA3B,GAAoCJ,OAApC,CAA6CE,GAAD,IAAQ;AACtEd,eAAO,CAACc,GAAG,CAACC,WAAJ,EAAD,CAAP,GAA6BN,QAAQ,CAACT,OAAT,CAAiBiB,GAAjB,CAAqBH,GAArB,CAA7B;AACH,OAFqB;AAGzB;;AAED,WAAO;AACHd,aAAO,EAAEA,OADN;AAEHkB,gBAAU,EAAET,QAAQ,CAACU,MAFlB;AAGHC,mBAAa,EAAEX,QAAQ,CAACY,UAHrB;AAIHpB,UAAI,EAAEP,QAAQ,CAAC,IAAI4B,UAAJ,CAAerB,IAAf,CAAD;AAJX,KAAP;AAMH;AAAA","names":["arrayify","getUrl","href","options","request","method","headers","body","undefined","skipFetchSetup","mode","cache","credentials","redirect","referrer","response","fetch","arrayBuffer","forEach","value","key","toLowerCase","keys","get","statusCode","status","statusMessage","statusText","Uint8Array"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/web/src.ts/browser-geturl.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n"]},"metadata":{},"sourceType":"module"}