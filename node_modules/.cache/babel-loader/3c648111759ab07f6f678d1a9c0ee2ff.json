{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); // Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n\nfunction getGlobal() {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  throw new Error('unable to locate global object');\n}\n\n;\nconst anyGlobal = getGlobal();\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\n\nif (!crypto || !crypto.getRandomValues) {\n  logger.warn(\"WARNING: Missing strong random number source\");\n  crypto = {\n    getRandomValues: function (buffer) {\n      return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"crypto.getRandomValues\"\n      });\n    }\n  };\n}\n\nexport function randomBytes(length) {\n  if (length <= 0 || length > 1024 || length % 1 || length != length) {\n    logger.throwArgumentError(\"invalid length\", \"length\", length);\n  }\n\n  const result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return arrayify(result);\n}\n;","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,QAAT,QAAyB,sBAAzB;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf,C,CAEA;AACA;AAEA;;AACA,SAASE,SAAT,GAAkB;AAChB,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAAE,WAAOA,IAAP;AAAc;;AACjD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAAE,WAAOA,MAAP;AAAgB;;AACrD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAAE,WAAOA,MAAP;AAAgB;;AACrD,QAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAAA;AAED,MAAMC,SAAS,GAAGL,SAAS,EAA3B;AAEA,IAAIM,MAAM,GAAQD,SAAS,CAACC,MAAV,IAAoBD,SAAS,CAACE,QAAhD;;AACA,IAAI,CAACD,MAAD,IAAW,CAACA,MAAM,CAACE,eAAvB,EAAwC;AAEpCT,QAAM,CAACU,IAAP,CAAY,8CAAZ;AAEAH,QAAM,GAAG;AACLE,mBAAe,EAAE,UAASE,MAAT,EAA2B;AACxC,aAAOX,MAAM,CAACY,UAAP,CAAkB,mCAAlB,EAAuDd,MAAM,CAACe,MAAP,CAAcC,qBAArE,EAA4F;AAC/FC,iBAAS,EAAE;AADoF,OAA5F,CAAP;AAGH;AALI,GAAT;AAOH;;AAED,OAAM,SAAUC,WAAV,CAAsBC,MAAtB,EAAoC;AACtC,MAAIA,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAG,IAAxB,IAAiCA,MAAM,GAAG,CAA1C,IAAgDA,MAAM,IAAIA,MAA9D,EAAsE;AAClEjB,UAAM,CAACkB,kBAAP,CAA0B,gBAA1B,EAA4C,QAA5C,EAAsDD,MAAtD;AACH;;AAED,QAAME,MAAM,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAf;AACAV,QAAM,CAACE,eAAP,CAAuBU,MAAvB;AACA,SAAOtB,QAAQ,CAACsB,MAAD,CAAf;AACH;AAAA","names":["arrayify","Logger","version","logger","getGlobal","self","window","global","Error","anyGlobal","crypto","msCrypto","getRandomValues","warn","buffer","throwError","errors","UNSUPPORTED_OPERATION","operation","randomBytes","length","throwArgumentError","result","Uint8Array"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/random/src.ts/browser-random.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal(): any {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\nconst anyGlobal = getGlobal();\n\nlet crypto: any = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n\n    logger.warn(\"WARNING: Missing strong random number source\");\n\n    crypto = {\n        getRandomValues: function(buffer: Uint8Array): Uint8Array {\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\n\nexport function randomBytes(length: number): Uint8Array {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n};\n"]},"metadata":{},"sourceType":"module"}