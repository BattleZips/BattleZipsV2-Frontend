{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\n\nfunction checkError(method, error, params) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    const e = error.error;\n\n    if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n      return e.data;\n    }\n\n    logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n      error,\n      data: \"0x\"\n    });\n  }\n\n  let message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n\n  message = (message || \"\").toLowerCase();\n  const transaction = params.transaction || params.signedTransaction; // \"insufficient funds for gas * price + value + cost(data)\"\n\n  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  } // \"nonce too low\"\n\n\n  if (message.match(/nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/replacement transaction underpriced/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/only replay-protected/)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  throw error;\n}\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    logger.checkNew(new.target, JsonRpcSigner);\n    super();\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(this, \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n\n      return address;\n    }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n\n    if (transaction.to != null) {\n      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {\n        if (to == null) {\n          return null;\n        }\n\n        const address = yield this.provider.resolveName(to);\n\n        if (address == null) {\n          logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n        }\n\n        return address;\n      }));\n    }\n\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(_ref => {\n      let {\n        tx,\n        sender\n      } = _ref;\n\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // This cannot be mined any earlier than any recent block\n      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval); // Send the transaction\n\n      const hash = yield this.sendUncheckedTransaction(transaction);\n\n      try {\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n          const tx = yield this.provider.getTransaction(hash);\n\n          if (tx === null) {\n            return undefined;\n          }\n\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        }), {\n          oncePoll: this.provider\n        });\n      } catch (error) {\n        error.transactionHash = hash;\n        throw error;\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n    });\n  }\n\n  _legacySignMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress(); // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n\n      return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n    });\n  }\n\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n      return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n    });\n  }\n\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n\n}\n\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    logger.checkNew(new.target, JsonRpcProvider);\n    let networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n\n    super(networkOrReady); // Default URL\n\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n\n    this._nextId = 42;\n  }\n\n  get _cache() {\n    if (this._eventLoopCache == null) {\n      this._eventLoopCache = {};\n    }\n\n    return this._eventLoopCache;\n  }\n\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n\n  detectNetwork() {\n    if (!this._cache[\"detectNetwork\"]) {\n      this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork(); // Clear this cache at the beginning of the next event loop\n\n      setTimeout(() => {\n        this._cache[\"detectNetwork\"] = null;\n      }, 0);\n    }\n\n    return this._cache[\"detectNetwork\"];\n  }\n\n  _uncachedDetectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    }); // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n\n    const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    }); // Cache the fetch, but clear it on the next event loop\n\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n\n        return null;\n\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n\n        return [\"eth_getLogs\", [params.filter]];\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Legacy networks do not like the type field being passed along (which\n      // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n      if (method === \"call\" || method === \"estimateGas\") {\n        const tx = params.transaction;\n\n        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n          // If there are no EIP-1559 properties, it might be non-EIP-a559\n          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n            const feeData = yield this.getFeeData();\n\n            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n              // Network doesn't know about EIP-1559 (and hence type)\n              params = shallowCopy(params);\n              params.transaction = shallowCopy(tx);\n              delete params.transaction.type;\n            }\n          }\n        }\n      }\n\n      const args = this.prepareRequest(method, params);\n\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n\n    super._startEvent(event);\n  }\n\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n\n    super._stopEvent(event);\n  } // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n\n\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n\n    checkProperties(transaction, allowed);\n    const result = {}; // JSON-RPC now requires numeric values to be \"quantity\" values\n\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      const value = hexValue(transaction[key]);\n\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      result[key] = hexlify(transaction[key]);\n    });\n\n    if (transaction.accessList) {\n      result[\"accessList\"] = accessListify(transaction.accessList);\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,SAASA,MAAT,QAAyE,gCAAzE;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,WAAnC,QAAsD,sBAAtD;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,SAASC,eAAT,EAA0BC,QAA1B,EAAgDC,cAAhD,EAAgEC,SAAhE,EAA2EC,iBAA3E,EAA8FC,WAA9F,QAAiH,2BAAjH;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAAqBC,aAArB,QAA0C,6BAA1C;AACA,SAAyBC,SAAzB,EAAoCC,IAApC,QAAgD,oBAAhD;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,SAASE,YAAT,QAAoC,iBAApC;AAGA,MAAMC,QAAQ,GAAG,CAAE,MAAF,EAAU,aAAV,CAAjB;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAAoCC,KAApC,EAAgDC,MAAhD,EAA2D;AACvD;AACA;AACA,MAAIF,MAAM,KAAK,MAAX,IAAqBC,KAAK,CAACE,IAAN,KAAeT,MAAM,CAACU,MAAP,CAAcC,YAAtD,EAAoE;AAChE,UAAMC,CAAC,GAAGL,KAAK,CAACA,KAAhB;;AACA,QAAIK,CAAC,IAAIA,CAAC,CAACC,OAAF,CAAUC,KAAV,CAAgB,UAAhB,CAAL,IAAoC1B,WAAW,CAACwB,CAAC,CAACG,IAAH,CAAnD,EAA6D;AACzD,aAAOH,CAAC,CAACG,IAAT;AACH;;AAEDb,UAAM,CAACc,UAAP,CAAkB,uCAAlB,EAA2DhB,MAAM,CAACU,MAAP,CAAcO,cAAzE,EAAyF;AACrFV,WADqF;AAC9EQ,UAAI,EAAE;AADwE,KAAzF;AAGH;;AAED,MAAIF,OAAO,GAAGN,KAAK,CAACM,OAApB;;AACA,MAAIN,KAAK,CAACE,IAAN,KAAeT,MAAM,CAACU,MAAP,CAAcC,YAA7B,IAA6CJ,KAAK,CAACA,KAAnD,IAA4D,OAAOA,KAAK,CAACA,KAAN,CAAYM,OAAnB,KAAgC,QAAhG,EAA0G;AACtGA,WAAO,GAAGN,KAAK,CAACA,KAAN,CAAYM,OAAtB;AACH,GAFD,MAEO,IAAI,OAAON,KAAK,CAACW,IAAb,KAAuB,QAA3B,EAAqC;AACxCL,WAAO,GAAGN,KAAK,CAACW,IAAhB;AACH,GAFM,MAEA,IAAI,OAAOX,KAAK,CAACY,YAAb,KAA+B,QAAnC,EAA6C;AAChDN,WAAO,GAAGN,KAAK,CAACY,YAAhB;AACH;;AACDN,SAAO,GAAG,CAACA,OAAO,IAAI,EAAZ,EAAgBO,WAAhB,EAAV;AAEA,QAAMC,WAAW,GAAGb,MAAM,CAACa,WAAP,IAAsBb,MAAM,CAACc,iBAAjD,CAxBuD,CA0BvD;;AACA,MAAIT,OAAO,CAACC,KAAR,CAAc,+CAAd,CAAJ,EAAoE;AAChEZ,UAAM,CAACc,UAAP,CAAkB,mDAAlB,EAAuEhB,MAAM,CAACU,MAAP,CAAca,kBAArF,EAAyG;AACrGhB,WADqG;AAC9FD,YAD8F;AACtFe;AADsF,KAAzG;AAGH,GA/BsD,CAiCvD;;;AACA,MAAIR,OAAO,CAACC,KAAR,CAAc,eAAd,CAAJ,EAAoC;AAChCZ,UAAM,CAACc,UAAP,CAAkB,6BAAlB,EAAiDhB,MAAM,CAACU,MAAP,CAAcc,aAA/D,EAA8E;AAC1EjB,WAD0E;AACnED,YADmE;AAC3De;AAD2D,KAA9E;AAGH,GAtCsD,CAwCvD;;;AACA,MAAIR,OAAO,CAACC,KAAR,CAAc,qCAAd,CAAJ,EAA0D;AACtDZ,UAAM,CAACc,UAAP,CAAkB,yBAAlB,EAA6ChB,MAAM,CAACU,MAAP,CAAce,uBAA3D,EAAoF;AAChFlB,WADgF;AACzED,YADyE;AACjEe;AADiE,KAApF;AAGH,GA7CsD,CA+CvD;;;AACA,MAAIR,OAAO,CAACC,KAAR,CAAc,uBAAd,CAAJ,EAA4C;AACxCZ,UAAM,CAACc,UAAP,CAAkB,+CAAlB,EAAmEhB,MAAM,CAACU,MAAP,CAAcgB,qBAAjF,EAAwG;AACpGnB,WADoG;AAC7FD,YAD6F;AACrFe;AADqF,KAAxG;AAGH;;AAED,MAAIjB,QAAQ,CAACuB,OAAT,CAAiBrB,MAAjB,KAA4B,CAA5B,IAAiCO,OAAO,CAACC,KAAR,CAAc,8EAAd,CAArC,EAAoI;AAChIZ,UAAM,CAACc,UAAP,CAAkB,2EAAlB,EAA+FhB,MAAM,CAACU,MAAP,CAAckB,uBAA7G,EAAsI;AAClIrB,WADkI;AAC3HD,YAD2H;AACnHe;AADmH,KAAtI;AAGH;;AAED,QAAMd,KAAN;AACH;;AAED,SAASsB,KAAT,CAAeC,OAAf,EAA8B;AAC1B,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAgB;AAC/BC,cAAU,CAACD,OAAD,EAAUF,OAAV,CAAV;AACH,GAFM,CAAP;AAGH;;AAED,SAASI,SAAT,CAAmBC,OAAnB,EAAqG;AACjG,MAAIA,OAAO,CAAC5B,KAAZ,EAAmB;AACf;AACA,UAAMA,KAAK,GAAQ,IAAI6B,KAAJ,CAAUD,OAAO,CAAC5B,KAAR,CAAcM,OAAxB,CAAnB;AACAN,SAAK,CAACE,IAAN,GAAa0B,OAAO,CAAC5B,KAAR,CAAcE,IAA3B;AACAF,SAAK,CAACQ,IAAN,GAAaoB,OAAO,CAAC5B,KAAR,CAAcQ,IAA3B;AACA,UAAMR,KAAN;AACH;;AAED,SAAO4B,OAAO,CAACE,MAAf;AACH;;AAED,SAASC,YAAT,CAAsBC,KAAtB,EAAmC;AAC/B,MAAIA,KAAJ,EAAW;AAAE,WAAOA,KAAK,CAACnB,WAAN,EAAP;AAA6B;;AAC1C,SAAOmB,KAAP;AACH;;AAED,MAAMC,iBAAiB,GAAG,EAA1B;AAEA,OAAM,MAAOC,aAAP,SAA6BzD,MAA7B,CAAmC;AAKrC0D,cAAYC,gBAAZ,EAAmCC,QAAnC,EAA8DC,cAA9D,EAA8F;AAC1F3C,UAAM,CAAC4C,QAAP,CAAgBC,GAAG,CAACC,MAApB,EAA4BP,aAA5B;AAEA;;AAEA,QAAIE,gBAAgB,KAAKH,iBAAzB,EAA4C;AACxC,YAAM,IAAIJ,KAAJ,CAAU,4EAAV,CAAN;AACH;;AAED5C,kBAAc,CAAC,IAAD,EAAO,UAAP,EAAmBoD,QAAnB,CAAd;;AAEA,QAAIC,cAAc,IAAI,IAAtB,EAA4B;AAAEA,oBAAc,GAAG,CAAjB;AAAqB;;AAEnD,QAAI,OAAOA,cAAP,KAA2B,QAA/B,EAAyC;AACrCrD,oBAAc,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAKoD,QAAL,CAAcK,SAAd,CAAwBC,OAAxB,CAAgCL,cAAhC,CAAnB,CAAd;AACArD,oBAAc,CAAC,IAAD,EAAO,QAAP,EAAiB,IAAjB,CAAd;AAEH,KAJD,MAIO,IAAI,OAAOqD,cAAP,KAA2B,QAA/B,EAAyC;AAC5CrD,oBAAc,CAAC,IAAD,EAAO,QAAP,EAAiBqD,cAAjB,CAAd;AACArD,oBAAc,CAAC,IAAD,EAAO,UAAP,EAAmB,IAAnB,CAAd;AAEH,KAJM,MAIA;AACHU,YAAM,CAACiD,kBAAP,CAA0B,0BAA1B,EAAsD,gBAAtD,EAAwEN,cAAxE;AACH;AACJ;;AAEDO,SAAO,CAACR,QAAD,EAAmB;AACtB,WAAO1C,MAAM,CAACc,UAAP,CAAkB,yCAAlB,EAA6DhB,MAAM,CAACU,MAAP,CAAcgB,qBAA3E,EAAkG;AACrG2B,eAAS,EAAE;AAD0F,KAAlG,CAAP;AAGH;;AAEDC,kBAAgB;AACZ,WAAO,IAAIC,sBAAJ,CAA2Bf,iBAA3B,EAA8C,KAAKI,QAAnD,EAA6D,KAAKY,QAAL,IAAiB,KAAKC,MAAnF,CAAP;AACH;;AAEDC,YAAU;AACN,QAAI,KAAKF,QAAT,EAAmB;AACf,aAAOzB,OAAO,CAACC,OAAR,CAAgB,KAAKwB,QAArB,CAAP;AACH;;AAED,WAAO,KAAKZ,QAAL,CAAce,IAAd,CAAmB,cAAnB,EAAmC,EAAnC,EAAuCC,IAAvC,CAA6CC,QAAD,IAAa;AAC5D,UAAIA,QAAQ,CAACC,MAAT,IAAmB,KAAKL,MAA5B,EAAoC;AAChCvD,cAAM,CAACc,UAAP,CAAkB,sBAAsB,KAAKyC,MAA7C,EAAqDzD,MAAM,CAACU,MAAP,CAAcgB,qBAAnE,EAA0F;AACtF2B,mBAAS,EAAE;AAD2E,SAA1F;AAGH;;AACD,aAAO,KAAKT,QAAL,CAAcK,SAAd,CAAwBC,OAAxB,CAAgCW,QAAQ,CAAC,KAAKJ,MAAN,CAAxC,CAAP;AACH,KAPM,CAAP;AAQH;;AAEDM,0BAAwB,CAAC1C,WAAD,EAA4C;AAChEA,eAAW,GAAG1B,WAAW,CAAC0B,WAAD,CAAzB;AAEA,UAAM2C,WAAW,GAAG,KAAKN,UAAL,GAAkBE,IAAlB,CAAwBV,OAAD,IAAY;AACnD,UAAIA,OAAJ,EAAa;AAAEA,eAAO,GAAGA,OAAO,CAAC9B,WAAR,EAAV;AAAkC;;AACjD,aAAO8B,OAAP;AACH,KAHmB,CAApB,CAHgE,CAQhE;AACA;AACA;;AACA,QAAI7B,WAAW,CAAC4C,QAAZ,IAAwB,IAA5B,EAAkC;AAC9B,YAAMC,QAAQ,GAAGvE,WAAW,CAAC0B,WAAD,CAA5B;AACA6C,cAAQ,CAACC,IAAT,GAAgBH,WAAhB;AACA3C,iBAAW,CAAC4C,QAAZ,GAAuB,KAAKrB,QAAL,CAAcwB,WAAd,CAA0BF,QAA1B,CAAvB;AACH;;AAED,QAAI7C,WAAW,CAACgD,EAAZ,IAAkB,IAAtB,EAA4B;AACxBhD,iBAAW,CAACgD,EAAZ,GAAiBtC,OAAO,CAACC,OAAR,CAAgBX,WAAW,CAACgD,EAA5B,EAAgCT,IAAhC,CAA4CS,EAAP,IAAaC;AAC/D,YAAID,EAAE,IAAI,IAAV,EAAgB;AAAE,iBAAO,IAAP;AAAc;;AAChC,cAAMnB,OAAO,GAAG,MAAM,KAAKN,QAAL,CAAc2B,WAAd,CAA0BF,EAA1B,CAAtB;;AACA,YAAInB,OAAO,IAAI,IAAf,EAAqB;AACjBhD,gBAAM,CAACiD,kBAAP,CAA0B,oCAA1B,EAAgE,OAAhE,EAAyEkB,EAAzE;AACH;;AACD,eAAOnB,OAAP;AACH,OAPkE,CAAlD,CAAjB;AAQH;;AAED,WAAOxD,iBAAiB,CAAC;AACrB8E,QAAE,EAAE9E,iBAAiB,CAAC2B,WAAD,CADA;AAErBoD,YAAM,EAAET;AAFa,KAAD,CAAjB,CAGJJ,IAHI,CAGC,QAAmB;AAAA,UAAlB;AAAEY,UAAF;AAAMC;AAAN,OAAkB;;AAEvB,UAAID,EAAE,CAACL,IAAH,IAAW,IAAf,EAAqB;AACjB,YAAIK,EAAE,CAACL,IAAH,CAAQ/C,WAAR,OAA0BqD,MAA9B,EAAsC;AAClCvE,gBAAM,CAACiD,kBAAP,CAA0B,uBAA1B,EAAmD,aAAnD,EAAkE9B,WAAlE;AACH;AACJ,OAJD,MAIO;AACHmD,UAAE,CAACL,IAAH,GAAUM,MAAV;AACH;;AAED,YAAMC,KAAK,GAAS,KAAK9B,QAAL,CAAcF,WAAd,CAA2BiC,kBAA3B,CAA8CH,EAA9C,EAAkD;AAAEL,YAAI,EAAE;AAAR,OAAlD,CAApB;AAEA,aAAO,KAAKvB,QAAL,CAAce,IAAd,CAAmB,qBAAnB,EAA0C,CAAEe,KAAF,CAA1C,EAAqDd,IAArD,CAA2DgB,IAAD,IAAS;AACtE,eAAOA,IAAP;AACH,OAFM,EAEHrE,KAAD,IAAU;AACT,eAAOF,UAAU,CAAC,iBAAD,EAAoBE,KAApB,EAA2BmE,KAA3B,CAAjB;AACH,OAJM,CAAP;AAKH,KApBM,CAAP;AAqBH;;AAEDG,iBAAe,CAACxD,WAAD,EAA4C;AACvD,WAAOnB,MAAM,CAACc,UAAP,CAAkB,qCAAlB,EAAyDhB,MAAM,CAACU,MAAP,CAAcgB,qBAAvE,EAA8F;AACjG2B,eAAS,EAAE;AADsF,KAA9F,CAAP;AAGH;;AAEKyB,iBAAe,CAACzD,WAAD,EAA4C;;AAC7D;AACA,YAAM0D,WAAW,GAAG,MAAM,KAAKnC,QAAL,CAAcoC,uBAAd,CAAsC,MAAM,IAAI,KAAKpC,QAAL,CAAcqC,eAA9D,CAA1B,EAEA;;AACA,YAAML,IAAI,GAAG,MAAM,KAAKb,wBAAL,CAA8B1C,WAA9B,CAAnB;;AAEA,UAAI;AACA;AACA;AACA;AACA,eAAO,MAAMtB,IAAI,CAAC,MAAWuE;AACzB,gBAAME,EAAE,GAAG,MAAM,KAAK5B,QAAL,CAAcsC,cAAd,CAA6BN,IAA7B,CAAjB;;AACA,cAAIJ,EAAE,KAAK,IAAX,EAAiB;AAAE,mBAAOW,SAAP;AAAmB;;AACtC,iBAAO,KAAKvC,QAAL,CAAcwC,gBAAd,CAA+BZ,EAA/B,EAAmCI,IAAnC,EAAyCG,WAAzC,CAAP;AACH,SAJ4B,CAAZ,EAId;AAAEM,kBAAQ,EAAE,KAAKzC;AAAjB,SAJc,CAAjB;AAKH,OATD,CASE,OAAOrC,KAAP,EAAc;AACNA,aAAM,CAAC+E,eAAP,GAAyBV,IAAzB;AACN,cAAMrE,KAAN;AACH;AACJ;AAAA;;AAEKgF,aAAW,CAAC1E,OAAD,EAAwB;;AACrC,YAAME,IAAI,GAAK,OAAOF,OAAP,KAAoB,QAArB,GAAiCjB,WAAW,CAACiB,OAAD,CAA5C,GAAuDA,OAArE;AACA,YAAMqC,OAAO,GAAG,MAAM,KAAKQ,UAAL,EAAtB;AAEA,aAAO,MAAM,KAAKd,QAAL,CAAce,IAAd,CAAmB,eAAnB,EAAoC,CAAEzE,OAAO,CAAC6B,IAAD,CAAT,EAAiBmC,OAAO,CAAC9B,WAAR,EAAjB,CAApC,CAAb;AACH;AAAA;;AAEKoE,oBAAkB,CAAC3E,OAAD,EAAwB;;AAC5C,YAAME,IAAI,GAAK,OAAOF,OAAP,KAAoB,QAArB,GAAiCjB,WAAW,CAACiB,OAAD,CAA5C,GAAuDA,OAArE;AACA,YAAMqC,OAAO,GAAG,MAAM,KAAKQ,UAAL,EAAtB,EAEA;;AACA,aAAO,MAAM,KAAKd,QAAL,CAAce,IAAd,CAAmB,UAAnB,EAA+B,CAAET,OAAO,CAAC9B,WAAR,EAAF,EAAyBlC,OAAO,CAAC6B,IAAD,CAAhC,CAA/B,CAAb;AACH;AAAA;;AAEK0E,gBAAc,CAACC,MAAD,EAA0BC,KAA1B,EAAwEpD,KAAxE,EAAkG;;AAClH;AACA,YAAMqD,SAAS,GAAG,MAAMvG,iBAAiB,CAACwG,YAAlB,CAA+BH,MAA/B,EAAuCC,KAAvC,EAA8CpD,KAA9C,EAAsDuD,IAAD,IAAiB;AAC1F,eAAO,KAAKlD,QAAL,CAAc2B,WAAd,CAA0BuB,IAA1B,CAAP;AACH,OAFuB,CAAxB;AAIA,YAAM5C,OAAO,GAAG,MAAM,KAAKQ,UAAL,EAAtB;AAEA,aAAO,MAAM,KAAKd,QAAL,CAAce,IAAd,CAAmB,sBAAnB,EAA2C,CACpDT,OAAO,CAAC9B,WAAR,EADoD,EAEpD2E,IAAI,CAACC,SAAL,CAAe3G,iBAAiB,CAAC4G,UAAlB,CAA6BL,SAAS,CAACF,MAAvC,EAA+CC,KAA/C,EAAsDC,SAAS,CAACrD,KAAhE,CAAf,CAFoD,CAA3C,CAAb;AAIH;AAAA;;AAEK2D,QAAM,CAACC,QAAD,EAAiB;;AACzB,YAAMvD,QAAQ,GAAG,KAAKA,QAAtB;AAEA,YAAMM,OAAO,GAAG,MAAM,KAAKQ,UAAL,EAAtB;AAEA,aAAOd,QAAQ,CAACe,IAAT,CAAc,wBAAd,EAAwC,CAAET,OAAO,CAAC9B,WAAR,EAAF,EAAyB+E,QAAzB,EAAmC,IAAnC,CAAxC,CAAP;AACH;AAAA;;AA1KoC;;AA6KzC,MAAM5C,sBAAN,SAAqCd,aAArC,CAAkD;AAC9CqC,iBAAe,CAACzD,WAAD,EAA4C;AACvD,WAAO,KAAK0C,wBAAL,CAA8B1C,WAA9B,EAA2CuC,IAA3C,CAAiDgB,IAAD,IAAS;AAC5D,aAA4B;AACxBA,YAAI,EAAEA,IADkB;AAExBwB,aAAK,EAAE,IAFiB;AAGxBnC,gBAAQ,EAAE,IAHc;AAIxBoC,gBAAQ,EAAE,IAJc;AAKxBtF,YAAI,EAAE,IALkB;AAMxBwB,aAAK,EAAE,IANiB;AAOxB+D,eAAO,EAAE,IAPe;AAQxBC,qBAAa,EAAE,CARS;AASxBpC,YAAI,EAAE,IATkB;AAUxBqC,YAAI,EAAGD,aAAD,IAA2B;AAAG,iBAAO,KAAK3D,QAAL,CAAc6D,kBAAd,CAAiC7B,IAAjC,EAAuC2B,aAAvC,CAAP;AAA+D;AAV3E,OAA5B;AAYH,KAbM,CAAP;AAcH;;AAhB6C;;AAmBlD,MAAMG,sBAAsB,GAAiC;AACzDJ,SAAO,EAAE,IADgD;AAC1CvF,MAAI,EAAE,IADoC;AAC9BkD,UAAQ,EAAE,IADoB;AACdoC,UAAQ,EAAC,IADK;AACCD,OAAK,EAAE,IADR;AACc/B,IAAE,EAAE,IADlB;AACwB9B,OAAK,EAAE,IAD/B;AAEzDoE,MAAI,EAAE,IAFmD;AAE7CC,YAAU,EAAE,IAFiC;AAGzDC,cAAY,EAAE,IAH2C;AAGrCC,sBAAoB,EAAE;AAHe,CAA7D;AAMA,OAAM,MAAOC,eAAP,SAA+B5G,YAA/B,CAA2C;AAiB7CuC,cAAYsE,GAAZ,EAA2CC,OAA3C,EAA+D;AAC3D/G,UAAM,CAAC4C,QAAP,CAAgBC,GAAG,CAACC,MAApB,EAA4B+D,eAA5B;AAEA,QAAIG,cAAc,GAAkCD,OAApD,CAH2D,CAK3D;;AACA,QAAIC,cAAc,IAAI,IAAtB,EAA4B;AACxBA,oBAAc,GAAG,IAAInF,OAAJ,CAAY,CAACC,OAAD,EAAUmF,MAAV,KAAoB;AAC7ClF,kBAAU,CAAC,MAAK;AACZ,eAAKmF,aAAL,GAAqBxD,IAArB,CAA2BqD,OAAD,IAAY;AAClCjF,mBAAO,CAACiF,OAAD,CAAP;AACH,WAFD,EAEI1G,KAAD,IAAU;AACT4G,kBAAM,CAAC5G,KAAD,CAAN;AACH,WAJD;AAKH,SANS,EAMP,CANO,CAAV;AAOH,OARgB,CAAjB;AASH;;AAED,UAAM2G,cAAN,EAlB2D,CAoB3D;;AACA,QAAI,CAACF,GAAL,EAAU;AAAEA,SAAG,GAAGvH,SAAS,CAAe,KAAKiD,WAApB,EAAiC,YAAjC,CAAT,EAAN;AAAkE;;AAE9E,QAAI,OAAOsE,GAAP,KAAgB,QAApB,EAA8B;AAC1BxH,oBAAc,CAAC,IAAD,EAAO,YAAP,EAAoB6H,MAAM,CAACC,MAAP,CAAc;AAC5CN,WAAG,EAAEA;AADuC,OAAd,CAApB,CAAd;AAGH,KAJD,MAIO;AACHxH,oBAAc,CAAC,IAAD,EAAO,YAAP,EAAqB6H,MAAM,CAACC,MAAP,CAAc3H,WAAW,CAACqH,GAAD,CAAzB,CAArB,CAAd;AACH;;AAED,SAAKO,OAAL,GAAe,EAAf;AACH;;AAvCS,MAANC,MAAM;AACN,QAAI,KAAKC,eAAL,IAAwB,IAA5B,EAAkC;AAC9B,WAAKA,eAAL,GAAuB,EAAvB;AACH;;AACD,WAAO,KAAKA,eAAZ;AACH;;AAoCgB,SAAVC,UAAU;AACb,WAAO,wBAAP;AACH;;AAEDN,eAAa;AACT,QAAI,CAAC,KAAKI,MAAL,CAAY,eAAZ,CAAL,EAAmC;AAC/B,WAAKA,MAAL,CAAY,eAAZ,IAA+B,KAAKG,sBAAL,EAA/B,CAD+B,CAG/B;;AACA1F,gBAAU,CAAC,MAAK;AACZ,aAAKuF,MAAL,CAAY,eAAZ,IAA+B,IAA/B;AACH,OAFS,EAEP,CAFO,CAAV;AAGH;;AACD,WAAO,KAAKA,MAAL,CAAY,eAAZ,CAAP;AACH;;AAEKG,wBAAsB;;AACxB,YAAM9F,KAAK,CAAC,CAAD,CAAX;AAEA,UAAIyE,OAAO,GAAG,IAAd;;AACA,UAAI;AACAA,eAAO,GAAG,MAAM,KAAK3C,IAAL,CAAU,aAAV,EAAyB,EAAzB,CAAhB;AACH,OAFD,CAEE,OAAOpD,KAAP,EAAc;AACZ,YAAI;AACA+F,iBAAO,GAAG,MAAM,KAAK3C,IAAL,CAAU,aAAV,EAAyB,EAAzB,CAAhB;AACH,SAFD,CAEE,OAAOpD,KAAP,EAAc,CAAG;AACtB;;AAED,UAAI+F,OAAO,IAAI,IAAf,EAAqB;AACjB,cAAMsB,UAAU,GAAGnI,SAAS,CAAmC,KAAKiD,WAAxC,EAAqD,YAArD,CAA5B;;AACA,YAAI;AACA,iBAAOkF,UAAU,CAAC3I,SAAS,CAACkF,IAAV,CAAemC,OAAf,EAAwBuB,QAAxB,EAAD,CAAjB;AACH,SAFD,CAEE,OAAOtH,KAAP,EAAc;AACZ,iBAAOL,MAAM,CAACc,UAAP,CAAkB,0BAAlB,EAA8ChB,MAAM,CAACU,MAAP,CAAcoH,aAA5D,EAA2E;AAC9ExB,mBAAO,EAAEA,OADqE;AAE9EyB,iBAAK,EAAE,gBAFuE;AAG9EC,uBAAW,EAAEzH;AAHiE,WAA3E,CAAP;AAKH;AACJ;;AAED,aAAOL,MAAM,CAACc,UAAP,CAAkB,0BAAlB,EAA8ChB,MAAM,CAACU,MAAP,CAAcoH,aAA5D,EAA2E;AAC9EC,aAAK,EAAE;AADuE,OAA3E,CAAP;AAGH;AAAA;;AAEDE,WAAS,CAACpF,cAAD,EAAiC;AACtC,WAAO,IAAIJ,aAAJ,CAAkBD,iBAAlB,EAAqC,IAArC,EAA2CK,cAA3C,CAAP;AACH;;AAEDqF,oBAAkB,CAACrF,cAAD,EAAiC;AAC/C,WAAO,KAAKoF,SAAL,CAAepF,cAAf,EAA+BS,gBAA/B,EAAP;AACH;;AAED6E,cAAY;AACR,WAAO,KAAKxE,IAAL,CAAU,cAAV,EAA0B,EAA1B,EAA8BC,IAA9B,CAAoCC,QAAD,IAA4B;AAClE,aAAOA,QAAQ,CAACuE,GAAT,CAAcC,CAAD,IAAO,KAAKpF,SAAL,CAAeC,OAAf,CAAuBmF,CAAvB,CAApB,CAAP;AACH,KAFM,CAAP;AAGH;;AAED1E,MAAI,CAACrD,MAAD,EAAiBE,MAAjB,EAAmC;AACnC,UAAM8H,OAAO,GAAG;AACZhI,YAAM,EAAEA,MADI;AAEZE,YAAM,EAAEA,MAFI;AAGZ+H,QAAE,EAAG,KAAKhB,OAAL,EAHO;AAIZiB,aAAO,EAAE;AAJG,KAAhB;AAOA,SAAKC,IAAL,CAAU,OAAV,EAAmB;AACfC,YAAM,EAAE,SADO;AAEfJ,aAAO,EAAE/I,QAAQ,CAAC+I,OAAD,CAFF;AAGf1F,cAAQ,EAAE;AAHK,KAAnB,EARmC,CAcnC;AACA;;AACA,UAAM+F,KAAK,GAAI,CAAE,aAAF,EAAiB,iBAAjB,EAAqChH,OAArC,CAA6CrB,MAA7C,KAAwD,CAAvE;;AACA,QAAIqI,KAAK,IAAI,KAAKnB,MAAL,CAAYlH,MAAZ,CAAb,EAAkC;AAC9B,aAAO,KAAKkH,MAAL,CAAYlH,MAAZ,CAAP;AACH;;AAED,UAAM+B,MAAM,GAAGvC,SAAS,CAAC,KAAK8I,UAAN,EAAkB7C,IAAI,CAACC,SAAL,CAAesC,OAAf,CAAlB,EAA2CpG,SAA3C,CAAT,CAA+D0B,IAA/D,CAAqEvB,MAAD,IAAW;AAC1F,WAAKoG,IAAL,CAAU,OAAV,EAAmB;AACfC,cAAM,EAAE,UADO;AAEfJ,eAAO,EAAEA,OAFM;AAGfO,gBAAQ,EAAExG,MAHK;AAIfO,gBAAQ,EAAE;AAJK,OAAnB;AAOA,aAAOP,MAAP;AAEH,KAVc,EAUX9B,KAAD,IAAU;AACT,WAAKkI,IAAL,CAAU,OAAV,EAAmB;AACfC,cAAM,EAAE,UADO;AAEfnI,aAAK,EAAEA,KAFQ;AAGf+H,eAAO,EAAEA,OAHM;AAIf1F,gBAAQ,EAAE;AAJK,OAAnB;AAOA,YAAMrC,KAAN;AACH,KAnBc,CAAf,CArBmC,CA0CnC;;AACA,QAAIoI,KAAJ,EAAW;AACP,WAAKnB,MAAL,CAAYlH,MAAZ,IAAsB+B,MAAtB;AACAJ,gBAAU,CAAC,MAAK;AACZ,aAAKuF,MAAL,CAAYlH,MAAZ,IAAsB,IAAtB;AACH,OAFS,EAEP,CAFO,CAAV;AAGH;;AAED,WAAO+B,MAAP;AACH;;AAEDyG,gBAAc,CAACxI,MAAD,EAAiBE,MAAjB,EAA4B;AACtC,YAAQF,MAAR;AACI,WAAK,gBAAL;AACI,eAAO,CAAE,iBAAF,EAAqB,EAArB,CAAP;;AAEJ,WAAK,aAAL;AACI,eAAO,CAAE,cAAF,EAAkB,EAAlB,CAAP;;AAEJ,WAAK,YAAL;AACI,eAAO,CAAE,gBAAF,EAAoB,CAAEgC,YAAY,CAAC9B,MAAM,CAAC0C,OAAR,CAAd,EAAgC1C,MAAM,CAACuI,QAAvC,CAApB,CAAP;;AAEJ,WAAK,qBAAL;AACI,eAAO,CAAE,yBAAF,EAA6B,CAAEzG,YAAY,CAAC9B,MAAM,CAAC0C,OAAR,CAAd,EAAgC1C,MAAM,CAACuI,QAAvC,CAA7B,CAAP;;AAEJ,WAAK,SAAL;AACI,eAAO,CAAE,aAAF,EAAiB,CAAEzG,YAAY,CAAC9B,MAAM,CAAC0C,OAAR,CAAd,EAAgC1C,MAAM,CAACuI,QAAvC,CAAjB,CAAP;;AAEJ,WAAK,cAAL;AACI,eAAO,CAAE,kBAAF,EAAsB,CAAEzG,YAAY,CAAC9B,MAAM,CAAC0C,OAAR,CAAd,EAAgC1C,MAAM,CAACwI,QAAvC,EAAiDxI,MAAM,CAACuI,QAAxD,CAAtB,CAAP;;AAEJ,WAAK,iBAAL;AACI,eAAO,CAAE,wBAAF,EAA4B,CAAEvI,MAAM,CAACc,iBAAT,CAA5B,CAAP;;AAEJ,WAAK,UAAL;AACI,YAAId,MAAM,CAACuI,QAAX,EAAqB;AACjB,iBAAO,CAAE,sBAAF,EAA0B,CAAEvI,MAAM,CAACuI,QAAT,EAAmB,CAAC,CAACvI,MAAM,CAACyI,mBAA5B,CAA1B,CAAP;AACH,SAFD,MAEO,IAAIzI,MAAM,CAAC0I,SAAX,EAAsB;AACzB,iBAAO,CAAE,oBAAF,EAAwB,CAAE1I,MAAM,CAAC0I,SAAT,EAAoB,CAAC,CAAC1I,MAAM,CAACyI,mBAA7B,CAAxB,CAAP;AACH;;AACD,eAAO,IAAP;;AAEJ,WAAK,gBAAL;AACI,eAAO,CAAE,0BAAF,EAA8B,CAAEzI,MAAM,CAAC8E,eAAT,CAA9B,CAAP;;AAEJ,WAAK,uBAAL;AACI,eAAO,CAAE,2BAAF,EAA+B,CAAE9E,MAAM,CAAC8E,eAAT,CAA/B,CAAP;;AAEJ,WAAK,MAAL;AAAa;AACT,gBAAMX,kBAAkB,GAAGlF,SAAS,CAAuF,KAAKiD,WAA5F,EAAyG,oBAAzG,CAApC;AACA,iBAAO,CAAE,UAAF,EAAc,CAAEiC,kBAAkB,CAACnE,MAAM,CAACa,WAAR,EAAqB;AAAE8C,gBAAI,EAAE;AAAR,WAArB,CAApB,EAA0D3D,MAAM,CAACuI,QAAjE,CAAd,CAAP;AACH;;AAED,WAAK,aAAL;AAAoB;AAChB,gBAAMpE,kBAAkB,GAAGlF,SAAS,CAAuF,KAAKiD,WAA5F,EAAyG,oBAAzG,CAApC;AACA,iBAAO,CAAE,iBAAF,EAAqB,CAAEiC,kBAAkB,CAACnE,MAAM,CAACa,WAAR,EAAqB;AAAE8C,gBAAI,EAAE;AAAR,WAArB,CAApB,CAArB,CAAP;AACH;;AAED,WAAK,SAAL;AACI,YAAI3D,MAAM,CAAC2I,MAAP,IAAiB3I,MAAM,CAAC2I,MAAP,CAAcjG,OAAd,IAAyB,IAA9C,EAAoD;AAChD1C,gBAAM,CAAC2I,MAAP,CAAcjG,OAAd,GAAwBZ,YAAY,CAAC9B,MAAM,CAAC2I,MAAP,CAAcjG,OAAf,CAApC;AACH;;AACD,eAAO,CAAE,aAAF,EAAiB,CAAE1C,MAAM,CAAC2I,MAAT,CAAjB,CAAP;;AAEJ;AACI;AArDR;;AAwDA,WAAO,IAAP;AACH;;AAEKC,SAAO,CAAC9I,MAAD,EAAiBE,MAAjB,EAA4B;;AACrC;AACA;AACA,UAAIF,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,aAApC,EAAmD;AAC/C,cAAMkE,EAAE,GAAGhE,MAAM,CAACa,WAAlB;;AACA,YAAImD,EAAE,IAAIA,EAAE,CAACmC,IAAH,IAAW,IAAjB,IAAyB1H,SAAS,CAACkF,IAAV,CAAeK,EAAE,CAACmC,IAAlB,EAAwB0C,MAAxB,EAA7B,EAA+D;AAC3D;AACA,cAAI7E,EAAE,CAACqC,YAAH,IAAmB,IAAnB,IAA2BrC,EAAE,CAACsC,oBAAH,IAA2B,IAA1D,EAAgE;AAC5D,kBAAMwC,OAAO,GAAG,MAAM,KAAKC,UAAL,EAAtB;;AACA,gBAAID,OAAO,CAACzC,YAAR,IAAwB,IAAxB,IAAgCyC,OAAO,CAACxC,oBAAR,IAAgC,IAApE,EAA0E;AACtE;AACAtG,oBAAM,GAAGb,WAAW,CAACa,MAAD,CAApB;AACAA,oBAAM,CAACa,WAAP,GAAqB1B,WAAW,CAAC6E,EAAD,CAAhC;AACA,qBAAOhE,MAAM,CAACa,WAAP,CAAmBsF,IAA1B;AACH;AACJ;AACJ;AACJ;;AAED,YAAM6C,IAAI,GAAG,KAAKV,cAAL,CAAoBxI,MAApB,EAA6BE,MAA7B,CAAb;;AAEA,UAAIgJ,IAAI,IAAI,IAAZ,EAAkB;AACdtJ,cAAM,CAACc,UAAP,CAAkBV,MAAM,GAAG,kBAA3B,EAA+CN,MAAM,CAACU,MAAP,CAAc+I,eAA7D,EAA8E;AAAEpG,mBAAS,EAAE/C;AAAb,SAA9E;AACH;;AACD,UAAI;AACA,eAAO,MAAM,KAAKqD,IAAL,CAAU6F,IAAI,CAAC,CAAD,CAAd,EAAmBA,IAAI,CAAC,CAAD,CAAvB,CAAb;AACH,OAFD,CAEE,OAAOjJ,KAAP,EAAc;AACZ,eAAOF,UAAU,CAACC,MAAD,EAASC,KAAT,EAAgBC,MAAhB,CAAjB;AACH;AACJ;AAAA;;AAEDkJ,aAAW,CAAC3B,KAAD,EAAa;AACpB,QAAIA,KAAK,CAAC4B,GAAN,KAAc,SAAlB,EAA6B;AAAE,WAAKC,aAAL;AAAuB;;AACtD,UAAMF,WAAN,CAAkB3B,KAAlB;AACH;;AAED6B,eAAa;AACT,QAAI,KAAKC,cAAL,IAAuB,IAA3B,EAAiC;AAAE;AAAS;;AAC5C,UAAMC,IAAI,GAAG,IAAb;AAEA,UAAMC,aAAa,GAAoB,KAAKpG,IAAL,CAAU,iCAAV,EAA6C,EAA7C,CAAvC;AACA,SAAKkG,cAAL,GAAsBE,aAAtB;AAEAA,iBAAa,CAACnG,IAAd,CAAmB,UAASoG,QAAT,EAAiB;AAChC,eAASjK,IAAT,GAAa;AACT+J,YAAI,CAACnG,IAAL,CAAU,sBAAV,EAAkC,CAAEqG,QAAF,CAAlC,EAAgDpG,IAAhD,CAAqD,UAASqG,MAAT,EAA8B;AAC/E,cAAIH,IAAI,CAACD,cAAL,IAAuBE,aAA3B,EAA0C;AAAE,mBAAO,IAAP;AAAc;;AAE1D,cAAIG,GAAG,GAAGnI,OAAO,CAACC,OAAR,EAAV;AACAiI,gBAAM,CAACE,OAAP,CAAe,UAASvF,IAAT,EAAa;AACxB;AACAkF,gBAAI,CAACM,QAAL,CAAc,OAAOxF,IAAI,CAACxD,WAAL,EAArB,IAA2C,SAA3C;AACA8I,eAAG,GAAGA,GAAG,CAACtG,IAAJ,CAAS;AACX,qBAAOkG,IAAI,CAAC5E,cAAL,CAAoBN,IAApB,EAA0BhB,IAA1B,CAA+B,UAASY,EAAT,EAAW;AAC7CsF,oBAAI,CAACrB,IAAL,CAAU,SAAV,EAAqBjE,EAArB;AACA,uBAAO,IAAP;AACH,eAHM,CAAP;AAIH,aALK,CAAN;AAMH,WATD;AAWA,iBAAO0F,GAAG,CAACtG,IAAJ,CAAS;AACZ,mBAAO/B,KAAK,CAAC,IAAD,CAAZ;AACH,WAFM,CAAP;AAGH,SAlBD,EAkBG+B,IAlBH,CAkBQ;AACJ,cAAIkG,IAAI,CAACD,cAAL,IAAuBE,aAA3B,EAA0C;AACtCD,gBAAI,CAACnG,IAAL,CAAU,qBAAV,EAAiC,CAAEqG,QAAF,CAAjC;AACA;AACH;;AACD/H,oBAAU,CAAC;AAAalC,gBAAI;AAAK,WAAvB,EAAyB,CAAzB,CAAV;AAEA,iBAAO,IAAP;AACH,SA1BD,EA0BGsK,KA1BH,CA0BU9J,KAAD,IAAiB,CAAI,CA1B9B;AA2BH;;AACDR,UAAI;AAEJ,aAAOiK,QAAP;AACH,KAjCD,EAiCGK,KAjCH,CAiCU9J,KAAD,IAAiB,CAAI,CAjC9B;AAkCH;;AAED+J,YAAU,CAACvC,KAAD,EAAa;AACnB,QAAIA,KAAK,CAAC4B,GAAN,KAAc,SAAd,IAA2B,KAAKY,aAAL,CAAmB,SAAnB,MAAkC,CAAjE,EAAoE;AAChE,WAAKV,cAAL,GAAsB,IAAtB;AACH;;AACD,UAAMS,UAAN,CAAiBvC,KAAjB;AACH,GApT4C,CAsT7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACyB,SAAlBpD,kBAAkB,CAACtD,WAAD,EAAkCmJ,UAAlC,EAAyE;AAC9F;AACA,UAAMC,OAAO,GAAG9K,WAAW,CAAC+G,sBAAD,CAA3B;;AACA,QAAI8D,UAAJ,EAAgB;AACZ,WAAK,MAAME,GAAX,IAAkBF,UAAlB,EAA8B;AAC1B,YAAIA,UAAU,CAACE,GAAD,CAAd,EAAqB;AAAED,iBAAO,CAACC,GAAD,CAAP,GAAe,IAAf;AAAsB;AAChD;AACJ;;AAEDpL,mBAAe,CAAC+B,WAAD,EAAcoJ,OAAd,CAAf;AAEA,UAAMpI,MAAM,GAA2C,EAAvD,CAX8F,CAa9F;;AACA,KAAC,SAAD,EAAY,UAAZ,EAAwB,UAAxB,EAAoC,MAApC,EAA4C,cAA5C,EAA4D,sBAA5D,EAAoF,OAApF,EAA6F,OAA7F,EAAsG8H,OAAtG,CAA8G,UAASO,GAAT,EAAY;AACtH,UAAUrJ,WAAY,CAACqJ,GAAD,CAAZ,IAAqB,IAA/B,EAAqC;AAAE;AAAS;;AAChD,YAAMnI,KAAK,GAAGpD,QAAQ,CAAOkC,WAAY,CAACqJ,GAAD,CAAnB,CAAtB;;AACA,UAAIA,GAAG,KAAK,UAAZ,EAAwB;AAAEA,WAAG,GAAG,KAAN;AAAc;;AACxCrI,YAAM,CAACqI,GAAD,CAAN,GAAcnI,KAAd;AACH,KALD;AAOA,KAAC,MAAD,EAAS,IAAT,EAAe,MAAf,EAAuB4H,OAAvB,CAA+B,UAASO,GAAT,EAAY;AACvC,UAAUrJ,WAAY,CAACqJ,GAAD,CAAZ,IAAqB,IAA/B,EAAqC;AAAE;AAAS;;AAChDrI,YAAM,CAACqI,GAAD,CAAN,GAAcxL,OAAO,CAAOmC,WAAY,CAACqJ,GAAD,CAAnB,CAArB;AACH,KAHD;;AAKA,QAAUrJ,WAAY,CAACuF,UAAvB,EAAmC;AAC/BvE,YAAM,CAAC,YAAD,CAAN,GAAuBxC,aAAa,CAAOwB,WAAY,CAACuF,UAApB,CAApC;AACH;;AAED,WAAOvE,MAAP;AACH;;AA9V4C","names":["Signer","BigNumber","hexlify","hexValue","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","checkError","method","error","params","code","errors","SERVER_ERROR","e","message","match","data","throwError","CALL_EXCEPTION","body","responseText","toLowerCase","transaction","signedTransaction","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","UNPREDICTABLE_GAS_LIMIT","timer","timeout","Promise","resolve","setTimeout","getResult","payload","Error","result","getLowerCase","value","_constructorGuard","JsonRpcSigner","constructor","constructorGuard","provider","addressOrIndex","checkNew","new","target","formatter","address","throwArgumentError","connect","operation","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","getAddress","send","then","accounts","length","sendUncheckedTransaction","fromAddress","gasLimit","estimate","from","estimateGas","to","__awaiter","resolveName","tx","sender","hexTx","hexlifyTransaction","hash","signTransaction","sendTransaction","blockNumber","_getInternalBlockNumber","pollingInterval","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","signMessage","_legacySignMessage","_signTypedData","domain","types","populated","resolveNames","name","JSON","stringify","getPayload","unlock","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","reject","detectNetwork","Object","freeze","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","getUncheckedSigner","listAccounts","map","a","request","id","jsonrpc","emit","action","cache","connection","response","prepareRequest","blockTag","position","includeTransactions","blockHash","filter","perform","isZero","feeData","getFeeData","args","NOT_IMPLEMENTED","_startEvent","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","_stopEvent","listenerCount","allowExtra","allowed","key"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction checkError(method: string, error: any, params: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n            return e.data;\n        }\n\n        logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n            error, data: \"0x\"\n        });\n    }\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        logger.checkNew(new.target, JsonRpcSigner);\n\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            address.toLowerCase(),\n            JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        logger.checkNew(new.target, JsonRpcProvider);\n\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), params.position, params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue((<any>transaction)[key]);\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}