{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"ethereum-blockies-base64\"] = factory();else root[\"ethereum-blockies-base64\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }\n    /************************************************************************/\n\n    /******/\n    ([\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      const pnglib = __webpack_require__(1);\n\n      const hsl2rgb = __webpack_require__(2); // The random number is a js implementation of the Xorshift PRNG\n\n\n      const randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n      function seedrand(seed) {\n        for (let i = 0; i < randseed.length; i++) {\n          randseed[i] = 0;\n        }\n\n        for (let i = 0; i < seed.length; i++) {\n          randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n        }\n      }\n\n      function rand() {\n        // based on Java's String.hashCode(), expanded to 4 32bit values\n        const t = randseed[0] ^ randseed[0] << 11;\n        randseed[0] = randseed[1];\n        randseed[1] = randseed[2];\n        randseed[2] = randseed[3];\n        randseed[3] = randseed[3] ^ randseed[3] >> 19 ^ t ^ t >> 8;\n        return (randseed[3] >>> 0) / (1 << 31 >>> 0);\n      }\n\n      function createColor() {\n        //saturation is the whole color spectrum\n        const h = Math.floor(rand() * 360); //saturation goes from 40 to 100, it avoids greyish colors\n\n        const s = rand() * 60 + 40; //lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\n        const l = (rand() + rand() + rand() + rand()) * 25;\n        return [h / 360, s / 100, l / 100];\n      }\n\n      function createImageData(size) {\n        const width = size; // Only support square icons for now\n\n        const height = size;\n        const dataWidth = Math.ceil(width / 2);\n        const mirrorWidth = width - dataWidth;\n        const data = [];\n\n        for (let y = 0; y < height; y++) {\n          let row = [];\n\n          for (let x = 0; x < dataWidth; x++) {\n            // this makes foreground and background color to have a 43% (1/2.3) probability\n            // spot color has 13% chance\n            row[x] = Math.floor(rand() * 2.3);\n          }\n\n          const r = row.slice(0, mirrorWidth).reverse();\n          row = row.concat(r);\n\n          for (let i = 0; i < row.length; i++) {\n            data.push(row[i]);\n          }\n        }\n\n        return data;\n      } // Modifies the passed PNG to fill in a specified rectangle\n\n\n      function fillRect(png, x, y, w, h, color) {\n        for (let i = 0; i < w; i++) {\n          for (let j = 0; j < h; j++) {\n            png.buffer[png.index(x + i, y + j)] = color;\n          }\n        }\n      }\n\n      function buildOpts(opts) {\n        if (!opts.seed) {\n          throw new Error('No seed provided');\n        }\n\n        seedrand(opts.seed);\n        return Object.assign({\n          size: 8,\n          scale: 16,\n          color: createColor(),\n          bgcolor: createColor(),\n          spotcolor: createColor()\n        }, opts);\n      }\n\n      function makeBlockie(address) {\n        const opts = buildOpts({\n          seed: address.toLowerCase()\n        });\n        const imageData = createImageData(opts.size);\n        const width = Math.sqrt(imageData.length);\n        const p = new pnglib(opts.size * opts.scale, opts.size * opts.scale, 3);\n        const bgcolor = p.color(...hsl2rgb(...opts.bgcolor));\n        const color = p.color(...hsl2rgb(...opts.color));\n        const spotcolor = p.color(...hsl2rgb(...opts.spotcolor));\n\n        for (let i = 0; i < imageData.length; i++) {\n          const row = Math.floor(i / width);\n          const col = i % width; // if data is 0, leave the background\n\n          if (imageData[i]) {\n            // if data is 2, choose spot color, if 1 choose foreground\n            const pngColor = imageData[i] == 1 ? color : spotcolor;\n            fillRect(p, col * opts.scale, row * opts.scale, opts.scale, opts.scale, pngColor);\n          }\n        }\n\n        return `data:image/png;base64,${p.getBase64()}`;\n      }\n\n      module.exports = makeBlockie;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports) {\n      /**\n       * A handy class to calculate color values.\n       *\n       * @version 1.0\n       * @author Robert Eisele <robert@xarg.org>\n       * @copyright Copyright (c) 2010, Robert Eisele\n       * @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n       * @license http://www.opensource.org/licenses/bsd-license.php BSD License\n       *\n       */\n      // Modified by George Chan <gchan@21cn.com>\n      // Further modified by Will O'B <@wbobeirne> to make it\n      // UglifyJS and \"use strict\"; friendly\n      module.exports = function (width, height, depth) {\n        // helper functions for that ctx\n        function write(buffer, offs) {\n          for (var i = 2; i < arguments.length; i++) {\n            for (var j = 0; j < arguments[i].length; j++) {\n              buffer[offs++] = arguments[i].charAt(j);\n            }\n          }\n        }\n\n        function byte2(w) {\n          return String.fromCharCode(w >> 8 & 255, w & 255);\n        }\n\n        function byte4(w) {\n          return String.fromCharCode(w >> 24 & 255, w >> 16 & 255, w >> 8 & 255, w & 255);\n        }\n\n        function byte2lsb(w) {\n          return String.fromCharCode(w & 255, w >> 8 & 255);\n        }\n\n        this.width = width;\n        this.height = height;\n        this.depth = depth; // pixel data and row filter identifier size\n\n        this.pix_size = height * (width + 1); // deflate header, pix_size, block headers, adler32 checksum\n\n        this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4; // offsets and sizes of Png chunks\n\n        this.ihdr_offs = 0; // IHDR offset and size\n\n        this.ihdr_size = 4 + 4 + 13 + 4;\n        this.plte_offs = this.ihdr_offs + this.ihdr_size; // PLTE offset and size\n\n        this.plte_size = 4 + 4 + 3 * depth + 4;\n        this.trns_offs = this.plte_offs + this.plte_size; // tRNS offset and size\n\n        this.trns_size = 4 + 4 + depth + 4;\n        this.idat_offs = this.trns_offs + this.trns_size; // IDAT offset and size\n\n        this.idat_size = 4 + 4 + this.data_size + 4;\n        this.iend_offs = this.idat_offs + this.idat_size; // IEND offset and size\n\n        this.iend_size = 4 + 4 + 4;\n        this.buffer_size = this.iend_offs + this.iend_size; // total PNG size\n\n        this.buffer = new Array();\n        this.palette = new Object();\n        this.pindex = 0;\n\n        var _crc32 = new Array(); // initialize buffer with zero bytes\n\n\n        for (var i = 0; i < this.buffer_size; i++) {\n          this.buffer[i] = \"\\x00\";\n        } // initialize non-zero elements\n\n\n        write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n        write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n        write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n        write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n        write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND'); // initialize deflate header\n\n        var header = 8 + (7 << 4) << 8 | 3 << 6;\n        header += 31 - header % 31;\n        write(this.buffer, this.idat_offs + 8, byte2(header)); // initialize deflate block headers\n\n        for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n          var size, bits;\n\n          if (i + 0xffff < this.pix_size) {\n            size = 0xffff;\n            bits = \"\\x00\";\n          } else {\n            size = this.pix_size - (i << 16) - i;\n            bits = \"\\x01\";\n          }\n\n          write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n        }\n        /* Create crc32 lookup table */\n\n\n        for (var i = 0; i < 256; i++) {\n          var c = i;\n\n          for (var j = 0; j < 8; j++) {\n            if (c & 1) {\n              c = -306674912 ^ c >> 1 & 0x7fffffff;\n            } else {\n              c = c >> 1 & 0x7fffffff;\n            }\n          }\n\n          _crc32[i] = c;\n        } // compute the index into a png for a given pixel\n\n\n        this.index = function (x, y) {\n          var i = y * (this.width + 1) + x + 1;\n          var j = this.idat_offs + 8 + 2 + 5 * Math.floor(i / 0xffff + 1) + i;\n          return j;\n        }; // convert a color and build up the palette\n\n\n        this.color = function (red, green, blue, alpha) {\n          alpha = alpha >= 0 ? alpha : 255;\n          var color = ((alpha << 8 | red) << 8 | green) << 8 | blue;\n\n          if (typeof this.palette[color] == \"undefined\") {\n            if (this.pindex == this.depth) return \"\\x00\";\n            var ndx = this.plte_offs + 8 + 3 * this.pindex;\n            this.buffer[ndx + 0] = String.fromCharCode(red);\n            this.buffer[ndx + 1] = String.fromCharCode(green);\n            this.buffer[ndx + 2] = String.fromCharCode(blue);\n            this.buffer[this.trns_offs + 8 + this.pindex] = String.fromCharCode(alpha);\n            this.palette[color] = String.fromCharCode(this.pindex++);\n          }\n\n          return this.palette[color];\n        }; // output a PNG string, Base64 encoded\n\n\n        this.getBase64 = function () {\n          var s = this.getDump();\n          var ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n          var c1, c2, c3, e1, e2, e3, e4;\n          var l = s.length;\n          var i = 0;\n          var r = \"\";\n\n          do {\n            c1 = s.charCodeAt(i);\n            e1 = c1 >> 2;\n            c2 = s.charCodeAt(i + 1);\n            e2 = (c1 & 3) << 4 | c2 >> 4;\n            c3 = s.charCodeAt(i + 2);\n\n            if (l < i + 2) {\n              e3 = 64;\n            } else {\n              e3 = (c2 & 0xf) << 2 | c3 >> 6;\n            }\n\n            if (l < i + 3) {\n              e4 = 64;\n            } else {\n              e4 = c3 & 0x3f;\n            }\n\n            r += ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n          } while ((i += 3) < l);\n\n          return r;\n        }; // output a PNG string\n\n\n        this.getDump = function () {\n          // compute adler32 of output pixels + row filter bytes\n          var BASE = 65521;\n          /* largest prime smaller than 65536 */\n\n          var NMAX = 5552;\n          /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n\n          var s1 = 1;\n          var s2 = 0;\n          var n = NMAX;\n\n          for (var y = 0; y < this.height; y++) {\n            for (var x = -1; x < this.width; x++) {\n              s1 += this.buffer[this.index(x, y)].charCodeAt(0);\n              s2 += s1;\n\n              if ((n -= 1) == 0) {\n                s1 %= BASE;\n                s2 %= BASE;\n                n = NMAX;\n              }\n            }\n          }\n\n          s1 %= BASE;\n          s2 %= BASE;\n          write(this.buffer, this.idat_offs + this.idat_size - 8, byte4(s2 << 16 | s1)); // compute crc32 of the PNG chunks\n\n          function crc32(png, offs, size) {\n            var crc = -1;\n\n            for (var i = 4; i < size - 4; i += 1) {\n              crc = _crc32[(crc ^ png[offs + i].charCodeAt(0)) & 0xff] ^ crc >> 8 & 0x00ffffff;\n            }\n\n            write(png, offs + size - 4, byte4(crc ^ -1));\n          }\n\n          crc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n          crc32(this.buffer, this.plte_offs, this.plte_size);\n          crc32(this.buffer, this.trns_offs, this.trns_size);\n          crc32(this.buffer, this.idat_offs, this.idat_size);\n          crc32(this.buffer, this.iend_offs, this.iend_size); // convert PNG to string\n\n          return \"\\x89PNG\\r\\n\\x1a\\n\" + this.buffer.join('');\n        };\n      };\n      /***/\n\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      // https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n\n      /**\n       * Converts an HSL color value to RGB. Conversion formula\n       * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n       * Assumes h, s, and l are contained in the set [0, 1] and\n       * returns r, g, and b in the set [0, 255].\n       *\n       * @param   {number}  h       The hue\n       * @param   {number}  s       The saturation\n       * @param   {number}  l       The lightness\n       * @return  {Array}           The RGB representation\n       */\n      function hue2rgb(p, q, t) {\n        if (t < 0) t += 1;\n        if (t > 1) t -= 1;\n        if (t < 1 / 6) return p + (q - p) * 6 * t;\n        if (t < 1 / 2) return q;\n        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n        return p;\n      }\n\n      function hsl2rgb(h, s, l) {\n        let r, g, b;\n\n        if (s == 0) {\n          r = g = b = l; // achromatic\n        } else {\n          const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n          const p = 2 * l - q;\n          r = hue2rgb(p, q, h + 1 / 3);\n          g = hue2rgb(p, q, h);\n          b = hue2rgb(p, q, h - 1 / 3);\n        }\n\n        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), 255];\n      }\n\n      module.exports = hsl2rgb;\n      /***/\n    }\n    /******/\n    ])\n  );\n});\n\n;","map":{"version":3,"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/ethereum-blockies-base64/dist/main.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","pnglib","hsl2rgb","randseed","Array","seedrand","seed","i","length","charCodeAt","rand","t","createColor","h","Math","floor","s","l","createImageData","size","width","height","dataWidth","ceil","mirrorWidth","data","y","row","x","r","slice","reverse","concat","push","fillRect","png","w","color","j","buffer","index","buildOpts","opts","Error","Object","assign","scale","bgcolor","spotcolor","makeBlockie","address","toLowerCase","imageData","sqrt","col","pngColor","getBase64","depth","write","offs","arguments","charAt","byte2","String","fromCharCode","byte4","byte2lsb","pix_size","data_size","ihdr_offs","ihdr_size","plte_offs","plte_size","trns_offs","trns_size","idat_offs","idat_size","iend_offs","iend_size","buffer_size","palette","pindex","_crc32","header","bits","red","green","blue","alpha","ndx","getDump","ch","c1","c2","c3","e1","e2","e3","e4","BASE","NMAX","s1","s2","n","crc32","crc","join","hue2rgb","q","g","b","round"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ethereum-blockies-base64\"] = factory();\n\telse\n\t\troot[\"ethereum-blockies-base64\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tconst pnglib = __webpack_require__(1);\n\tconst hsl2rgb = __webpack_require__(2);\n\n\t// The random number is a js implementation of the Xorshift PRNG\n\tconst randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n\tfunction seedrand(seed) {\n\t  for (let i = 0; i < randseed.length; i++) {\n\t    randseed[i] = 0;\n\t  }\n\t  for (let i = 0; i < seed.length; i++) {\n\t    randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n\t  }\n\t}\n\n\tfunction rand() {\n\t  // based on Java's String.hashCode(), expanded to 4 32bit values\n\t  const t = randseed[0] ^ (randseed[0] << 11);\n\n\t  randseed[0] = randseed[1];\n\t  randseed[1] = randseed[2];\n\t  randseed[2] = randseed[3];\n\t  randseed[3] = randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8);\n\n\t  return (randseed[3] >>> 0) / (1 << 31 >>> 0);\n\t}\n\n\tfunction createColor() {\n\t  //saturation is the whole color spectrum\n\t  const h = Math.floor(rand() * 360);\n\t  //saturation goes from 40 to 100, it avoids greyish colors\n\t  const s = rand() * 60 + 40;\n\t  //lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\t  const l = (rand() + rand() + rand() + rand()) * 25 ;\n\n\t  return [h / 360, s / 100, l / 100];\n\t}\n\n\tfunction createImageData(size) {\n\t  const width = size; // Only support square icons for now\n\t  const height = size;\n\n\t  const dataWidth = Math.ceil(width / 2);\n\t  const mirrorWidth = width - dataWidth;\n\n\t  const data = [];\n\t  for (let y = 0; y < height; y++) {\n\t    let row = [];\n\t    for (let x = 0; x < dataWidth; x++) {\n\t      // this makes foreground and background color to have a 43% (1/2.3) probability\n\t      // spot color has 13% chance\n\t      row[x] = Math.floor(rand() * 2.3);\n\t    }\n\t    const r = row.slice(0, mirrorWidth).reverse();\n\t    row = row.concat(r);\n\n\t    for (let i = 0; i < row.length; i++) {\n\t      data.push(row[i]);\n\t    }\n\t  }\n\n\t  return data;\n\t}\n\n\t// Modifies the passed PNG to fill in a specified rectangle\n\tfunction fillRect(png, x, y, w, h, color) {\n\t  for(let i = 0; i < w; i++) {\n\t    for (let j = 0; j < h; j++) {\n\t      png.buffer[png.index(x + i, y + j)] = color;\n\t    }\n\t  }\n\t}\n\n\tfunction buildOpts(opts) {\n\t  if (!opts.seed) {\n\t    throw new Error('No seed provided');\n\t  }\n\n\t  seedrand(opts.seed);\n\n\t  return Object.assign({\n\t    size: 8,\n\t    scale: 16,\n\t    color: createColor(),\n\t    bgcolor: createColor(),\n\t    spotcolor: createColor(),\n\t  }, opts)\n\t}\n\n\tfunction makeBlockie(address) {\n\t  const opts = buildOpts({ seed: address.toLowerCase() });\n\n\t  const imageData = createImageData(opts.size);\n\t  const width = Math.sqrt(imageData.length);\n\n\t  const p = new pnglib(opts.size * opts.scale, opts.size * opts.scale, 3);\n\t  const bgcolor = p.color(...hsl2rgb(...opts.bgcolor));\n\t  const color = p.color(...hsl2rgb(...opts.color));\n\t  const spotcolor = p.color(...hsl2rgb(...opts.spotcolor));\n\n\t  for (let i = 0; i < imageData.length; i++) {\n\t    const row = Math.floor(i / width);\n\t    const col = i % width;\n\t    // if data is 0, leave the background\n\t    if (imageData[i]) {\n\t      // if data is 2, choose spot color, if 1 choose foreground\n\t      const pngColor = imageData[i] == 1 ? color : spotcolor;\n\t      fillRect(p, col * opts.scale, row * opts.scale, opts.scale, opts.scale, pngColor);\n\t    }\n\t  }\n\t  return `data:image/png;base64,${p.getBase64()}`;\n\t}\n\n\tmodule.exports = makeBlockie;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/**\n\t * A handy class to calculate color values.\n\t *\n\t * @version 1.0\n\t * @author Robert Eisele <robert@xarg.org>\n\t * @copyright Copyright (c) 2010, Robert Eisele\n\t * @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n\t * @license http://www.opensource.org/licenses/bsd-license.php BSD License\n\t *\n\t */\n\n\t// Modified by George Chan <gchan@21cn.com>\n\n\t// Further modified by Will O'B <@wbobeirne> to make it\n\t// UglifyJS and \"use strict\"; friendly\n\n\tmodule.exports = function(width,height,depth) {\n\n\n\t    // helper functions for that ctx\n\t    function write(buffer, offs) {\n\t        for (var i = 2; i < arguments.length; i++) {\n\t            for (var j = 0; j < arguments[i].length; j++) {\n\t                buffer[offs++] = arguments[i].charAt(j);\n\t            }\n\t        }\n\t    }\n\n\t    function byte2(w) {\n\t        return String.fromCharCode((w >> 8) & 255, w & 255);\n\t    }\n\n\t    function byte4(w) {\n\t        return String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);\n\t    }\n\n\t    function byte2lsb(w) {\n\t        return String.fromCharCode(w & 255, (w >> 8) & 255);\n\t    }\n\n\t    this.width   = width;\n\t    this.height  = height;\n\t    this.depth   = depth;\n\n\t    // pixel data and row filter identifier size\n\t    this.pix_size = height * (width + 1);\n\n\t    // deflate header, pix_size, block headers, adler32 checksum\n\t    this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\n\n\t    // offsets and sizes of Png chunks\n\t    this.ihdr_offs = 0; // IHDR offset and size\n\t    this.ihdr_size = 4 + 4 + 13 + 4;\n\t    this.plte_offs = this.ihdr_offs + this.ihdr_size; // PLTE offset and size\n\t    this.plte_size = 4 + 4 + 3 * depth + 4;\n\t    this.trns_offs = this.plte_offs + this.plte_size; // tRNS offset and size\n\t    this.trns_size = 4 + 4 + depth + 4;\n\t    this.idat_offs = this.trns_offs + this.trns_size; // IDAT offset and size\n\t    this.idat_size = 4 + 4 + this.data_size + 4;\n\t    this.iend_offs = this.idat_offs + this.idat_size; // IEND offset and size\n\t    this.iend_size = 4 + 4 + 4;\n\t    this.buffer_size  = this.iend_offs + this.iend_size; // total PNG size\n\n\t    this.buffer  = new Array();\n\t    this.palette = new Object();\n\t    this.pindex  = 0;\n\n\t    var _crc32 = new Array();\n\n\t    // initialize buffer with zero bytes\n\t    for (var i = 0; i < this.buffer_size; i++) {\n\t        this.buffer[i] = \"\\x00\";\n\t    }\n\n\t    // initialize non-zero elements\n\t    write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n\t    write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n\t    write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n\t    write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n\t    write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\n\n\t    // initialize deflate header\n\t    var header = ((8 + (7 << 4)) << 8) | (3 << 6);\n\t    header+= 31 - (header % 31);\n\n\t    write(this.buffer, this.idat_offs + 8, byte2(header));\n\n\t    // initialize deflate block headers\n\t    for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n\t        var size, bits;\n\t        if (i + 0xffff < this.pix_size) {\n\t            size = 0xffff;\n\t            bits = \"\\x00\";\n\t        } else {\n\t            size = this.pix_size - (i << 16) - i;\n\t            bits = \"\\x01\";\n\t        }\n\t        write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n\t    }\n\n\t    /* Create crc32 lookup table */\n\t    for (var i = 0; i < 256; i++) {\n\t        var c = i;\n\t        for (var j = 0; j < 8; j++) {\n\t            if (c & 1) {\n\t                c = -306674912 ^ ((c >> 1) & 0x7fffffff);\n\t            } else {\n\t                c = (c >> 1) & 0x7fffffff;\n\t            }\n\t        }\n\t        _crc32[i] = c;\n\t    }\n\n\t    // compute the index into a png for a given pixel\n\t    this.index = function(x,y) {\n\t        var i = y * (this.width + 1) + x + 1;\n\t        var j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;\n\t        return j;\n\t    }\n\n\t    // convert a color and build up the palette\n\t    this.color = function(red, green, blue, alpha) {\n\n\t        alpha = alpha >= 0 ? alpha : 255;\n\t        var color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;\n\n\t        if (typeof this.palette[color] == \"undefined\") {\n\t            if (this.pindex == this.depth) return \"\\x00\";\n\n\t            var ndx = this.plte_offs + 8 + 3 * this.pindex;\n\n\t            this.buffer[ndx + 0] = String.fromCharCode(red);\n\t            this.buffer[ndx + 1] = String.fromCharCode(green);\n\t            this.buffer[ndx + 2] = String.fromCharCode(blue);\n\t            this.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);\n\n\t            this.palette[color] = String.fromCharCode(this.pindex++);\n\t        }\n\t        return this.palette[color];\n\t    }\n\n\t    // output a PNG string, Base64 encoded\n\t    this.getBase64 = function() {\n\n\t        var s = this.getDump();\n\n\t        var ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t        var c1, c2, c3, e1, e2, e3, e4;\n\t        var l = s.length;\n\t        var i = 0;\n\t        var r = \"\";\n\n\t        do {\n\t            c1 = s.charCodeAt(i);\n\t            e1 = c1 >> 2;\n\t            c2 = s.charCodeAt(i+1);\n\t            e2 = ((c1 & 3) << 4) | (c2 >> 4);\n\t            c3 = s.charCodeAt(i+2);\n\t            if (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }\n\t            if (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }\n\t            r+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n\t        } while ((i+= 3) < l);\n\t        return r;\n\t    }\n\n\t    // output a PNG string\n\t    this.getDump = function() {\n\t        // compute adler32 of output pixels + row filter bytes\n\t        var BASE = 65521; /* largest prime smaller than 65536 */\n\t        var NMAX = 5552; /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n\t        var s1 = 1;\n\t        var s2 = 0;\n\t        var n = NMAX;\n\n\t        for (var y = 0; y < this.height; y++) {\n\t            for (var x = -1; x < this.width; x++) {\n\t                s1+= this.buffer[this.index(x, y)].charCodeAt(0);\n\t                s2+= s1;\n\t                if ((n-= 1) == 0) {\n\t                    s1%= BASE;\n\t                    s2%= BASE;\n\t                    n = NMAX;\n\t                }\n\t            }\n\t        }\n\t        s1%= BASE;\n\t        s2%= BASE;\n\t        write(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));\n\n\t        // compute crc32 of the PNG chunks\n\t        function crc32(png, offs, size) {\n\t            var crc = -1;\n\t            for (var i = 4; i < size-4; i += 1) {\n\t                crc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);\n\t            }\n\t            write(png, offs+size-4, byte4(crc ^ -1));\n\t        }\n\n\t        crc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n\t        crc32(this.buffer, this.plte_offs, this.plte_size);\n\t        crc32(this.buffer, this.trns_offs, this.trns_size);\n\t        crc32(this.buffer, this.idat_offs, this.idat_size);\n\t        crc32(this.buffer, this.iend_offs, this.iend_size);\n\n\t        // convert PNG to string\n\t        return \"\\x89PNG\\r\\n\\x1a\\n\" + this.buffer.join('');\n\t    }\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t// https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n\t/**\n\t * Converts an HSL color value to RGB. Conversion formula\n\t * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n\t * Assumes h, s, and l are contained in the set [0, 1] and\n\t * returns r, g, and b in the set [0, 255].\n\t *\n\t * @param   {number}  h       The hue\n\t * @param   {number}  s       The saturation\n\t * @param   {number}  l       The lightness\n\t * @return  {Array}           The RGB representation\n\t */\n\n\t function hue2rgb(p, q, t) {\n\t   if(t < 0) t += 1;\n\t   if(t > 1) t -= 1;\n\t   if(t < 1/6) return p + (q - p) * 6 * t;\n\t   if(t < 1/2) return q;\n\t   if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\t   return p;\n\t }\n\n\tfunction hsl2rgb(h, s, l){\n\t  let r, g, b;\n\n\t  if (s == 0) {\n\t    r = g = b = l; // achromatic\n\t  } else {\n\t    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t    const p = 2 * l - q;\n\t    r = hue2rgb(p, q, h + 1/3);\n\t    g = hue2rgb(p, q, h);\n\t    b = hue2rgb(p, q, h - 1/3);\n\t  }\n\n\t  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), 255];\n\t}\n\n\tmodule.exports = hsl2rgb;\n\n\n/***/ }\n/******/ ])\n});\n;"]},"metadata":{},"sourceType":"script"}