{"ast":null,"code":"var _jsxFileName = \"/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/src/components/Board/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { createUseStyles, jss } from 'react-jss';\nimport { EMPTY_SHIP } from './types';\nimport { DISPLAY_IMAGES } from './images';\nimport { SHIP_STYLES } from './styles';\nimport hitIcon from './images/hit.svg';\nimport missIcon from './images/miss.svg';\nimport { GameStatus } from 'utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  label: {\n    alignItems: 'center',\n    color: '#9CA3B6',\n    cursor: 'pointer',\n    display: 'flex',\n    fontSize: '24px',\n    fontWeight: 700,\n    justifyContent: 'center',\n    lineHeight: '34.68px',\n    width: '46px'\n  },\n  leave: {\n    backgroundColor: '#FF0055',\n    borderRadius: '3px',\n    color: '#FFFFFF',\n    cursor: 'pointer',\n    fontSize: '24px',\n    fontWeight: 700,\n    letterSpacing: '3.6px',\n    margin: '46px auto 0 auto',\n    padding: '5px 15px',\n    width: 'fit-content'\n  },\n  rotateText: {\n    fontSize: '24px',\n    fontWeight: 400,\n    letterSpacing: '3.6px',\n    margin: '55px auto 0 auto',\n    width: 'fit-content'\n  },\n  row: {\n    alignItems: 'center',\n    display: 'flex',\n    gap: '7px',\n    marginTop: '7px'\n  },\n  ship: {\n    left: 0,\n    pointerEvents: 'none',\n    position: 'absolute',\n    transformOrigin: 'top left',\n    transition: '.2s transform',\n    zIndex: 1,\n    '& > circle': {\n      fill: '#FFFFFF'\n    }\n  },\n  tile: {\n    alignItems: 'center',\n    background: '#DFF4FF',\n    borderRadius: '3px',\n    cursor: 'crosshair',\n    display: 'flex',\n    justifyContent: 'center',\n    height: '46px',\n    position: 'relative',\n    width: '46px'\n  },\n  wrapper: {\n    marginTop: '24px'\n  }\n}); // Board is simply a 10x10 array\n\nconst BOARD = new Array(10).fill('').map(_c = _ => new Array(10).fill(''));\n_c2 = BOARD;\nexport default function Board(_ref) {\n  _s();\n\n  let {\n    allPlaced,\n    onLeave,\n    opponentShots,\n    placedShips,\n    rotationAxis,\n    selectedShip,\n    setPlacedShip,\n    status\n  } = _ref;\n  const styles = useStyles(); // Sections above which a seleted ship is being rendered before placement\n\n  const [highlightedSections, setHighlightedSections] = useState([]); // State variable describing whether placement would be valid or not\n\n  const [invalidPlacement, setInvalidPlacement] = useState(false);\n  /**\n   *Determine path of ship depending on rotational axis.\n   *\n   * @param {number} index - coordinate of starting section of ship.\n   * @param {number} row - cow number on the board.\n   *\n   * @returns Array of spaces to be occupied after ship placement.\n   */\n\n  const calculateSections = (index, row) => {\n    const sections = [];\n\n    for (let i = 0; i < selectedShip.length; i++) {\n      const pos = rotationAxis === 'y' ? index + i * 10 : index + i;\n      sections.push(pos);\n      checkValidPlacement(pos, row, sections);\n    }\n\n    return sections;\n  };\n  /**\n   * Helper function to generate a ship image sized correctly to the board size generated\n   *\n   * @param {number} len - length of the ship\n   * @returns width of the ship in pixels\n   */\n\n\n  const calculateShipWidth = len => {\n    return `${len * 46}px`;\n  };\n  /**\n   * Check whether ship is in bounds or whether there is an overlap with a placed ship\n   *\n   * @param {number} pos - index of tile being hovered over\n   * @param {number} row - index of the row being hovered over\n   * @param {number[]} sections - sections of the board selected ship will occupy\n   */\n\n\n  const checkValidPlacement = (pos, row, sections) => {\n    const occupied = sections.find(section => occupiedSpace(section).length); // If space is occupied then automatically invalid\n\n    if (occupied) {\n      setInvalidPlacement(true);\n    } else {\n      // If orientation is vertical then values below 0 and above 100 are all that need to be checked\n      if (rotationAxis === 'y') {\n        setInvalidPlacement(pos < 0 || pos > 100); // If orientation is horizontal need to check if ship is out of row boundary\n      } else {\n        const rowStart = row * 10;\n        const rowEnd = row * 10 + 9;\n        const outOfBoundsElement = sections.find(element => element < rowStart || element > rowEnd);\n        setInvalidPlacement(!!outOfBoundsElement);\n      }\n    }\n  };\n  /**\n   * Colors inner svg circles of ship if a shot has been taken at that specific coordinate\n   *\n   * @param {Ship} ship - ship being redenered in JSX return\n   * @returns corresponding svg circle styles to be rendered with ship\n   */\n\n\n  const circleStyles = ship => {\n    const hits = ship.sections.map((section, index) => [section, opponentShots.find(shot => shot.x + shot.y * 10 === section), index + 1]);\n    const defaultClass = {\n      '& > circle': {\n        fill: '#FFFFFF'\n      }\n    };\n    const pseudoClasses = hits.filter(hit => hit[1]).map(hit => ({\n      [`& > circle:nth-of-type(${hit[2]})`]: {\n        fill: '#FF0055'\n      }\n    }));\n    const obj = [defaultClass].concat(pseudoClasses).reduce((obj, item) => ({ ...obj,\n      [Object.keys(item)[0]]: Object.values(item)[0]\n    }), {});\n    const sheet = jss.createStyleSheet({\n      circle: obj\n    }, {\n      link: true\n    }).attach();\n    return sheet.classes.circle;\n  };\n  /**\n   *\n   * Function to determine where to render ship on board during placement phase\n   *\n   * @param {number} index - index of the board being hovered over\n   * @param {number} row - index of the row being hovered over\n   */\n\n\n  const handleHover = (index, row) => {\n    console.log('Index: ', index);\n    const sections = calculateSections(index, row);\n\n    if (rotationAxis === 'y') {\n      setHighlightedSections(sections.filter(section => section < 100));\n    } else {\n      const rowStart = row * 10;\n      const rowEnd = rowStart + 9;\n      setHighlightedSections(sections.filter(section => !(section > rowEnd) && !(section < rowStart)));\n    }\n  };\n  /**\n   * Calculate sections ship will occupt upon placement and then place\n   *\n   * @param {number} index - index of the tile\n   * @param {number} row - index of the row\n   */\n\n\n  const handleShipPlacement = (index, row) => {\n    const sections = calculateSections(index, row);\n    setPlacedShip({ ...selectedShip,\n      orientation: rotationAxis,\n      sections\n    });\n    setHighlightedSections([]);\n  };\n  /**\n   * Memoized value to determine how many invalid sections of the ship to render based on\n   * position of the board\n   */\n\n\n  const invalidSections = useMemo(() => {\n    return selectedShip.length - highlightedSections.length;\n  }, [highlightedSections, selectedShip]);\n  /**\n   *  Determines whether a specified coordinate contains a placed ship\n   *\n   * @param {number} pos - coordinate on the board\n   * @returns {Ship} - ship that currently occupies the supplied space\n   */\n\n  const occupiedSpace = pos => {\n    let placedShip = EMPTY_SHIP;\n    placedShips.forEach(ship => {\n      ship.sections.forEach(section => {\n        if (section === pos) {\n          placedShip = ship;\n          return;\n        }\n\n        if (placedShip.name) return;\n      });\n    });\n    return placedShip;\n  };\n  /**\n   * Memoized value to determine what coordinates contain the heads of a ship so that the image may\n   * be rendered from the head\n   */\n\n\n  const shipHeads = useMemo(() => {\n    const heads = [];\n    placedShips.forEach(ship => {\n      // Head is simply index 0 of where the ship exists on the board\n      heads.push(ship.sections[0]);\n    });\n    return heads;\n  }, [placedShips]);\n  /**\n   * useEffect will run each time the rotation axis of the ship is changed\n   */\n\n  useEffect(() => {\n    if (highlightedSections[0] !== undefined) {\n      const row = Math.floor(highlightedSections[0] / 10);\n      handleHover(highlightedSections[0], row);\n    } // eslint-disable-next-line\n\n  }, [rotationAxis]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.wrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.row,\n        style: {\n          marginLeft: '46px'\n        },\n        children: new Array(10).fill('').map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.label,\n          children: String.fromCharCode(65 + index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), BOARD.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.row,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.label,\n            children: rowIndex + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this), row.map((_, colIndex) => {\n            const index = rowIndex * 10 + colIndex; // Check if index includes start of ship\n\n            const containsHead = shipHeads.includes(index);\n            const occupied = occupiedSpace(index);\n            const HoverImage = selectedShip.length ? DISPLAY_IMAGES[selectedShip.name][invalidSections] : undefined;\n            const PlacedImage = occupied.length ? DISPLAY_IMAGES[occupied.name].default : undefined;\n            const shot = opponentShots.find(shot => shot.x + shot.y * 10 === index);\n            const hit = shot && occupied.length;\n            const validPlacement = !occupied.length && !invalidPlacement && selectedShip.name;\n            const yOrinetation = rotationAxis === 'y';\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.tile,\n              onClick: () => validPlacement && handleShipPlacement(index, rowIndex),\n              onMouseOver: () => !allPlaced && handleHover(index, rowIndex),\n              onMouseLeave: () => !allPlaced && setHighlightedSections([]),\n              children: [shot && !occupied.length && /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: hit ? 'Hit' : 'Miss',\n                src: hit ? hitIcon : missIcon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 23\n              }, this), PlacedImage && containsHead && /*#__PURE__*/_jsxDEV(PlacedImage, {\n                className: `${styles.ship} ${circleStyles(occupied)}`,\n                style: {\n                  fill: '#000000',\n                  transform: occupied.orientation === 'y' ? `rotate(90deg) translateY(-${SHIP_STYLES[occupied.name].translate}px)` : 'rotate(0deg)',\n                  width: calculateShipWidth(occupied.length)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 23\n              }, this), HoverImage && highlightedSections[0] === index && /*#__PURE__*/_jsxDEV(HoverImage, {\n                className: styles.ship,\n                style: {\n                  fill: validPlacement ? '#717C96' : '#FF0055',\n                  transform: yOrinetation ? `rotate(90deg) translateY(-${SHIP_STYLES[selectedShip.name].translate}px)` : 'rotate(0deg)',\n                  width: calculateShipWidth(highlightedSections.length),\n                  zIndex: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 19\n            }, this);\n          })]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), !allPlaced && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.rotateText,\n      children: \"[PRESS THE SPACE BAR TO ROTATE]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }, this), status && status !== GameStatus.Over && onLeave && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.leave,\n      onClick: () => onLeave(),\n      children: [status === GameStatus.Started ? 'LEAVE' : 'FORFEIT', \" GAME\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"MX1uPOGauJQbjbsSJF2FcR0PkWk=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = Board;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"BOARD$new Array(10).fill('').map\");\n$RefreshReg$(_c2, \"BOARD\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/src/components/Board/index.tsx"],"names":["useEffect","useMemo","useState","createUseStyles","jss","EMPTY_SHIP","DISPLAY_IMAGES","SHIP_STYLES","hitIcon","missIcon","GameStatus","useStyles","label","alignItems","color","cursor","display","fontSize","fontWeight","justifyContent","lineHeight","width","leave","backgroundColor","borderRadius","letterSpacing","margin","padding","rotateText","row","gap","marginTop","ship","left","pointerEvents","position","transformOrigin","transition","zIndex","fill","tile","background","height","wrapper","BOARD","Array","map","_","Board","allPlaced","onLeave","opponentShots","placedShips","rotationAxis","selectedShip","setPlacedShip","status","styles","highlightedSections","setHighlightedSections","invalidPlacement","setInvalidPlacement","calculateSections","index","sections","i","length","pos","push","checkValidPlacement","calculateShipWidth","len","occupied","find","section","occupiedSpace","rowStart","rowEnd","outOfBoundsElement","element","circleStyles","hits","shot","x","y","defaultClass","pseudoClasses","filter","hit","obj","concat","reduce","item","Object","keys","values","sheet","createStyleSheet","circle","link","attach","classes","handleHover","console","log","handleShipPlacement","orientation","invalidSections","placedShip","forEach","name","shipHeads","heads","undefined","Math","floor","marginLeft","String","fromCharCode","rowIndex","colIndex","containsHead","includes","HoverImage","PlacedImage","default","validPlacement","yOrinetation","transform","translate","Over","Started"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { createUseStyles, jss } from 'react-jss';\nimport { EMPTY_SHIP, Ship } from './types';\nimport { DISPLAY_IMAGES } from './images';\nimport { SHIP_STYLES } from './styles';\nimport hitIcon from './images/hit.svg';\nimport missIcon from './images/miss.svg';\nimport { Shot } from 'views/Game/types';\nimport { GameStatus } from 'utils/constants';\n\nconst useStyles = createUseStyles({\n  label: {\n    alignItems: 'center',\n    color: '#9CA3B6',\n    cursor: 'pointer',\n    display: 'flex',\n    fontSize: '24px',\n    fontWeight: 700,\n    justifyContent: 'center',\n    lineHeight: '34.68px',\n    width: '46px',\n  },\n  leave: {\n    backgroundColor: '#FF0055',\n    borderRadius: '3px',\n    color: '#FFFFFF',\n    cursor: 'pointer',\n    fontSize: '24px',\n    fontWeight: 700,\n    letterSpacing: '3.6px',\n    margin: '46px auto 0 auto',\n    padding: '5px 15px',\n    width: 'fit-content',\n  },\n  rotateText: {\n    fontSize: '24px',\n    fontWeight: 400,\n    letterSpacing: '3.6px',\n    margin: '55px auto 0 auto',\n    width: 'fit-content',\n  },\n  row: {\n    alignItems: 'center',\n    display: 'flex',\n    gap: '7px',\n    marginTop: '7px',\n  },\n  ship: {\n    left: 0,\n    pointerEvents: 'none',\n    position: 'absolute',\n    transformOrigin: 'top left',\n    transition: '.2s transform',\n    zIndex: 1,\n    '& > circle': {\n      fill: '#FFFFFF',\n    },\n  },\n  tile: {\n    alignItems: 'center',\n    background: '#DFF4FF',\n    borderRadius: '3px',\n    cursor: 'crosshair',\n    display: 'flex',\n    justifyContent: 'center',\n    height: '46px',\n    position: 'relative',\n    width: '46px',\n  },\n  wrapper: {\n    marginTop: '24px',\n  },\n});\n\n// Board is simply a 10x10 array\nconst BOARD = new Array(10).fill('').map((_) => new Array(10).fill(''));\n\ntype BoardProps = {\n  allPlaced: boolean; // boolean prop detailing if all ships have been placed\n  onLeave?: () => void; // optional function to execute tx to leave a game\n  opponentShots: Shot[]; // array of the shots an opponent has taken\n  placedShips: Ship[]; // array of ships already placed\n  rotationAxis: string; // orientation of ship placement (horizontal / vertical)\n  selectedShip: Ship; // ship that is in the process of being places\n  setPlacedShip: (ship: Ship) => void; // function to add selected ship to placeShips array\n  status?: GameStatus; // optional prop detailing whether or not board is rendered in a game and what the status of the game is\n};\n\nexport default function Board({\n  allPlaced,\n  onLeave,\n  opponentShots,\n  placedShips,\n  rotationAxis,\n  selectedShip,\n  setPlacedShip,\n  status,\n}: BoardProps): JSX.Element {\n  const styles = useStyles();\n  // Sections above which a seleted ship is being rendered before placement\n  const [highlightedSections, setHighlightedSections] = useState<number[]>([]);\n  // State variable describing whether placement would be valid or not\n  const [invalidPlacement, setInvalidPlacement] = useState(false);\n\n  /**\n   *Determine path of ship depending on rotational axis.\n   *\n   * @param {number} index - coordinate of starting section of ship.\n   * @param {number} row - cow number on the board.\n   *\n   * @returns Array of spaces to be occupied after ship placement.\n   */\n  const calculateSections = (index: number, row: number): number[] => {\n    const sections: number[] = [];\n    for (let i = 0; i < selectedShip.length; i++) {\n      const pos = rotationAxis === 'y' ? index + i * 10 : index + i;\n      sections.push(pos);\n      checkValidPlacement(pos, row, sections);\n    }\n    return sections;\n  };\n\n  /**\n   * Helper function to generate a ship image sized correctly to the board size generated\n   *\n   * @param {number} len - length of the ship\n   * @returns width of the ship in pixels\n   */\n  const calculateShipWidth = (len: number) => {\n    return `${len * 46}px`;\n  };\n\n  /**\n   * Check whether ship is in bounds or whether there is an overlap with a placed ship\n   *\n   * @param {number} pos - index of tile being hovered over\n   * @param {number} row - index of the row being hovered over\n   * @param {number[]} sections - sections of the board selected ship will occupy\n   */\n  const checkValidPlacement = (\n    pos: number,\n    row: number,\n    sections: number[]\n  ) => {\n    const occupied = sections.find((section) => occupiedSpace(section).length);\n    // If space is occupied then automatically invalid\n    if (occupied) {\n      setInvalidPlacement(true);\n    } else {\n      // If orientation is vertical then values below 0 and above 100 are all that need to be checked\n      if (rotationAxis === 'y') {\n        setInvalidPlacement(pos < 0 || pos > 100);\n        // If orientation is horizontal need to check if ship is out of row boundary\n      } else {\n        const rowStart = row * 10;\n        const rowEnd = row * 10 + 9;\n        const outOfBoundsElement = sections.find(\n          (element) => element < rowStart || element > rowEnd\n        );\n        setInvalidPlacement(!!outOfBoundsElement);\n      }\n    }\n  };\n\n  /**\n   * Colors inner svg circles of ship if a shot has been taken at that specific coordinate\n   *\n   * @param {Ship} ship - ship being redenered in JSX return\n   * @returns corresponding svg circle styles to be rendered with ship\n   */\n  const circleStyles = (ship: Ship) => {\n    const hits: any = ship.sections.map((section, index) => [\n      section,\n      opponentShots.find((shot) => shot.x + shot.y * 10 === section),\n      index + 1,\n    ]);\n    const defaultClass = {\n      '& > circle': {\n        fill: '#FFFFFF',\n      },\n    };\n    const pseudoClasses = hits\n      .filter((hit: any) => hit[1])\n      .map((hit: any) => ({\n        [`& > circle:nth-of-type(${hit[2]})`]: {\n          fill: '#FF0055',\n        },\n      }));\n    const obj = [defaultClass].concat(pseudoClasses).reduce(\n      (obj, item) => ({\n        ...obj,\n        [Object.keys(item)[0]]: Object.values(item)[0],\n      }),\n      {}\n    );\n    const sheet = jss\n      .createStyleSheet(\n        {\n          circle: obj,\n        },\n        { link: true }\n      )\n      .attach();\n    return sheet.classes.circle;\n  };\n\n  /**\n   *\n   * Function to determine where to render ship on board during placement phase\n   *\n   * @param {number} index - index of the board being hovered over\n   * @param {number} row - index of the row being hovered over\n   */\n  const handleHover = (index: number, row: number) => {\n    console.log('Index: ', index);\n    const sections = calculateSections(index, row);\n    if (rotationAxis === 'y') {\n      setHighlightedSections(sections.filter((section) => section < 100));\n    } else {\n      const rowStart = row * 10;\n      const rowEnd = rowStart + 9;\n      setHighlightedSections(\n        sections.filter(\n          (section) => !(section > rowEnd) && !(section < rowStart)\n        )\n      );\n    }\n  };\n\n  /**\n   * Calculate sections ship will occupt upon placement and then place\n   *\n   * @param {number} index - index of the tile\n   * @param {number} row - index of the row\n   */\n  const handleShipPlacement = (index: number, row: number) => {\n    const sections = calculateSections(index, row);\n    setPlacedShip({\n      ...selectedShip,\n      orientation: rotationAxis,\n      sections,\n    } as Ship);\n    setHighlightedSections([]);\n  };\n\n  /**\n   * Memoized value to determine how many invalid sections of the ship to render based on\n   * position of the board\n   */\n  const invalidSections = useMemo(() => {\n    return selectedShip.length - highlightedSections.length;\n  }, [highlightedSections, selectedShip]);\n\n  /**\n   *  Determines whether a specified coordinate contains a placed ship\n   *\n   * @param {number} pos - coordinate on the board\n   * @returns {Ship} - ship that currently occupies the supplied space\n   */\n  const occupiedSpace = (pos: number): Ship => {\n    let placedShip = EMPTY_SHIP;\n    placedShips.forEach((ship) => {\n      ship.sections.forEach((section) => {\n        if (section === pos) {\n          placedShip = ship;\n          return;\n        }\n        if (placedShip.name) return;\n      });\n    });\n    return placedShip;\n  };\n\n  /**\n   * Memoized value to determine what coordinates contain the heads of a ship so that the image may\n   * be rendered from the head\n   */\n  const shipHeads = useMemo(() => {\n    const heads: number[] = [];\n    placedShips.forEach((ship) => {\n      // Head is simply index 0 of where the ship exists on the board\n      heads.push(ship.sections[0]);\n    });\n    return heads;\n  }, [placedShips]);\n\n  /**\n   * useEffect will run each time the rotation axis of the ship is changed\n   */\n  useEffect(() => {\n    if (highlightedSections[0] !== undefined) {\n      const row = Math.floor(highlightedSections[0] / 10);\n      handleHover(highlightedSections[0], row);\n    }\n    // eslint-disable-next-line\n  }, [rotationAxis]);\n\n  return (\n    <div>\n      <div className={styles.wrapper}>\n        <div className={styles.row} style={{ marginLeft: '46px' }}>\n          {new Array(10).fill('').map((_, index) => (\n            <div className={styles.label} key={index}>\n              {String.fromCharCode(65 + index)}\n            </div>\n          ))}\n        </div>\n        {BOARD.map((row, rowIndex) => {\n          return (\n            <div className={styles.row} key={rowIndex}>\n              <div className={styles.label}>{rowIndex + 1}</div>\n              {row.map((_, colIndex) => {\n                const index = rowIndex * 10 + colIndex;\n                // Check if index includes start of ship\n                const containsHead = shipHeads.includes(index);\n                const occupied = occupiedSpace(index);\n                const HoverImage = selectedShip.length\n                  ? DISPLAY_IMAGES[selectedShip.name][invalidSections]\n                  : undefined;\n                const PlacedImage = occupied.length\n                  ? DISPLAY_IMAGES[occupied.name].default\n                  : undefined;\n                const shot = opponentShots.find(\n                  (shot) => shot.x + shot.y * 10 === index\n                );\n                const hit = shot && occupied.length;\n                const validPlacement =\n                  !occupied.length && !invalidPlacement && selectedShip.name;\n                const yOrinetation = rotationAxis === 'y';\n                return (\n                  <div\n                    className={styles.tile}\n                    key={index}\n                    onClick={() =>\n                      validPlacement && handleShipPlacement(index, rowIndex)\n                    }\n                    onMouseOver={() =>\n                      !allPlaced && handleHover(index, rowIndex)\n                    }\n                    onMouseLeave={() =>\n                      !allPlaced && setHighlightedSections([])\n                    }\n                  >\n                    {shot && !occupied.length && (\n                      <img\n                        alt={hit ? 'Hit' : 'Miss'}\n                        src={hit ? hitIcon : missIcon}\n                      />\n                    )}\n                    {/* Render ship if index contains head */}\n                    {PlacedImage && containsHead && (\n                      <PlacedImage\n                        className={`${styles.ship} ${circleStyles(occupied)}`}\n                        style={{\n                          fill: '#000000',\n                          transform:\n                            occupied.orientation === 'y'\n                              ? `rotate(90deg) translateY(-${\n                                  SHIP_STYLES[occupied.name].translate\n                                }px)`\n                              : 'rotate(0deg)',\n                          width: calculateShipWidth(occupied.length),\n                        }}\n                      />\n                    )}\n                    {/* Render selected ship */}\n                    {HoverImage && highlightedSections[0] === index && (\n                      <HoverImage\n                        className={styles.ship}\n                        style={{\n                          fill: validPlacement ? '#717C96' : '#FF0055',\n                          transform: yOrinetation\n                            ? `rotate(90deg) translateY(-${\n                                SHIP_STYLES[selectedShip.name].translate\n                              }px)`\n                            : 'rotate(0deg)',\n                          width: calculateShipWidth(highlightedSections.length),\n                          zIndex: 2,\n                        }}\n                      />\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n      {!allPlaced && (\n        <div className={styles.rotateText}>[PRESS THE SPACE BAR TO ROTATE]</div>\n      )}\n      {status && status !== GameStatus.Over && onLeave && (\n        <div className={styles.leave} onClick={() => onLeave()}>\n          {status === GameStatus.Started ? 'LEAVE' : 'FORFEIT'} GAME\n        </div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}