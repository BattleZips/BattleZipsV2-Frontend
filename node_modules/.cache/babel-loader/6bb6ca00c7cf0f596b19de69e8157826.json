{"ast":null,"code":"const createStoreImpl = createState => {\n  let state;\n  const listeners = /* @__PURE__ */new Set();\n\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach(listener => listener(state, previousState));\n    }\n  };\n\n  const getState = () => state;\n\n  const subscribe = listener => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n\n  const destroy = () => {\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n      console.warn(\"[DEPRECATED] The destroy method will be unsupported in the future version. You should use unsubscribe function returned by subscribe. Everything will be garbage collected if store is garbage collected.\");\n    }\n\n    listeners.clear();\n  };\n\n  const api = {\n    setState,\n    getState,\n    subscribe,\n    destroy\n  };\n  state = createState(setState, getState, api);\n  return api;\n};\n\nconst createStore = createState => createState ? createStoreImpl(createState) : createStoreImpl;\n\nvar vanilla = createState => {\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n    console.warn(\"[DEPRECATED] default export is deprecated, instead import { createStore } ...\");\n  }\n\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };","map":{"version":3,"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/zustand/esm/vanilla.mjs"],"names":["createStoreImpl","createState","state","listeners","Set","setState","partial","replace","nextState","Object","is","previousState","assign","forEach","listener","getState","subscribe","add","delete","destroy","import","meta","env","MODE","console","warn","clear","api","createStore","vanilla","default"],"mappings":"AAAA,MAAMA,eAAe,GAAIC,WAAD,IAAiB;AACvC,MAAIC,KAAJ;AACA,QAAMC,SAAS,GAAG,eAAgB,IAAIC,GAAJ,EAAlC;;AACA,QAAMC,QAAQ,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AACrC,UAAMC,SAAS,GAAG,OAAOF,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAACJ,KAAD,CAAvC,GAAiDI,OAAnE;;AACA,QAAI,CAACG,MAAM,CAACC,EAAP,CAAUF,SAAV,EAAqBN,KAArB,CAAL,EAAkC;AAChC,YAAMS,aAAa,GAAGT,KAAtB;AACAA,MAAAA,KAAK,GAAG,CAACK,OAAO,IAAI,IAAX,GAAkBA,OAAlB,GAA4B,OAAOC,SAAP,KAAqB,QAAlD,IAA8DA,SAA9D,GAA0EC,MAAM,CAACG,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyBM,SAAzB,CAAlF;AACAL,MAAAA,SAAS,CAACU,OAAV,CAAmBC,QAAD,IAAcA,QAAQ,CAACZ,KAAD,EAAQS,aAAR,CAAxC;AACD;AACF,GAPD;;AAQA,QAAMI,QAAQ,GAAG,MAAMb,KAAvB;;AACA,QAAMc,SAAS,GAAIF,QAAD,IAAc;AAC9BX,IAAAA,SAAS,CAACc,GAAV,CAAcH,QAAd;AACA,WAAO,MAAMX,SAAS,CAACe,MAAV,CAAiBJ,QAAjB,CAAb;AACD,GAHD;;AAIA,QAAMK,OAAO,GAAG,MAAM;AACpB,QAAI,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAZ,IAAmBF,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgBC,IAApC,MAA8C,YAAlD,EAAgE;AAC9DC,MAAAA,OAAO,CAACC,IAAR,CACE,2MADF;AAGD;;AACDtB,IAAAA,SAAS,CAACuB,KAAV;AACD,GAPD;;AAQA,QAAMC,GAAG,GAAG;AAAEtB,IAAAA,QAAF;AAAYU,IAAAA,QAAZ;AAAsBC,IAAAA,SAAtB;AAAiCG,IAAAA;AAAjC,GAAZ;AACAjB,EAAAA,KAAK,GAAGD,WAAW,CAACI,QAAD,EAAWU,QAAX,EAAqBY,GAArB,CAAnB;AACA,SAAOA,GAAP;AACD,CA3BD;;AA4BA,MAAMC,WAAW,GAAI3B,WAAD,IAAiBA,WAAW,GAAGD,eAAe,CAACC,WAAD,CAAlB,GAAkCD,eAAlF;;AACA,IAAI6B,OAAO,GAAI5B,WAAD,IAAiB;AAC7B,MAAI,CAACmB,MAAM,CAACC,IAAP,CAAYC,GAAZ,IAAmBF,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgBC,IAApC,MAA8C,YAAlD,EAAgE;AAC9DC,IAAAA,OAAO,CAACC,IAAR,CACE,+EADF;AAGD;;AACD,SAAOG,WAAW,CAAC3B,WAAD,CAAlB;AACD,CAPD;;AASA,SAAS2B,WAAT,EAAsBC,OAAO,IAAIC,OAAjC","sourcesContent":["const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The destroy method will be unsupported in the future version. You should use unsubscribe function returned by subscribe. Everything will be garbage collected if store is garbage collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, subscribe, destroy };\n  state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] default export is deprecated, instead import { createStore } ...\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n"]},"metadata":{},"sourceType":"module"}