{"ast":null,"code":"var _jsxFileName = \"/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/src/views/BuildBoardView/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Board from 'components/Board';\nimport { EMPTY_SHIP } from 'components/Board/types';\nimport MainLayout from 'layouts/MainLayout';\nimport carrier from 'components/Board/images/carrierSelection.svg';\nimport battleship from 'components/Board/images/battleshipSelection.svg';\nimport submarine from 'components/Board/images/submarineSelection.svg';\nimport cruiser from 'components/Board/images/cruiserSelection.svg';\nimport destroyer from 'components/Board/images/destroyerSelection.svg'; // import { ITx, transaction, getGameIndex } from 'web3/battleshipGame';\n\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  content: {\n    display: 'flex',\n    gap: '114px',\n    marginInline: 'auto',\n    width: 'fit-content'\n  },\n  fleetLabel: {\n    borderRadius: '3px',\n    color: '#FFFFFF',\n    fontSize: '24px',\n    fontWeight: 700,\n    lineHeight: '34.68px',\n    paddingBlock: '2px',\n    textAlign: 'center'\n  },\n  wrapper: {\n    outline: 'none'\n  }\n});\nconst SHIPS = [{\n  image: carrier,\n  name: 'carrier',\n  length: 5,\n  sections: []\n}, {\n  image: battleship,\n  name: 'battleship',\n  length: 4,\n  sections: []\n}, {\n  image: cruiser,\n  name: 'cruiser',\n  length: 3,\n  sections: []\n}, {\n  image: submarine,\n  name: 'submarine',\n  length: 3,\n  sections: []\n}, {\n  image: destroyer,\n  name: 'destroyer',\n  length: 2,\n  sections: []\n}];\n/**\n * View for placing ships prior to creating or joining a game\n */\n\nexport default function BuildBoard() {\n  _s();\n\n  const [searchParams] = useSearchParams();\n  const id = searchParams.get('id'); // game id\n\n  const styles = useStyles();\n  const navigate = useNavigate(); // const { address, chainId, provider, biconomy } = useWallet();\n\n  const [placedShips, setPlacedShips] = useState([]); // all placed ships\n\n  const [rotationAxis, setRotationAxis] = useState('y'); // orientation to place ships in\n\n  const [selectedShip, setSelectedShip] = useState(EMPTY_SHIP); // currently selected ship\n\n  /**\n   * Memoized value to see if all ships have been placed\n   */\n\n  const allPlaced = useMemo(() => {\n    return placedShips.length === 5;\n  }, [placedShips]);\n  /**\n   * Helper to function to place a ship\n   *\n   * @param {Ship} ship - selected ship\n   */\n\n  const handleShipSelect = ship => {\n    // Select ship or set to empty if same ship is selected twice\n    setSelectedShip(ship.name === selectedShip.name ? EMPTY_SHIP : ship);\n  };\n  /**\n   * Put selected ship into ship array and place on board\n   *\n   * @param {Ship} placedShip - selected ship to place\n   */\n\n\n  const handlePlacedShip = placedShip => {\n    setPlacedShips(prev => [...prev, placedShip].sort((a, b) => b.length - a.length));\n    setSelectedShip(EMPTY_SHIP);\n  };\n  /**\n   * Removes ship from placed array and then from board\n   *\n   * @param {Ship} removedShip - ship to be removed from board\n   */\n\n\n  const handleRemoveShip = removedShip => {\n    setPlacedShips(prev => prev.filter(ship => ship.name !== removedShip.name));\n  };\n  /**\n   * Change orientation for ship placement when spacebar is pressed\n   *\n   * @param {React.KeyboardEvent} e - React keyboard event\n   */\n\n\n  const handleRotate = e => {\n    if (e.code === 'Space') {\n      setRotationAxis(prev => prev === 'x' ? 'y' : 'x');\n    }\n  };\n  /**\n   * Wrapper for generating the Noir board proof\n   *\n   * @param {number[][]} board - 2D array containing coordinates for placed ships on the board\n   * @returns {Promise} - promise containign board hash and Noir proof for board\n   */\n  // const boardProof = async (\n  //   board: number[][]\n  // ): Promise<{ hash: string; proof: Buffer }> => {\n  //   // Generate Pedersen hash of ships on board\n  //   const _shipHash = await createShipHash(board);\n  //   const abi = {\n  //     hash: _shipHash,\n  //     // Convert to 1D array for Noir\n  //     ships: board.flat(),\n  //   };\n  //   const proof = await generateProof('board', abi);\n  //   // TODO: Add browser verification\n  //   return { hash: _shipHash, proof };\n  // };\n\n  /**\n   * Wrapper for smart contract function to create game if non-existent, or join game if created\n   *\n   * @returns {null} - exit if chainId or eth provider are undefined\n   */\n  // const startGame = async () => {\n  //   if (!chainId || !provider) return;\n  //   let loadingToast = '';\n  //   try {\n  //     loadingToast = toast.loading('Generating board proof...');\n  //     const board: number[][] = [];\n  //     placedShips.forEach((ship: Ship) => {\n  //       const x = ship.sections[0] % 10;\n  //       const y = Math.floor(ship.sections[0] / 10);\n  //       const z = ship.orientation === 'x' ? 0 : 1;\n  //       board.push([x, y, z]);\n  //     });\n  //     // Grab hash of board and Noir proof\n  //     const { hash, proof } = await boardProof(board);\n  //     // If id exists then game is already created so attempt to join\n  //     if (id) {\n  //       toast.loading(`Attempting to join game ${id}...`, {\n  //         id: loadingToast,\n  //       });\n  //       const params = [+id, BN.from(hash), proof];\n  //       // If biconomy is enabled then trigger meta transaction\n  //       if (biconomy) {\n  //         const metatx: IMetaTx = {\n  //           provider,\n  //           biconomy,\n  //           functionName: 'joinGame',\n  //           args: params,\n  //         };\n  //         await metatransaction(metatx);\n  //       } else {\n  //         const tx: ITx = {\n  //           provider,\n  //           functionName: 'joinGame',\n  //           args: params,\n  //         };\n  //         await transaction(tx);\n  //       }\n  //       // Set ship placements in local storage for later retrieval\n  //       // Format: BOARD_STATE_<unique_game_id>_<user_address>\n  //       localStorage.setItem(\n  //         `BOARD_STATE_${id}_${address}`,\n  //         JSON.stringify(placedShips)\n  //       );\n  //       toast.remove(loadingToast);\n  //       toast.success(`Joined game ${id}`);\n  //       // Upon joining game, push to active location\n  //       navigate(ActiveGameLocation(id));\n  //       // If no id is present then new game is created\n  //     } else {\n  //       toast.loading(`Creating game...`, { id: loadingToast });\n  //       // Base current game index off of current nonce in contract\n  //       const currentIndex = await getGameIndex(chainId, provider);\n  //       const params = [BN.from(hash), proof];\n  //       // If biconomy is enabled then trigger meta transaction\n  //       if (biconomy) {\n  //         const metatx: IMetaTx = {\n  //           provider,\n  //           biconomy,\n  //           functionName: 'newGame',\n  //           args: params,\n  //         };\n  //         await metatransaction(metatx);\n  //       } else {\n  //         const tx: ITx = {\n  //           provider,\n  //           functionName: 'newGame',\n  //           args: params,\n  //         };\n  //         await transaction(tx);\n  //       }\n  //       // Set ship placements in local storage for later retrieval\n  //       // Format: BOARD_STATE_<unique_game_id>_<user_address>\n  //       localStorage.setItem(\n  //         `BOARD_STATE_${+currentIndex + 1}_${address}`,\n  //         JSON.stringify(placedShips)\n  //       );\n  //       toast.success('Game successfully created.', {\n  //         duration: 5000,\n  //         id: loadingToast,\n  //       });\n  //       navigate(ActiveGameLocation(`${+currentIndex + 1}`));\n  //     }\n  //   } catch (err) {\n  //     console.log('ERROR: ', err);\n  //     toast.error(id ? 'Error joining game' : 'Error creating game', {\n  //       id: loadingToast,\n  //       duration: 5000,\n  //     });\n  //   }\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.wrapper // Change placement orientation\n      ,\n      onKeyDown: e => handleRotate(e),\n      tabIndex: 0,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.content,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '551px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.fleetLabel,\n            style: {\n              background: '#717C96'\n            },\n            children: \"DEPLOY YOUR FLEET\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '523px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.fleetLabel,\n            style: {\n              background: '#FF0055'\n            },\n            children: \"YOUR FLEET\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Board, {\n            allPlaced: allPlaced,\n            opponentShots: [],\n            placedShips: placedShips,\n            rotationAxis: rotationAxis,\n            selectedShip: selectedShip,\n            setPlacedShip: handlePlacedShip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BuildBoard, \"+xmj8yAicNQM2YS8v3ZXB1NDDqk=\", false, function () {\n  return [useSearchParams, useStyles, useNavigate];\n});\n\n_c = BuildBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuildBoard\");","map":{"version":3,"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/src/views/BuildBoardView/index.tsx"],"names":["useMemo","useState","createUseStyles","Board","EMPTY_SHIP","MainLayout","carrier","battleship","submarine","cruiser","destroyer","useNavigate","useSearchParams","useStyles","content","display","gap","marginInline","width","fleetLabel","borderRadius","color","fontSize","fontWeight","lineHeight","paddingBlock","textAlign","wrapper","outline","SHIPS","image","name","length","sections","BuildBoard","searchParams","id","get","styles","navigate","placedShips","setPlacedShips","rotationAxis","setRotationAxis","selectedShip","setSelectedShip","allPlaced","handleShipSelect","ship","handlePlacedShip","placedShip","prev","sort","a","b","handleRemoveShip","removedShip","filter","handleRotate","e","code","background"],"mappings":"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KAAUA,CAAC,CAACtB,MAAF,GAAWqB,CAAC,CAACrB,MAAlD,CADY,CAAd;AAGAa,IAAAA,eAAe,CAACzC,UAAD,CAAf;AACD,GALD;AAMA;AACF;AACA;AACA;AACA;;;AACE,QAAMmD,gBAAgB,GAAIC,WAAD,IAAuB;AAC9Cf,IAAAA,cAAc,CAAEU,IAAD,IACbA,IAAI,CAACM,MAAL,CAAaT,IAAD,IAAUA,IAAI,CAACjB,IAAL,KAAcyB,WAAW,CAACzB,IAAhD,CADY,CAAd;AAGD,GAJD;AAMA;AACF;AACA;AACA;AACA;;;AACE,QAAM2B,YAAY,GAAIC,CAAD,IAA4C;AAC/D,QAAIA,CAAC,CAACC,IAAF,KAAW,OAAf,EAAwB;AACtBjB,MAAAA,eAAe,CAAEQ,IAAD,IAAWA,IAAI,KAAK,GAAT,GAAe,GAAf,GAAqB,GAAjC,CAAf;AACD;AACF,GAJD;AAMA;AACF;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACF;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE,QAAC,UAAD;AAAA,2BACE;AACE,MAAA,SAAS,EAAEb,MAAM,CAACX,OADpB,CAEE;AAFF;AAGE,MAAA,SAAS,EAAGgC,CAAD,IAAOD,YAAY,CAACC,CAAD,CAHhC;AAIE,MAAA,QAAQ,EAAE,CAJZ;AAAA,6BAME;AAAK,QAAA,SAAS,EAAErB,MAAM,CAACxB,OAAvB;AAAA,gCACE;AAAK,UAAA,KAAK,EAAE;AAAEI,YAAAA,KAAK,EAAE;AAAT,WAAZ;AAAA,iCACE;AACE,YAAA,SAAS,EAAEoB,MAAM,CAACnB,UADpB;AAEE,YAAA,KAAK,EAAE;AAAE0C,cAAAA,UAAU,EAAE;AAAd,aAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAkBE;AAAK,UAAA,KAAK,EAAE;AAAE3C,YAAAA,KAAK,EAAE;AAAT,WAAZ;AAAA,kCACE;AACE,YAAA,SAAS,EAAEoB,MAAM,CAACnB,UADpB;AAEE,YAAA,KAAK,EAAE;AAAE0C,cAAAA,UAAU,EAAE;AAAd,aAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE,QAAC,KAAD;AACE,YAAA,SAAS,EAAEf,SADb;AAEE,YAAA,aAAa,EAAE,EAFjB;AAGE,YAAA,WAAW,EAAEN,WAHf;AAIE,YAAA,YAAY,EAAEE,YAJhB;AAKE,YAAA,YAAY,EAAEE,YALhB;AAME,YAAA,aAAa,EAAEK;AANjB;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD;;GA/NuBf,U;UACCtB,e,EAERC,S,EACEF,W;;;KAJKuB,U","sourcesContent":["import { useMemo, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Board from 'components/Board';\nimport { EMPTY_SHIP, Ship } from 'components/Board/types';\nimport MainLayout from 'layouts/MainLayout';\nimport ShipSelection from './components/ShipSelection';\nimport carrier from 'components/Board/images/carrierSelection.svg';\nimport battleship from 'components/Board/images/battleshipSelection.svg';\nimport submarine from 'components/Board/images/submarineSelection.svg';\nimport cruiser from 'components/Board/images/cruiserSelection.svg';\nimport destroyer from 'components/Board/images/destroyerSelection.svg';\n// import { ITx, transaction, getGameIndex } from 'web3/battleshipGame';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport { BigNumber as BN } from 'ethers';\n// import { IMetaTx, metatransaction } from 'web3/erc2771';\nimport { ActiveGameLocation } from 'Locations';\n\nconst useStyles = createUseStyles({\n  content: {\n    display: 'flex',\n    gap: '114px',\n    marginInline: 'auto',\n    width: 'fit-content',\n  },\n  fleetLabel: {\n    borderRadius: '3px',\n    color: '#FFFFFF',\n    fontSize: '24px',\n    fontWeight: 700,\n    lineHeight: '34.68px',\n    paddingBlock: '2px',\n    textAlign: 'center',\n  },\n  wrapper: {\n    outline: 'none',\n  },\n});\n\nconst SHIPS: Ship[] = [\n  {\n    image: carrier,\n    name: 'carrier',\n    length: 5,\n    sections: [],\n  },\n  {\n    image: battleship,\n    name: 'battleship',\n    length: 4,\n    sections: [],\n  },\n  {\n    image: cruiser,\n    name: 'cruiser',\n    length: 3,\n    sections: [],\n  },\n  {\n    image: submarine,\n    name: 'submarine',\n    length: 3,\n    sections: [],\n  },\n  {\n    image: destroyer,\n    name: 'destroyer',\n    length: 2,\n    sections: [],\n  },\n];\n\n/**\n * View for placing ships prior to creating or joining a game\n */\nexport default function BuildBoard(): JSX.Element {\n  const [searchParams] = useSearchParams();\n  const id = searchParams.get('id'); // game id\n  const styles = useStyles();\n  const navigate = useNavigate();\n  // const { address, chainId, provider, biconomy } = useWallet();\n  const [placedShips, setPlacedShips] = useState<Ship[]>([]); // all placed ships\n  const [rotationAxis, setRotationAxis] = useState('y'); // orientation to place ships in\n  const [selectedShip, setSelectedShip] = useState<Ship>(EMPTY_SHIP); // currently selected ship\n\n  /**\n   * Memoized value to see if all ships have been placed\n   */\n  const allPlaced = useMemo(() => {\n    return placedShips.length === 5;\n  }, [placedShips]);\n\n  /**\n   * Helper to function to place a ship\n   *\n   * @param {Ship} ship - selected ship\n   */\n  const handleShipSelect = (ship: Ship) => {\n    // Select ship or set to empty if same ship is selected twice\n    setSelectedShip(ship.name === selectedShip.name ? EMPTY_SHIP : ship);\n  };\n\n  /**\n   * Put selected ship into ship array and place on board\n   *\n   * @param {Ship} placedShip - selected ship to place\n   */\n  const handlePlacedShip = (placedShip: Ship) => {\n    setPlacedShips((prev) =>\n      [...prev, placedShip].sort((a, b) => b.length - a.length)\n    );\n    setSelectedShip(EMPTY_SHIP);\n  };\n  /**\n   * Removes ship from placed array and then from board\n   *\n   * @param {Ship} removedShip - ship to be removed from board\n   */\n  const handleRemoveShip = (removedShip: Ship) => {\n    setPlacedShips((prev) =>\n      prev.filter((ship) => ship.name !== removedShip.name)\n    );\n  };\n\n  /**\n   * Change orientation for ship placement when spacebar is pressed\n   *\n   * @param {React.KeyboardEvent} e - React keyboard event\n   */\n  const handleRotate = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.code === 'Space') {\n      setRotationAxis((prev) => (prev === 'x' ? 'y' : 'x'));\n    }\n  };\n\n  /**\n   * Wrapper for generating the Noir board proof\n   *\n   * @param {number[][]} board - 2D array containing coordinates for placed ships on the board\n   * @returns {Promise} - promise containign board hash and Noir proof for board\n   */\n  // const boardProof = async (\n  //   board: number[][]\n  // ): Promise<{ hash: string; proof: Buffer }> => {\n  //   // Generate Pedersen hash of ships on board\n  //   const _shipHash = await createShipHash(board);\n  //   const abi = {\n  //     hash: _shipHash,\n  //     // Convert to 1D array for Noir\n  //     ships: board.flat(),\n  //   };\n  //   const proof = await generateProof('board', abi);\n  //   // TODO: Add browser verification\n  //   return { hash: _shipHash, proof };\n  // };\n\n  /**\n   * Wrapper for smart contract function to create game if non-existent, or join game if created\n   *\n   * @returns {null} - exit if chainId or eth provider are undefined\n   */\n  // const startGame = async () => {\n  //   if (!chainId || !provider) return;\n  //   let loadingToast = '';\n  //   try {\n  //     loadingToast = toast.loading('Generating board proof...');\n  //     const board: number[][] = [];\n  //     placedShips.forEach((ship: Ship) => {\n  //       const x = ship.sections[0] % 10;\n  //       const y = Math.floor(ship.sections[0] / 10);\n  //       const z = ship.orientation === 'x' ? 0 : 1;\n  //       board.push([x, y, z]);\n  //     });\n  //     // Grab hash of board and Noir proof\n  //     const { hash, proof } = await boardProof(board);\n  //     // If id exists then game is already created so attempt to join\n  //     if (id) {\n  //       toast.loading(`Attempting to join game ${id}...`, {\n  //         id: loadingToast,\n  //       });\n  //       const params = [+id, BN.from(hash), proof];\n  //       // If biconomy is enabled then trigger meta transaction\n  //       if (biconomy) {\n  //         const metatx: IMetaTx = {\n  //           provider,\n  //           biconomy,\n  //           functionName: 'joinGame',\n  //           args: params,\n  //         };\n  //         await metatransaction(metatx);\n  //       } else {\n  //         const tx: ITx = {\n  //           provider,\n  //           functionName: 'joinGame',\n  //           args: params,\n  //         };\n  //         await transaction(tx);\n  //       }\n  //       // Set ship placements in local storage for later retrieval\n  //       // Format: BOARD_STATE_<unique_game_id>_<user_address>\n  //       localStorage.setItem(\n  //         `BOARD_STATE_${id}_${address}`,\n  //         JSON.stringify(placedShips)\n  //       );\n  //       toast.remove(loadingToast);\n  //       toast.success(`Joined game ${id}`);\n  //       // Upon joining game, push to active location\n  //       navigate(ActiveGameLocation(id));\n  //       // If no id is present then new game is created\n  //     } else {\n  //       toast.loading(`Creating game...`, { id: loadingToast });\n  //       // Base current game index off of current nonce in contract\n  //       const currentIndex = await getGameIndex(chainId, provider);\n  //       const params = [BN.from(hash), proof];\n  //       // If biconomy is enabled then trigger meta transaction\n  //       if (biconomy) {\n  //         const metatx: IMetaTx = {\n  //           provider,\n  //           biconomy,\n  //           functionName: 'newGame',\n  //           args: params,\n  //         };\n  //         await metatransaction(metatx);\n  //       } else {\n  //         const tx: ITx = {\n  //           provider,\n  //           functionName: 'newGame',\n  //           args: params,\n  //         };\n  //         await transaction(tx);\n  //       }\n  //       // Set ship placements in local storage for later retrieval\n  //       // Format: BOARD_STATE_<unique_game_id>_<user_address>\n  //       localStorage.setItem(\n  //         `BOARD_STATE_${+currentIndex + 1}_${address}`,\n  //         JSON.stringify(placedShips)\n  //       );\n  //       toast.success('Game successfully created.', {\n  //         duration: 5000,\n  //         id: loadingToast,\n  //       });\n  //       navigate(ActiveGameLocation(`${+currentIndex + 1}`));\n  //     }\n  //   } catch (err) {\n  //     console.log('ERROR: ', err);\n  //     toast.error(id ? 'Error joining game' : 'Error creating game', {\n  //       id: loadingToast,\n  //       duration: 5000,\n  //     });\n  //   }\n  // };\n\n  return (\n    <MainLayout>\n      <div\n        className={styles.wrapper}\n        // Change placement orientation\n        onKeyDown={(e) => handleRotate(e)}\n        tabIndex={0}\n      >\n        <div className={styles.content}>\n          <div style={{ width: '551px' }}>\n            <div\n              className={styles.fleetLabel}\n              style={{ background: '#717C96' }}\n            >\n              DEPLOY YOUR FLEET\n            </div>\n            {/* <ShipSelection\n              allPlaced={allPlaced}\n              placedShips={placedShips}\n              removeShip={handleRemoveShip}\n              selectShip={handleShipSelect}\n              selectedShip={selectedShip}\n              ships={SHIPS}\n              startGame={startGame}\n            /> */}\n          </div>\n          <div style={{ width: '523px' }}>\n            <div\n              className={styles.fleetLabel}\n              style={{ background: '#FF0055' }}\n            >\n              YOUR FLEET\n            </div>\n            <Board\n              allPlaced={allPlaced}\n              opponentShots={[]}\n              placedShips={placedShips}\n              rotationAxis={rotationAxis}\n              selectedShip={selectedShip}\n              setPlacedShip={handlePlacedShip}\n            />\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}