{"ast":null,"code":"var _jsxFileName = \"/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/src/views/Home/components/GameList.tsx\",\n    _s = $RefreshSig$();\n\nimport Blockie from 'components/Blockie';\nimport { createUseStyles } from 'react-jss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  gameSelector: {\n    border: '2px solid #717C96',\n    height: '523px',\n    marginTop: '65px',\n    overflowY: 'auto',\n    width: '100%'\n  },\n  noOpenGames: {\n    alignItems: 'center',\n    display: 'flex',\n    fontSize: '28px',\n    fontWeight: 700,\n    height: '523px',\n    justifyContent: 'center',\n    letterSpacing: '3.6px'\n  },\n  row: props => ({\n    alignItems: 'center',\n    color: '#9CA3B6',\n    cursor: 'pointer',\n    display: 'flex',\n    fontWeight: 700,\n    gap: '14px',\n    padding: '7px 23px',\n    transition: '.3s background',\n    '&:hover': {\n      // If option is to select game then render background color\n      background: props.gameOption === 1 ? '#DFF4FF' : ''\n    }\n  }),\n  selectText: {\n    fontSize: '24px',\n    fontWeight: 400,\n    letterSpacing: '3.6px',\n    lineHeight: '34.68px',\n    marginTop: '55px',\n    textAlign: 'center'\n  }\n});\n\n/**\n * Renders a list of started games a user can choose to join\n */\nexport default function GameList(_ref) {\n  _s();\n\n  let {\n    games,\n    gameOption,\n    selectedGame,\n    setSelectedGame\n  } = _ref;\n  const styles = useStyles({\n    gameOption,\n    selectedGame\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: games.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.gameSelector,\n        children: games.map(game => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.row,\n          // Allow game select if join game option is selected from main menu\n          onClick: () => gameOption === 1 && setSelectedGame(game),\n          style: {\n            background: (selectedGame === null || selectedGame === void 0 ? void 0 : selectedGame.address) === game.address ? '#DFF4FF' : ''\n          },\n          children: [/*#__PURE__*/_jsxDEV(Blockie, {\n            address: game.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: game.ens || game.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)]\n        }, game.address, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), gameOption === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.selectText,\n        children: \"[SELECT GAME TO JOIN]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.noOpenGames,\n      children: \"NO OPEN GAMES\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GameList, \"3bjLmUB54uhXRX+frDMowQzU8P8=\", false, function () {\n  return [useStyles];\n});\n\n_c = GameList;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameList\");","map":{"version":3,"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/src/views/Home/components/GameList.tsx"],"names":["Blockie","createUseStyles","useStyles","gameSelector","border","height","marginTop","overflowY","width","noOpenGames","alignItems","display","fontSize","fontWeight","justifyContent","letterSpacing","row","props","color","cursor","gap","padding","transition","background","gameOption","selectText","lineHeight","textAlign","GameList","games","selectedGame","setSelectedGame","styles","length","map","game","address","ens"],"mappings":"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","sourcesContent":["import Blockie from 'components/Blockie';\nimport { SetStateAction } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { Game } from '../types';\n\nconst useStyles = createUseStyles({\n  gameSelector: {\n    border: '2px solid #717C96',\n    height: '523px',\n    marginTop: '65px',\n    overflowY: 'auto',\n    width: '100%'\n  },\n  noOpenGames: {\n    alignItems: 'center',\n    display: 'flex',\n    fontSize: '28px',\n    fontWeight: 700,\n    height: '523px',\n    justifyContent: 'center',\n    letterSpacing: '3.6px'\n  },\n  row: (props: any) => ({\n    alignItems: 'center',\n    color: '#9CA3B6',\n    cursor: 'pointer',\n    display: 'flex',\n    fontWeight: 700,\n    gap: '14px',\n    padding: '7px 23px',\n    transition: '.3s background',\n    '&:hover': {\n      // If option is to select game then render background color\n      background: props.gameOption === 1 ? '#DFF4FF' : ''\n    }\n  }),\n  selectText: {\n    fontSize: '24px',\n    fontWeight: 400,\n    letterSpacing: '3.6px',\n    lineHeight: '34.68px',\n    marginTop: '55px',\n    textAlign: 'center'\n  }\n});\n\ntype GameListProps = {\n  games: Game[]; // array of active games\n  gameOption: number; // what option is selected from main menu to determine if game hover background color is rendered\n  selectedGame: Game | null; // game selected from list\n  setSelectedGame: React.Dispatch<SetStateAction<Game | null>>; // function used to select game to join\n};\n\n/**\n * Renders a list of started games a user can choose to join\n */\nexport default function GameList({\n  games,\n  gameOption,\n  selectedGame,\n  setSelectedGame\n}: GameListProps): JSX.Element {\n  const styles = useStyles({ gameOption, selectedGame });\n  return (\n    <div>\n      {games.length ? (\n        <>\n          <div className={styles.gameSelector}>\n            {games.map((game) => (\n              <div\n                className={styles.row}\n                key={game.address}\n                // Allow game select if join game option is selected from main menu\n                onClick={() => gameOption === 1 && setSelectedGame(game)}\n                style={{\n                  background:\n                    selectedGame?.address === game.address ? '#DFF4FF' : ''\n                }}\n              >\n                <Blockie address={game.address} />\n                {/* Render ens name of creator place of address if it exists */}\n                <div>{game.ens || game.address}</div>\n              </div>\n            ))}\n          </div>\n          {gameOption === 1 && (\n            <div className={styles.selectText}>[SELECT GAME TO JOIN]</div>\n          )}\n        </>\n      ) : (\n        <div className={styles.noOpenGames}>NO OPEN GAMES</div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}