{"ast":null,"code":"import { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.mjs';\nimport * as React from 'react';\nimport { persistQueryClient } from '@tanstack/query-persist-client-core';\nimport { QueryClientProvider, IsRestoringProvider } from '@tanstack/react-query';\n\nconst PersistQueryClientProvider = _ref => {\n  let {\n    client,\n    children,\n    persistOptions,\n    onSuccess,\n    ...props\n  } = _ref;\n  const [isRestoring, setIsRestoring] = React.useState(true);\n  const refs = React.useRef({\n    persistOptions,\n    onSuccess\n  });\n  React.useEffect(() => {\n    refs.current = {\n      persistOptions,\n      onSuccess\n    };\n  });\n  React.useEffect(() => {\n    let isStale = false;\n    setIsRestoring(true);\n    const [unsubscribe, promise] = persistQueryClient({ ...refs.current.persistOptions,\n      queryClient: client\n    });\n    promise.then(() => {\n      if (!isStale) {\n        refs.current.onSuccess == null ? void 0 : refs.current.onSuccess();\n        setIsRestoring(false);\n      }\n    });\n    return () => {\n      isStale = true;\n      unsubscribe();\n    };\n  }, [client]);\n  return /*#__PURE__*/React.createElement(QueryClientProvider, _extends({\n    client: client\n  }, props), /*#__PURE__*/React.createElement(IsRestoringProvider, {\n    value: isRestoring\n  }, children));\n};\n\nexport { PersistQueryClientProvider };","map":{"version":3,"mappings":";;;;;AAaO,MAAMA,0BAA0B,GAAG,QAMU;AAAA,MANT;AACzCC,UADyC;AAEzCC,YAFyC;AAGzCC,kBAHyC;AAIzCC,aAJyC;AAKzC,OAAGC;AALsC,GAMS;AAClD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCC,KAAK,CAACC,QAAND,CAAe,IAAfA,CAAtC;AACA,QAAME,IAAI,GAAGF,KAAK,CAACG,MAANH,CAAa;AAAEL,kBAAF;AAAkBC;AAAlB,GAAbI,CAAb;AAEAA,OAAK,CAACI,SAANJ,CAAgB,MAAM;AACpBE,QAAI,CAACG,OAALH,GAAe;AAAEP,oBAAF;AAAkBC;AAAlB,KAAfM;AADF;AAIAF,OAAK,CAACI,SAANJ,CAAgB,MAAM;AACpB,QAAIM,OAAO,GAAG,KAAd;AACAP,kBAAc,CAAC,IAAD,CAAdA;AACA,UAAM,CAACQ,WAAD,EAAcC,OAAd,IAAyBC,kBAAkB,CAAC,EAChD,GAAGP,IAAI,CAACG,OAALH,CAAaP,cADgC;AAEhDe,iBAAW,EAAEjB;AAFmC,KAAD,CAAjD;AAKAe,WAAO,CAACG,IAARH,CAAa,MAAM;AACjB,UAAI,CAACF,OAAL,EAAc;AACZJ,YAAI,CAACG,OAALH,CAAaN,SAAbM,wBAAI,CAACG,OAALH,CAAaN,SAAbM;AACAH,sBAAc,CAAC,KAAD,CAAdA;AACD;AAJH;AAOA,WAAO,MAAM;AACXO,aAAO,GAAG,IAAVA;AACAC,iBAAW;AAFb;AAfF,KAmBG,CAACd,MAAD,CAnBHO;AAqBA,sBACEA,oBAACY,mBAAD;AAAqBnB,UAAM,EAAEA;AAA7B,KAAyCI,KAAzC,GACE,iCAACgB,mBAAD;AAAqBC,SAAK,EAAEhB;AAA5B,KAA0CJ,QAA1C,CADF,CADF;AAKD,CAxCM","names":["PersistQueryClientProvider","client","children","persistOptions","onSuccess","props","isRestoring","setIsRestoring","React","useState","refs","useRef","useEffect","current","isStale","unsubscribe","promise","persistQueryClient","queryClient","then","QueryClientProvider","IsRestoringProvider","value"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/react-query-persist-client/src/PersistQueryClientProvider.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport type { PersistQueryClientOptions } from '@tanstack/query-persist-client-core'\nimport { persistQueryClient } from '@tanstack/query-persist-client-core'\nimport type { QueryClientProviderProps } from '@tanstack/react-query'\nimport { QueryClientProvider, IsRestoringProvider } from '@tanstack/react-query'\n\nexport type PersistQueryClientProviderProps = QueryClientProviderProps & {\n  persistOptions: Omit<PersistQueryClientOptions, 'queryClient'>\n  onSuccess?: () => void\n}\n\nexport const PersistQueryClientProvider = ({\n  client,\n  children,\n  persistOptions,\n  onSuccess,\n  ...props\n}: PersistQueryClientProviderProps): JSX.Element => {\n  const [isRestoring, setIsRestoring] = React.useState(true)\n  const refs = React.useRef({ persistOptions, onSuccess })\n\n  React.useEffect(() => {\n    refs.current = { persistOptions, onSuccess }\n  })\n\n  React.useEffect(() => {\n    let isStale = false\n    setIsRestoring(true)\n    const [unsubscribe, promise] = persistQueryClient({\n      ...refs.current.persistOptions,\n      queryClient: client,\n    })\n\n    promise.then(() => {\n      if (!isStale) {\n        refs.current.onSuccess?.()\n        setIsRestoring(false)\n      }\n    })\n\n    return () => {\n      isStale = true\n      unsubscribe()\n    }\n  }, [client])\n\n  return (\n    <QueryClientProvider client={client} {...props}>\n      <IsRestoringProvider value={isRestoring}>{children}</IsRestoringProvider>\n    </QueryClientProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}