{"ast":null,"code":"const removeOldestQuery = _ref => {\n  let {\n    persistedClient\n  } = _ref;\n  const mutations = [...persistedClient.clientState.mutations];\n  const queries = [...persistedClient.clientState.queries];\n  const client = { ...persistedClient,\n    clientState: {\n      mutations,\n      queries\n    }\n  }; // sort queries by dataUpdatedAt (oldest first)\n\n  const sortedQueries = [...queries].sort((a, b) => a.state.dataUpdatedAt - b.state.dataUpdatedAt); // clean oldest query\n\n  if (sortedQueries.length > 0) {\n    const oldestData = sortedQueries.shift();\n    client.clientState.queries = queries.filter(q => q !== oldestData);\n    return client;\n  }\n\n  return undefined;\n};\n\nexport { removeOldestQuery };","map":{"version":3,"mappings":"AAQO,MAAMA,iBAAiC,GAAG,QAAyB;AAAA,MAAxB;AAAEC;AAAF,GAAwB;AACxE,QAAMC,SAAS,GAAG,CAAC,GAAGD,eAAe,CAACE,WAAhBF,CAA4BC,SAAhC,CAAlB;AACA,QAAME,OAAO,GAAG,CAAC,GAAGH,eAAe,CAACE,WAAhBF,CAA4BG,OAAhC,CAAhB;AACA,QAAMC,MAAuB,GAAG,EAC9B,GAAGJ,eAD2B;AAE9BE,eAAW,EAAE;AAAED,eAAF;AAAaE;AAAb;AAFiB,GAAhC,CAHwE;;AASxE,QAAME,aAAa,GAAG,CAAC,GAAGF,OAAJ,EAAaG,IAAb,CACpB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,KAAFF,CAAQG,aAARH,GAAwBC,CAAC,CAACC,KAAFD,CAAQE,aADtB,CAAtB,CATwE;;AAcxE,MAAIL,aAAa,CAACM,MAAdN,GAAuB,CAA3B,EAA8B;AAC5B,UAAMO,UAAU,GAAGP,aAAa,CAACQ,KAAdR,EAAnB;AACAD,UAAM,CAACF,WAAPE,CAAmBD,OAAnBC,GAA6BD,OAAO,CAACW,MAARX,CAAgBY,CAAD,IAAOA,CAAC,KAAKH,UAA5BT,CAA7BC;AACA,WAAOA,MAAP;AACD;;AAED,SAAOY,SAAP;AACD,CArBM","names":["removeOldestQuery","persistedClient","mutations","clientState","queries","client","sortedQueries","sort","a","b","state","dataUpdatedAt","length","oldestData","shift","filter","q","undefined"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/query-persist-client-core/src/retryStrategies.ts"],"sourcesContent":["import type { PersistedClient } from '@tanstack/query-persist-client-core'\n\nexport type PersistRetryer = (props: {\n  persistedClient: PersistedClient\n  error: Error\n  errorCount: number\n}) => PersistedClient | undefined\n\nexport const removeOldestQuery: PersistRetryer = ({ persistedClient }) => {\n  const mutations = [...persistedClient.clientState.mutations]\n  const queries = [...persistedClient.clientState.queries]\n  const client: PersistedClient = {\n    ...persistedClient,\n    clientState: { mutations, queries },\n  }\n\n  // sort queries by dataUpdatedAt (oldest first)\n  const sortedQueries = [...queries].sort(\n    (a, b) => a.state.dataUpdatedAt - b.state.dataUpdatedAt,\n  )\n\n  // clean oldest query\n  if (sortedQueries.length > 0) {\n    const oldestData = sortedQueries.shift()\n    client.clientState.queries = queries.filter((q) => q !== oldestData)\n    return client\n  }\n\n  return undefined\n}\n"]},"metadata":{},"sourceType":"module"}