{"ast":null,"code":"import { hashQueryKeyByOptions, parseFilterArgs, matchQuery } from './utils.mjs';\nimport { Query } from './query.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs'; // CLASS\n\nclass QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}\n\nexport { QueryCache };","map":{"version":3,"mappings":";;;mDAuEA;;AAEO,MAAMA,UAAN,SAAyBC,YAAzB,CAA0D;AAM/DC,aAAW,CAACC,MAAD,EAA4B;AACrC;AACA,SAAKA,MAAL,GAAcA,MAAM,IAAI,EAAxB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACD;;AAEDC,OAAK,CACHC,MADG,EAEHC,OAFG,EAGHC,KAHG,EAI4C;AAAA;;AAC/C,UAAMC,QAAQ,GAAGF,OAAO,CAACE,QAAzB;AACA,UAAMC,SAAS,GACbH,6BAAO,CAACG,SAARH,KAAqBI,IAArBJ,GAAqBI,kBAArBJ,GAAqBI,qBAAqB,CAACF,QAAD,EAAWF,OAAX,CAD5C;AAEA,QAAIK,KAAK,GAAG,KAAKC,GAAL,CAAiDH,SAAjD,CAAZ;;AAEA,QAAI,CAACE,KAAL,EAAY;AACVA,WAAK,GAAG,IAAIE,KAAJ,CAAU;AAChBC,aAAK,EAAE,IADS;AAEhBC,cAAM,EAAEV,MAAM,CAACW,SAAPX,EAFQ;AAGhBG,gBAHgB;AAIhBC,iBAJgB;AAKhBH,eAAO,EAAED,MAAM,CAACY,mBAAPZ,CAA2BC,OAA3BD,CALO;AAMhBE,aANgB;AAOhBW,sBAAc,EAAEb,MAAM,CAACc,gBAAPd,CAAwBG,QAAxBH;AAPA,OAAV,CAARM;AASA,WAAKS,GAAL,CAAST,KAAT;AACD;;AAED,WAAOA,KAAP;AACD;;AAEDS,KAAG,CAACT,KAAD,EAAyC;AAC1C,QAAI,CAAC,KAAKR,UAAL,CAAgBQ,KAAK,CAACF,SAAtB,CAAL,EAAuC;AACrC,WAAKN,UAAL,CAAgBQ,KAAK,CAACF,SAAtB,IAAmCE,KAAnC;AACA,WAAKT,OAAL,CAAamB,IAAb,CAAkBV,KAAlB;AACA,WAAKW,MAAL,CAAY;AACVC,YAAI,EAAE,OADI;AAEVZ;AAFU,OAAZ;AAID;AACF;;AAEDa,QAAM,CAACb,KAAD,EAAyC;AAC7C,UAAMc,UAAU,GAAG,KAAKtB,UAAL,CAAgBQ,KAAK,CAACF,SAAtB,CAAnB;;AAEA,QAAIgB,UAAJ,EAAgB;AACdd,WAAK,CAACe,OAANf;AAEA,WAAKT,OAAL,GAAe,KAAKA,OAAL,CAAayB,MAAb,CAAqBC,CAAD,IAAOA,CAAC,KAAKjB,KAAjC,CAAf;;AAEA,UAAIc,UAAU,KAAKd,KAAnB,EAA0B;AACxB,eAAO,KAAKR,UAAL,CAAgBQ,KAAK,CAACF,SAAtB,CAAP;AACD;;AAED,WAAKa,MAAL,CAAY;AAAEC,YAAI,EAAE,SAAR;AAAmBZ;AAAnB,OAAZ;AACD;AACF;;AAEDkB,OAAK,GAAS;AACZC,iBAAa,CAACC,KAAdD,CAAoB,MAAM;AACxB,WAAK5B,OAAL,CAAa8B,OAAb,CAAsBrB,KAAD,IAAW;AAC9B,aAAKa,MAAL,CAAYb,KAAZ;AADF;AADF;AAKD;;AAEDC,KAAG,CAMDH,SANC,EAOyD;AAC1D,WAAO,KAAKN,UAAL,CAAgBM,SAAhB,CAAP;AACD;;AAEDwB,QAAM,GAAY;AAChB,WAAO,KAAK/B,OAAZ;AACD;;AAEDgC,MAAI,CACFC,IADE,EAEFC,IAFE,EAG8C;AAChD,UAAM,CAACC,OAAD,IAAYC,eAAe,CAACH,IAAD,EAAOC,IAAP,CAAjC;;AAEA,QAAI,OAAOC,OAAO,CAACE,KAAf,KAAyB,WAA7B,EAA0C;AACxCF,aAAO,CAACE,KAARF,GAAgB,IAAhBA;AACD;;AAED,WAAO,KAAKnC,OAAL,CAAagC,IAAb,CAAmBvB,KAAD,IAAW6B,UAAU,CAACH,OAAD,EAAU1B,KAAV,CAAvC,CAAP;AACD;;AAKD8B,SAAO,CAACN,IAAD,EAAiCC,IAAjC,EAA+D;AACpE,UAAM,CAACC,OAAD,IAAYC,eAAe,CAACH,IAAD,EAAOC,IAAP,CAAjC;AACA,WAAOM,MAAM,CAACC,IAAPD,CAAYL,OAAZK,EAAqBE,MAArBF,GAA8B,CAA9BA,GACH,KAAKxC,OAAL,CAAayB,MAAb,CAAqBhB,KAAD,IAAW6B,UAAU,CAACH,OAAD,EAAU1B,KAAV,CAAzC,CADG+B,GAEH,KAAKxC,OAFT;AAGD;;AAEDoB,QAAM,CAACuB,KAAD,EAA+B;AACnCf,iBAAa,CAACC,KAAdD,CAAoB,MAAM;AACxB,WAAKgB,SAAL,CAAed,OAAf,CAAwBe,QAAD,IAAc;AACnCA,gBAAQ,CAACF,KAAD,CAARE;AADF;AADF;AAKD;;AAEDC,SAAO,GAAS;AACdlB,iBAAa,CAACC,KAAdD,CAAoB,MAAM;AACxB,WAAK5B,OAAL,CAAa8B,OAAb,CAAsBrB,KAAD,IAAW;AAC9BA,aAAK,CAACqC,OAANrC;AADF;AADF;AAKD;;AAEDsC,UAAQ,GAAS;AACfnB,iBAAa,CAACC,KAAdD,CAAoB,MAAM;AACxB,WAAK5B,OAAL,CAAa8B,OAAb,CAAsBrB,KAAD,IAAW;AAC9BA,aAAK,CAACsC,QAANtC;AADF;AADF;AAKD;;AAtI8D","names":["QueryCache","Subscribable","constructor","config","queries","queriesMap","build","client","options","state","queryKey","queryHash","hashQueryKeyByOptions","query","get","Query","cache","logger","getLogger","defaultQueryOptions","defaultOptions","getQueryDefaults","add","push","notify","type","remove","queryInMap","destroy","filter","x","clear","notifyManager","batch","forEach","getAll","find","arg1","arg2","filters","parseFilterArgs","exact","matchQuery","findAll","Object","keys","length","event","listeners","listener","onFocus","onOnline"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/query-core/src/queryCache.ts"],"sourcesContent":["import type { QueryFilters } from './utils'\nimport { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from './utils'\nimport type { Action, QueryState } from './query'\nimport { Query } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter((x) => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find((query) => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter((query) => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}