{"ast":null,"code":"\"use strict\";\n\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // These are load-balancer-based application IDs\n\nconst defaultApplicationIds = {\n  homestead: \"6004bcd10040261633ade990\",\n  ropsten: \"6004bd4d0040261633ade991\",\n  rinkeby: \"6004bda20040261633ade994\",\n  goerli: \"6004bd860040261633ade992\"\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n  constructor(network, apiKey) {\n    // We need a bit of creativity in the constructor because\n    // Pocket uses different default API keys based on the network\n    if (apiKey == null) {\n      const n = getStatic(new.target, \"getNetwork\")(network);\n\n      if (n) {\n        const applicationId = defaultApplicationIds[n.name];\n\n        if (applicationId) {\n          apiKey = {\n            applicationId: applicationId,\n            loadBalancer: true\n          };\n        }\n      } // If there was any issue above, we don't know this network\n\n\n      if (apiKey == null) {\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n      }\n    }\n\n    super(network, apiKey);\n  }\n\n  static getApiKey(apiKey) {\n    // Most API Providers allow null to get the default configuration, but\n    // Pocket requires the network to decide the default provider, so we\n    // rely on hijacking the constructor to add a sensible default for us\n    if (apiKey == null) {\n      logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n    }\n\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: false,\n      applicationSecretKey: null\n    }; // Parse applicationId and applicationSecretKey\n\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n      logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else if (apiKey.applicationId) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n\n    return apiKeyObj;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n\n    let url = null;\n\n    if (apiKey.loadBalancer) {\n      url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    } else {\n      url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n    }\n\n    const connection = {\n      url\n    }; // Initialize empty headers\n\n    connection.headers = {}; // Apply application secret key\n\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n\n    return connection;\n  }\n\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationIds[this.network.name];\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getStatic","Logger","version","logger","UrlJsonRpcProvider","defaultApplicationIds","homestead","ropsten","rinkeby","goerli","PocketProvider","constructor","network","apiKey","n","new","target","applicationId","name","loadBalancer","throwError","errors","INVALID_ARGUMENT","argument","value","getApiKey","throwArgumentError","apiKeyObj","applicationSecretKey","assertArgument","getUrl","host","url","connection","headers","user","password","isCommunityResource"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/providers/src.ts/pocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// These are load-balancer-based application IDs\nconst defaultApplicationIds: Record<string, string> = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n\n        if (apiKey == null) {\n            const n = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n\n        }\n\n        super(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"),\n                \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n        } else {\n            url = `https:/\\/${ host }/v1/${ apiKey.applicationId }`\n        }\n\n        const connection: ConnectionInfo = { url };\n\n        // Initialize empty headers\n        connection.headers = {}\n\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}