{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new InfuraProvider(network, apiKey);\n    const connection = provider.connection;\n\n    if (connection.password) {\n      logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"InfuraProvider.getWebSocketProvider()\"\n      });\n    }\n\n    const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    super(url, network);\n    defineReadOnly(this, \"apiKey\", provider.projectId);\n    defineReadOnly(this, \"projectId\", provider.projectId);\n    defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n  }\n\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new InfuraWebSocketProvider(network, apiKey);\n  }\n\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      apiKey: defaultProjectId,\n      projectId: defaultProjectId,\n      projectSecret: null\n    };\n\n    if (apiKey == null) {\n      return apiKeyObj;\n    }\n\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.projectId = apiKey;\n    } else if (apiKey.projectSecret != null) {\n      logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n      logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n      apiKeyObj.projectId = apiKey.projectId;\n      apiKeyObj.projectSecret = apiKey.projectSecret;\n    } else if (apiKey.projectId) {\n      apiKeyObj.projectId = apiKey.projectId;\n    }\n\n    apiKeyObj.apiKey = apiKeyObj.projectId;\n    return apiKeyObj;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"mainnet.infura.io\";\n        break;\n\n      case \"ropsten\":\n        host = \"ropsten.infura.io\";\n        break;\n\n      case \"rinkeby\":\n        host = \"rinkeby.infura.io\";\n        break;\n\n      case \"kovan\":\n        host = \"kovan.infura.io\";\n        break;\n\n      case \"goerli\":\n        host = \"goerli.infura.io\";\n        break;\n\n      case \"matic\":\n        host = \"polygon-mainnet.infura.io\";\n        break;\n\n      case \"maticmum\":\n        host = \"polygon-mumbai.infura.io\";\n        break;\n\n      case \"optimism\":\n        host = \"optimism-mainnet.infura.io\";\n        break;\n\n      case \"optimism-kovan\":\n        host = \"optimism-kovan.infura.io\";\n        break;\n\n      case \"arbitrum\":\n        host = \"arbitrum-mainnet.infura.io\";\n        break;\n\n      case \"arbitrum-rinkeby\":\n        host = \"arbitrum-rinkeby.infura.io\";\n        break;\n\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n\n    const connection = {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n      throttleCallback: (attempt, url) => {\n        if (apiKey.projectId === defaultProjectId) {\n          showThrottleMessage();\n        }\n\n        return Promise.resolve(true);\n      }\n    };\n\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n\n    return connection;\n  }\n\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["defineReadOnly","WebSocketProvider","showThrottleMessage","Logger","version","logger","UrlJsonRpcProvider","defaultProjectId","InfuraWebSocketProvider","constructor","network","apiKey","provider","InfuraProvider","connection","password","throwError","errors","UNSUPPORTED_OPERATION","operation","url","replace","projectId","projectSecret","isCommunityResource","getWebSocketProvider","getApiKey","apiKeyObj","assertArgument","getUrl","host","name","INVALID_ARGUMENT","argument","value","allowGzip","throttleCallback","attempt","Promise","resolve","user"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/providers/src.ts/infura-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}