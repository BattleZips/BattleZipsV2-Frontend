{"ast":null,"code":"\"use strict\";\n\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst names = [\"wei\", \"kwei\", \"mwei\", \"gwei\", \"szabo\", \"finney\", \"ether\"]; // Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\n\nexport function commify(value) {\n  const comps = String(value).split(\".\");\n\n  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === \".\" || value === \"-.\") {\n    logger.throwArgumentError(\"invalid value\", \"value\", value);\n  } // Make sure we have at least one whole digit (0 if none)\n\n\n  let whole = comps[0];\n  let negative = \"\";\n\n  if (whole.substring(0, 1) === \"-\") {\n    negative = \"-\";\n    whole = whole.substring(1);\n  } // Make sure we have at least 1 whole digit with no leading zeros\n\n\n  while (whole.substring(0, 1) === \"0\") {\n    whole = whole.substring(1);\n  }\n\n  if (whole === \"\") {\n    whole = \"0\";\n  }\n\n  let suffix = \"\";\n\n  if (comps.length === 2) {\n    suffix = \".\" + (comps[1] || \"0\");\n  }\n\n  while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n    suffix = suffix.substring(0, suffix.length - 1);\n  }\n\n  const formatted = [];\n\n  while (whole.length) {\n    if (whole.length <= 3) {\n      formatted.unshift(whole);\n      break;\n    } else {\n      const index = whole.length - 3;\n      formatted.unshift(whole.substring(index));\n      whole = whole.substring(0, index);\n    }\n  }\n\n  return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n  if (typeof unitName === \"string\") {\n    const index = names.indexOf(unitName);\n\n    if (index !== -1) {\n      unitName = 3 * index;\n    }\n  }\n\n  return formatFixed(value, unitName != null ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n  if (typeof value !== \"string\") {\n    logger.throwArgumentError(\"value must be a string\", \"value\", value);\n  }\n\n  if (typeof unitName === \"string\") {\n    const index = names.indexOf(unitName);\n\n    if (index !== -1) {\n      unitName = 3 * index;\n    }\n  }\n\n  return parseFixed(value, unitName != null ? unitName : 18);\n}\nexport function formatEther(wei) {\n  return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n  return parseUnits(ether, 18);\n}","map":{"version":3,"mappings":"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","names":["formatFixed","parseFixed","Logger","version","logger","names","commify","value","comps","String","split","length","match","throwArgumentError","whole","negative","substring","suffix","formatted","unshift","index","join","formatUnits","unitName","indexOf","parseUnits","formatEther","wei","parseEther","ether"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/units/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n\n\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value: string | number): string {\n    const comps = String(value).split(\".\");\n\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") { whole = whole.substring(1); }\n    if (whole === \"\") { whole = \"0\"; }\n\n    let suffix = \"\";\n    if (comps.length === 2) { suffix = \".\" + (comps[1] || \"0\"); }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        } else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n\n    return negative + formatted.join(\",\") + suffix;\n}\n\nexport function formatUnits(value: BigNumberish, unitName?: string | BigNumberish): string {\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return formatFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function parseUnits(value: string, unitName?: BigNumberish): BigNumber {\n    if (typeof(value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return parseFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function formatEther(wei: BigNumberish): string {\n    return formatUnits(wei, 18);\n}\n\nexport function parseEther(ether: string): BigNumber {\n    return parseUnits(ether, 18);\n}\n\n"]},"metadata":{},"sourceType":"module"}