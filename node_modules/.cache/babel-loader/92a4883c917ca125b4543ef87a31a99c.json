{"ast":null,"code":"/**\n * Generates a fixed-time promise to delay execution of subsequent actions \n * \n * @param {number} ms - number of millesecond to delay \n * @returns {Promise<unknown>} - promise that will resolve in fixed time\n */\nexport const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n/**\n * Generate a random number inside a specified range\n * \n * @param {number} min - range minimum \n * @param {number} max - range maximum \n * @returns {number} - random number\n */\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n/**\n * Shorten ethereum address to provide cleaner display format\n * \n * @param {string | null | undefined} address - ethereum address \n * @param {string |null | underfined } ensName - ens name if one exists \n * @param {number} chars - number of address characters to display on each side of splice\n * @returns {string} - shortened address\n */\n\nexport const formatAddress = function (address, ensName) {\n  let chars = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n  if (ensName) return ensName;else if (address) return `${address.substring(0, chars + 2).toLowerCase()}...${address.substring(42 - chars)}`;else return '';\n};","map":{"version":3,"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/src/utils/index.ts"],"names":["delay","ms","Promise","resolve","setTimeout","getRandomInt","min","max","Math","ceil","floor","random","formatAddress","address","ensName","chars","substring","toLowerCase"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,KAAK,GAAIC,EAAD,IACjB,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CADG;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,YAAY,GAAG,CAACC,GAAD,EAAcC,GAAd,KAAsC;AAC9DD,EAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,SAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACH,CAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,aAAa,GAAG,UACzBC,OADyB,EAEzBC,OAFyB,EAIhB;AAAA,MADTC,KACS,uEADD,CACC;AACT,MAAID,OAAJ,EAAa,OAAOA,OAAP,CAAb,KACK,IAAID,OAAJ,EACD,OAAQ,GAAEA,OAAO,CACZG,SADK,CACK,CADL,EACQD,KAAK,GAAG,CADhB,EAELE,WAFK,EAES,MAAKJ,OAAO,CAACG,SAAR,CAAkB,KAAKD,KAAvB,CAA8B,EAFtD,CADC,KAIA,OAAO,EAAP;AACR,CAXM","sourcesContent":["/**\n * Generates a fixed-time promise to delay execution of subsequent actions \n * \n * @param {number} ms - number of millesecond to delay \n * @returns {Promise<unknown>} - promise that will resolve in fixed time\n */\nexport const delay = (ms: number): Promise<unknown> =>\n    new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Generate a random number inside a specified range\n * \n * @param {number} min - range minimum \n * @param {number} max - range maximum \n * @returns {number} - random number\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Shorten ethereum address to provide cleaner display format\n * \n * @param {string | null | undefined} address - ethereum address \n * @param {string |null | underfined } ensName - ens name if one exists \n * @param {number} chars - number of address characters to display on each side of splice\n * @returns {string} - shortened address\n */\nexport const formatAddress = (\n    address: string | null | undefined,\n    ensName: string | null | undefined,\n    chars = 4\n): string => {\n    if (ensName) return ensName;\n    else if (address)\n        return `${address\n            .substring(0, chars + 2)\n            .toLowerCase()}...${address.substring(42 - chars)}`;\n    else return '';\n}"]},"metadata":{},"sourceType":"module"}