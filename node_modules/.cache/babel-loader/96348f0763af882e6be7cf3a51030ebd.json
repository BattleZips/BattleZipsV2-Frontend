{"ast":null,"code":"const reduxImpl = (reducer, initial) => (set, _get, api) => {\n  api.dispatch = action => {\n    set(state => reducer(state, action), false, action);\n    return action;\n  };\n\n  api.dispatchFromDevtools = true;\n  return {\n    dispatch: function () {\n      return api.dispatch(...arguments);\n    },\n    ...initial\n  };\n};\n\nconst redux = reduxImpl;\nconst trackedConnections = /* @__PURE__ */new Map();\n\nconst getTrackedConnectionState = name => {\n  const api = trackedConnections.get(name);\n  if (!api) return {};\n  return Object.fromEntries(Object.entries(api.stores).map(_ref => {\n    let [key, api2] = _ref;\n    return [key, api2.getState()];\n  }));\n};\n\nconst extractConnectionInformation = (store, extensionConnector, options) => {\n  if (store === void 0) {\n    return {\n      type: \"untracked\",\n      connection: extensionConnector.connect(options)\n    };\n  }\n\n  const existingConnection = trackedConnections.get(options.name);\n\n  if (existingConnection) {\n    return {\n      type: \"tracked\",\n      store,\n      ...existingConnection\n    };\n  }\n\n  const newConnection = {\n    connection: extensionConnector.connect(options),\n    stores: {}\n  };\n  trackedConnections.set(options.name, newConnection);\n  return {\n    type: \"tracked\",\n    store,\n    ...newConnection\n  };\n};\n\nconst devtoolsImpl = function (fn) {\n  let devtoolsOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return (set, get, api) => {\n    const {\n      enabled,\n      anonymousActionType,\n      store,\n      ...options\n    } = devtoolsOptions;\n    let extensionConnector;\n\n    try {\n      extensionConnector = (enabled != null ? enabled : (import.meta.env && import.meta.env.MODE) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n    } catch (e) {}\n\n    if (!extensionConnector) {\n      if ((import.meta.env && import.meta.env.MODE) !== \"production\" && enabled) {\n        console.warn(\"[zustand devtools middleware] Please install/enable Redux devtools extension\");\n      }\n\n      return fn(set, get, api);\n    }\n\n    const {\n      connection,\n      ...connectionInformation\n    } = extractConnectionInformation(store, extensionConnector, options);\n    let isRecording = true;\n\n    api.setState = (state, replace, nameOrAction) => {\n      const r = set(state, replace);\n      if (!isRecording) return r;\n      const action = nameOrAction === void 0 ? {\n        type: anonymousActionType || \"anonymous\"\n      } : typeof nameOrAction === \"string\" ? {\n        type: nameOrAction\n      } : nameOrAction;\n\n      if (store === void 0) {\n        connection == null ? void 0 : connection.send(action, get());\n        return r;\n      }\n\n      connection == null ? void 0 : connection.send({ ...action,\n        type: `${store}/${action.type}`\n      }, { ...getTrackedConnectionState(options.name),\n        [store]: api.getState()\n      });\n      return r;\n    };\n\n    const setStateFromDevtools = function () {\n      const originalIsRecording = isRecording;\n      isRecording = false;\n      set(...arguments);\n      isRecording = originalIsRecording;\n    };\n\n    const initialState = fn(api.setState, get, api);\n\n    if (connectionInformation.type === \"untracked\") {\n      connection == null ? void 0 : connection.init(initialState);\n    } else {\n      connectionInformation.stores[connectionInformation.store] = api;\n      connection == null ? void 0 : connection.init(Object.fromEntries(Object.entries(connectionInformation.stores).map(_ref2 => {\n        let [key, store2] = _ref2;\n        return [key, key === connectionInformation.store ? initialState : store2.getState()];\n      })));\n    }\n\n    if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\n      let didWarnAboutReservedActionType = false;\n      const originalDispatch = api.dispatch;\n\n      api.dispatch = function () {\n        for (var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++) {\n          a[_key] = arguments[_key];\n        }\n\n        if ((import.meta.env && import.meta.env.MODE) !== \"production\" && a[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\n          console.warn('[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.');\n          didWarnAboutReservedActionType = true;\n        }\n\n        originalDispatch(...a);\n      };\n    }\n\n    connection.subscribe(message => {\n      var _a;\n\n      switch (message.type) {\n        case \"ACTION\":\n          if (typeof message.payload !== \"string\") {\n            console.error(\"[zustand devtools middleware] Unsupported action format\");\n            return;\n          }\n\n          return parseJsonThen(message.payload, action => {\n            if (action.type === \"__setState\") {\n              if (store === void 0) {\n                setStateFromDevtools(action.state);\n                return;\n              }\n\n              if (Object.keys(action.state).length !== 1) {\n                console.error(`\n                    [zustand devtools middleware] Unsupported __setState action format. \n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\n                    `);\n              }\n\n              const stateFromDevtools = action.state[store];\n\n              if (stateFromDevtools === void 0 || stateFromDevtools === null) {\n                return;\n              }\n\n              if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {\n                setStateFromDevtools(stateFromDevtools);\n              }\n\n              return;\n            }\n\n            if (!api.dispatchFromDevtools) return;\n            if (typeof api.dispatch !== \"function\") return;\n            api.dispatch(action);\n          });\n\n        case \"DISPATCH\":\n          switch (message.payload.type) {\n            case \"RESET\":\n              setStateFromDevtools(initialState);\n\n              if (store === void 0) {\n                return connection == null ? void 0 : connection.init(api.getState());\n              }\n\n              return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n\n            case \"COMMIT\":\n              if (store === void 0) {\n                connection == null ? void 0 : connection.init(api.getState());\n                return;\n              }\n\n              return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n\n            case \"ROLLBACK\":\n              return parseJsonThen(message.state, state => {\n                if (store === void 0) {\n                  setStateFromDevtools(state);\n                  connection == null ? void 0 : connection.init(api.getState());\n                  return;\n                }\n\n                setStateFromDevtools(state[store]);\n                connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n              });\n\n            case \"JUMP_TO_STATE\":\n            case \"JUMP_TO_ACTION\":\n              return parseJsonThen(message.state, state => {\n                if (store === void 0) {\n                  setStateFromDevtools(state);\n                  return;\n                }\n\n                if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {\n                  setStateFromDevtools(state[store]);\n                }\n              });\n\n            case \"IMPORT_STATE\":\n              {\n                const {\n                  nextLiftedState\n                } = message.payload;\n                const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;\n                if (!lastComputedState) return;\n\n                if (store === void 0) {\n                  setStateFromDevtools(lastComputedState);\n                } else {\n                  setStateFromDevtools(lastComputedState[store]);\n                }\n\n                connection == null ? void 0 : connection.send(null, // FIXME no-any\n                nextLiftedState);\n                return;\n              }\n\n            case \"PAUSE_RECORDING\":\n              return isRecording = !isRecording;\n          }\n\n          return;\n      }\n    });\n    return initialState;\n  };\n};\n\nconst devtools = devtoolsImpl;\n\nconst parseJsonThen = (stringified, f) => {\n  let parsed;\n\n  try {\n    parsed = JSON.parse(stringified);\n  } catch (e) {\n    console.error(\"[zustand devtools middleware] Could not parse the received json\", e);\n  }\n\n  if (parsed !== void 0) f(parsed);\n};\n\nconst subscribeWithSelectorImpl = fn => (set, get, api) => {\n  const origSubscribe = api.subscribe;\n\n  api.subscribe = (selector, optListener, options) => {\n    let listener = selector;\n\n    if (optListener) {\n      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\n      let currentSlice = selector(api.getState());\n\n      listener = state => {\n        const nextSlice = selector(state);\n\n        if (!equalityFn(currentSlice, nextSlice)) {\n          const previousSlice = currentSlice;\n          optListener(currentSlice = nextSlice, previousSlice);\n        }\n      };\n\n      if (options == null ? void 0 : options.fireImmediately) {\n        optListener(currentSlice, currentSlice);\n      }\n    }\n\n    return origSubscribe(listener);\n  };\n\n  const initialState = fn(set, get, api);\n  return initialState;\n};\n\nconst subscribeWithSelector = subscribeWithSelectorImpl;\n\nconst combine = (initialState, create) => function () {\n  return Object.assign({}, initialState, create(...arguments));\n};\n\nfunction createJSONStorage(getStorage) {\n  let storage;\n\n  try {\n    storage = getStorage();\n  } catch (e) {\n    return;\n  }\n\n  const persistStorage = {\n    getItem: name => {\n      var _a;\n\n      const parse = str2 => {\n        if (str2 === null) {\n          return null;\n        }\n\n        return JSON.parse(str2);\n      };\n\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\n\n      if (str instanceof Promise) {\n        return str.then(parse);\n      }\n\n      return parse(str);\n    },\n    setItem: (name, newValue) => storage.setItem(name, JSON.stringify(newValue)),\n    removeItem: name => storage.removeItem(name)\n  };\n  return persistStorage;\n}\n\nconst toThenable = fn => input => {\n  try {\n    const result = fn(input);\n\n    if (result instanceof Promise) {\n      return result;\n    }\n\n    return {\n      then(onFulfilled) {\n        return toThenable(onFulfilled)(result);\n      },\n\n      catch(_onRejected) {\n        return this;\n      }\n\n    };\n  } catch (e) {\n    return {\n      then(_onFulfilled) {\n        return this;\n      },\n\n      catch(onRejected) {\n        return toThenable(onRejected)(e);\n      }\n\n    };\n  }\n};\n\nconst oldImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    getStorage: () => localStorage,\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n    partialize: state => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({ ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */new Set();\n  const finishHydrationListeners = /* @__PURE__ */new Set();\n  let storage;\n\n  try {\n    storage = options.getStorage();\n  } catch (e) {}\n\n  if (!storage) {\n    return config(function () {\n      console.warn(`[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`);\n      set(...arguments);\n    }, get, api);\n  }\n\n  const thenableSerialize = toThenable(options.serialize);\n\n  const setItem = () => {\n    const state = options.partialize({ ...get()\n    });\n    let errorInSync;\n    const thenable = thenableSerialize({\n      state,\n      version: options.version\n    }).then(serializedValue => storage.setItem(options.name, serializedValue)).catch(e => {\n      errorInSync = e;\n    });\n\n    if (errorInSync) {\n      throw errorInSync;\n    }\n\n    return thenable;\n  };\n\n  const savedSetState = api.setState;\n\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n\n  const configResult = config(function () {\n    set(...arguments);\n    void setItem();\n  }, get, api);\n  let stateFromStorage;\n\n  const hydrate = () => {\n    var _a;\n\n    if (!storage) return;\n    hasHydrated = false;\n    hydrationListeners.forEach(cb => cb(get()));\n    const postRehydrationCallback = ((_a = options.onRehydrateStorage) == null ? void 0 : _a.call(options, get())) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then(storageValue => {\n      if (storageValue) {\n        return options.deserialize(storageValue);\n      }\n    }).then(deserializedStorageValue => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return options.migrate(deserializedStorageValue.state, deserializedStorageValue.version);\n          }\n\n          console.error(`State loaded from storage couldn't be migrated since no migrate function was provided`);\n        } else {\n          return deserializedStorageValue.state;\n        }\n      }\n    }).then(migratedState => {\n      var _a2;\n\n      stateFromStorage = options.merge(migratedState, (_a2 = get()) != null ? _a2 : configResult);\n      set(stateFromStorage, true);\n      return setItem();\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      hasHydrated = true;\n      finishHydrationListeners.forEach(cb => cb(stateFromStorage));\n    }).catch(e => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n\n  api.persist = {\n    setOptions: newOptions => {\n      options = { ...options,\n        ...newOptions\n      };\n\n      if (newOptions.getStorage) {\n        storage = newOptions.getStorage();\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: cb => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: cb => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  hydrate();\n  return stateFromStorage || configResult;\n};\n\nconst newImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    storage: createJSONStorage(() => localStorage),\n    partialize: state => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({ ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */new Set();\n  const finishHydrationListeners = /* @__PURE__ */new Set();\n  let storage = options.storage;\n\n  if (!storage) {\n    return config(function () {\n      console.warn(`[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`);\n      set(...arguments);\n    }, get, api);\n  }\n\n  const setItem = () => {\n    const state = options.partialize({ ...get()\n    });\n    return storage.setItem(options.name, {\n      state,\n      version: options.version\n    });\n  };\n\n  const savedSetState = api.setState;\n\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n\n  const configResult = config(function () {\n    set(...arguments);\n    void setItem();\n  }, get, api);\n  let stateFromStorage;\n\n  const hydrate = () => {\n    var _a;\n\n    if (!storage) return;\n    hasHydrated = false;\n    hydrationListeners.forEach(cb => cb(get()));\n    const postRehydrationCallback = ((_a = options.onRehydrateStorage) == null ? void 0 : _a.call(options, get())) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then(deserializedStorageValue => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return options.migrate(deserializedStorageValue.state, deserializedStorageValue.version);\n          }\n\n          console.error(`State loaded from storage couldn't be migrated since no migrate function was provided`);\n        } else {\n          return deserializedStorageValue.state;\n        }\n      }\n    }).then(migratedState => {\n      var _a2;\n\n      stateFromStorage = options.merge(migratedState, (_a2 = get()) != null ? _a2 : configResult);\n      set(stateFromStorage, true);\n      return setItem();\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      hasHydrated = true;\n      finishHydrationListeners.forEach(cb => cb(stateFromStorage));\n    }).catch(e => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n\n  api.persist = {\n    setOptions: newOptions => {\n      options = { ...options,\n        ...newOptions\n      };\n\n      if (newOptions.storage) {\n        storage = newOptions.storage;\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: cb => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: cb => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  hydrate();\n  return stateFromStorage || configResult;\n};\n\nconst persistImpl = (config, baseOptions) => {\n  if (\"getStorage\" in baseOptions || \"serialize\" in baseOptions || \"deserialize\" in baseOptions) {\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n      console.warn(\"[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Please use `storage` option instead.\");\n    }\n\n    return oldImpl(config, baseOptions);\n  }\n\n  return newImpl(config, baseOptions);\n};\n\nconst persist = persistImpl;\nexport { combine, createJSONStorage, devtools, persist, redux, subscribeWithSelector };","map":{"version":3,"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/zustand/esm/middleware.mjs"],"names":["reduxImpl","reducer","initial","set","_get","api","dispatch","action","state","dispatchFromDevtools","redux","trackedConnections","Map","getTrackedConnectionState","name","get","Object","fromEntries","entries","stores","map","key","api2","getState","extractConnectionInformation","store","extensionConnector","options","type","connection","connect","existingConnection","newConnection","devtoolsImpl","fn","devtoolsOptions","enabled","anonymousActionType","import","meta","env","MODE","window","__REDUX_DEVTOOLS_EXTENSION__","e","console","warn","connectionInformation","isRecording","setState","replace","nameOrAction","r","send","setStateFromDevtools","originalIsRecording","initialState","init","store2","didWarnAboutReservedActionType","originalDispatch","a","subscribe","message","_a","payload","error","parseJsonThen","keys","length","stateFromDevtools","JSON","stringify","nextLiftedState","lastComputedState","computedStates","slice","devtools","stringified","f","parsed","parse","subscribeWithSelectorImpl","origSubscribe","selector","optListener","listener","equalityFn","is","currentSlice","nextSlice","previousSlice","fireImmediately","subscribeWithSelector","combine","create","assign","createJSONStorage","getStorage","storage","persistStorage","getItem","str2","str","Promise","then","setItem","newValue","removeItem","toThenable","input","result","onFulfilled","catch","_onRejected","_onFulfilled","onRejected","oldImpl","config","baseOptions","localStorage","serialize","deserialize","partialize","version","merge","persistedState","currentState","hasHydrated","hydrationListeners","Set","finishHydrationListeners","thenableSerialize","errorInSync","thenable","serializedValue","savedSetState","configResult","stateFromStorage","hydrate","forEach","cb","postRehydrationCallback","onRehydrateStorage","call","bind","storageValue","deserializedStorageValue","migrate","migratedState","_a2","persist","setOptions","newOptions","clearStorage","getOptions","rehydrate","onHydrate","add","delete","onFinishHydration","newImpl","persistImpl"],"mappings":"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","sourcesContent":["const reduxImpl = (reducer, initial) => (set, _get, api) => {\n  api.dispatch = (action) => {\n    set((state) => reducer(state, action), false, action);\n    return action;\n  };\n  api.dispatchFromDevtools = true;\n  return { dispatch: (...a) => api.dispatch(...a), ...initial };\n};\nconst redux = reduxImpl;\n\nconst trackedConnections = /* @__PURE__ */ new Map();\nconst getTrackedConnectionState = (name) => {\n  const api = trackedConnections.get(name);\n  if (!api)\n    return {};\n  return Object.fromEntries(\n    Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])\n  );\n};\nconst extractConnectionInformation = (store, extensionConnector, options) => {\n  if (store === void 0) {\n    return {\n      type: \"untracked\",\n      connection: extensionConnector.connect(options)\n    };\n  }\n  const existingConnection = trackedConnections.get(options.name);\n  if (existingConnection) {\n    return { type: \"tracked\", store, ...existingConnection };\n  }\n  const newConnection = {\n    connection: extensionConnector.connect(options),\n    stores: {}\n  };\n  trackedConnections.set(options.name, newConnection);\n  return { type: \"tracked\", store, ...newConnection };\n};\nconst devtoolsImpl = (fn, devtoolsOptions = {}) => (set, get, api) => {\n  const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;\n  let extensionConnector;\n  try {\n    extensionConnector = (enabled != null ? enabled : (import.meta.env && import.meta.env.MODE) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n  } catch (e) {\n  }\n  if (!extensionConnector) {\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\" && enabled) {\n      console.warn(\n        \"[zustand devtools middleware] Please install/enable Redux devtools extension\"\n      );\n    }\n    return fn(set, get, api);\n  }\n  const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);\n  let isRecording = true;\n  api.setState = (state, replace, nameOrAction) => {\n    const r = set(state, replace);\n    if (!isRecording)\n      return r;\n    const action = nameOrAction === void 0 ? { type: anonymousActionType || \"anonymous\" } : typeof nameOrAction === \"string\" ? { type: nameOrAction } : nameOrAction;\n    if (store === void 0) {\n      connection == null ? void 0 : connection.send(action, get());\n      return r;\n    }\n    connection == null ? void 0 : connection.send(\n      {\n        ...action,\n        type: `${store}/${action.type}`\n      },\n      {\n        ...getTrackedConnectionState(options.name),\n        [store]: api.getState()\n      }\n    );\n    return r;\n  };\n  const setStateFromDevtools = (...a) => {\n    const originalIsRecording = isRecording;\n    isRecording = false;\n    set(...a);\n    isRecording = originalIsRecording;\n  };\n  const initialState = fn(api.setState, get, api);\n  if (connectionInformation.type === \"untracked\") {\n    connection == null ? void 0 : connection.init(initialState);\n  } else {\n    connectionInformation.stores[connectionInformation.store] = api;\n    connection == null ? void 0 : connection.init(\n      Object.fromEntries(\n        Object.entries(connectionInformation.stores).map(([key, store2]) => [\n          key,\n          key === connectionInformation.store ? initialState : store2.getState()\n        ])\n      )\n    );\n  }\n  if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\n    let didWarnAboutReservedActionType = false;\n    const originalDispatch = api.dispatch;\n    api.dispatch = (...a) => {\n      if ((import.meta.env && import.meta.env.MODE) !== \"production\" && a[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\n        console.warn(\n          '[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.'\n        );\n        didWarnAboutReservedActionType = true;\n      }\n      originalDispatch(...a);\n    };\n  }\n  connection.subscribe((message) => {\n    var _a;\n    switch (message.type) {\n      case \"ACTION\":\n        if (typeof message.payload !== \"string\") {\n          console.error(\n            \"[zustand devtools middleware] Unsupported action format\"\n          );\n          return;\n        }\n        return parseJsonThen(\n          message.payload,\n          (action) => {\n            if (action.type === \"__setState\") {\n              if (store === void 0) {\n                setStateFromDevtools(action.state);\n                return;\n              }\n              if (Object.keys(action.state).length !== 1) {\n                console.error(\n                  `\n                    [zustand devtools middleware] Unsupported __setState action format. \n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\n                    `\n                );\n              }\n              const stateFromDevtools = action.state[store];\n              if (stateFromDevtools === void 0 || stateFromDevtools === null) {\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {\n                setStateFromDevtools(stateFromDevtools);\n              }\n              return;\n            }\n            if (!api.dispatchFromDevtools)\n              return;\n            if (typeof api.dispatch !== \"function\")\n              return;\n            api.dispatch(action);\n          }\n        );\n      case \"DISPATCH\":\n        switch (message.payload.type) {\n          case \"RESET\":\n            setStateFromDevtools(initialState);\n            if (store === void 0) {\n              return connection == null ? void 0 : connection.init(api.getState());\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"COMMIT\":\n            if (store === void 0) {\n              connection == null ? void 0 : connection.init(api.getState());\n              return;\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"ROLLBACK\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                connection == null ? void 0 : connection.init(api.getState());\n                return;\n              }\n              setStateFromDevtools(state[store]);\n              connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n            });\n          case \"JUMP_TO_STATE\":\n          case \"JUMP_TO_ACTION\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {\n                setStateFromDevtools(state[store]);\n              }\n            });\n          case \"IMPORT_STATE\": {\n            const { nextLiftedState } = message.payload;\n            const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;\n            if (!lastComputedState)\n              return;\n            if (store === void 0) {\n              setStateFromDevtools(lastComputedState);\n            } else {\n              setStateFromDevtools(lastComputedState[store]);\n            }\n            connection == null ? void 0 : connection.send(\n              null,\n              // FIXME no-any\n              nextLiftedState\n            );\n            return;\n          }\n          case \"PAUSE_RECORDING\":\n            return isRecording = !isRecording;\n        }\n        return;\n    }\n  });\n  return initialState;\n};\nconst devtools = devtoolsImpl;\nconst parseJsonThen = (stringified, f) => {\n  let parsed;\n  try {\n    parsed = JSON.parse(stringified);\n  } catch (e) {\n    console.error(\n      \"[zustand devtools middleware] Could not parse the received json\",\n      e\n    );\n  }\n  if (parsed !== void 0)\n    f(parsed);\n};\n\nconst subscribeWithSelectorImpl = (fn) => (set, get, api) => {\n  const origSubscribe = api.subscribe;\n  api.subscribe = (selector, optListener, options) => {\n    let listener = selector;\n    if (optListener) {\n      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\n      let currentSlice = selector(api.getState());\n      listener = (state) => {\n        const nextSlice = selector(state);\n        if (!equalityFn(currentSlice, nextSlice)) {\n          const previousSlice = currentSlice;\n          optListener(currentSlice = nextSlice, previousSlice);\n        }\n      };\n      if (options == null ? void 0 : options.fireImmediately) {\n        optListener(currentSlice, currentSlice);\n      }\n    }\n    return origSubscribe(listener);\n  };\n  const initialState = fn(set, get, api);\n  return initialState;\n};\nconst subscribeWithSelector = subscribeWithSelectorImpl;\n\nconst combine = (initialState, create) => (...a) => Object.assign({}, initialState, create(...a));\n\nfunction createJSONStorage(getStorage) {\n  let storage;\n  try {\n    storage = getStorage();\n  } catch (e) {\n    return;\n  }\n  const persistStorage = {\n    getItem: (name) => {\n      var _a;\n      const parse = (str2) => {\n        if (str2 === null) {\n          return null;\n        }\n        return JSON.parse(str2);\n      };\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\n      if (str instanceof Promise) {\n        return str.then(parse);\n      }\n      return parse(str);\n    },\n    setItem: (name, newValue) => storage.setItem(name, JSON.stringify(newValue)),\n    removeItem: (name) => storage.removeItem(name)\n  };\n  return persistStorage;\n}\nconst toThenable = (fn) => (input) => {\n  try {\n    const result = fn(input);\n    if (result instanceof Promise) {\n      return result;\n    }\n    return {\n      then(onFulfilled) {\n        return toThenable(onFulfilled)(result);\n      },\n      catch(_onRejected) {\n        return this;\n      }\n    };\n  } catch (e) {\n    return {\n      then(_onFulfilled) {\n        return this;\n      },\n      catch(onRejected) {\n        return toThenable(onRejected)(e);\n      }\n    };\n  }\n};\nconst oldImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    getStorage: () => localStorage,\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage;\n  try {\n    storage = options.getStorage();\n  } catch (e) {\n  }\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const thenableSerialize = toThenable(options.serialize);\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    let errorInSync;\n    const thenable = thenableSerialize({ state, version: options.version }).then(\n      (serializedValue) => storage.setItem(options.name, serializedValue)\n    ).catch((e) => {\n      errorInSync = e;\n    });\n    if (errorInSync) {\n      throw errorInSync;\n    }\n    return thenable;\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a;\n    if (!storage)\n      return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => cb(get()));\n    const postRehydrationCallback = ((_a = options.onRehydrateStorage) == null ? void 0 : _a.call(options, get())) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((storageValue) => {\n      if (storageValue) {\n        return options.deserialize(storageValue);\n      }\n    }).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return deserializedStorageValue.state;\n        }\n      }\n    }).then((migratedState) => {\n      var _a2;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      return setItem();\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.getStorage) {\n        storage = newOptions.getStorage();\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  hydrate();\n  return stateFromStorage || configResult;\n};\nconst newImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    storage: createJSONStorage(() => localStorage),\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage = options.storage;\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    return storage.setItem(options.name, {\n      state,\n      version: options.version\n    });\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a;\n    if (!storage)\n      return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => cb(get()));\n    const postRehydrationCallback = ((_a = options.onRehydrateStorage) == null ? void 0 : _a.call(options, get())) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            return options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return deserializedStorageValue.state;\n        }\n      }\n    }).then((migratedState) => {\n      var _a2;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      return setItem();\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.storage) {\n        storage = newOptions.storage;\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  hydrate();\n  return stateFromStorage || configResult;\n};\nconst persistImpl = (config, baseOptions) => {\n  if (\"getStorage\" in baseOptions || \"serialize\" in baseOptions || \"deserialize\" in baseOptions) {\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Please use `storage` option instead.\"\n      );\n    }\n    return oldImpl(config, baseOptions);\n  }\n  return newImpl(config, baseOptions);\n};\nconst persist = persistImpl;\n\nexport { combine, createJSONStorage, devtools, persist, redux, subscribeWithSelector };\n"]},"metadata":{},"sourceType":"module"}