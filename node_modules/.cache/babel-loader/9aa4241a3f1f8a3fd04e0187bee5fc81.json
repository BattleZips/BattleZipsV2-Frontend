{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    if (apiKey != null) {\n      logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n    }\n\n    return null;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network.name) {\n      case \"homestead\":\n        host = \"https://cloudflare-eth.com/\";\n        break;\n\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n\n    return host;\n  }\n\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      // The Cloudflare provider does not support eth_blockNumber,\n      // so we get the latest block and pull it from that\n      if (method === \"getBlockNumber\") {\n        const block = yield _super.perform.call(this, \"getBlock\", {\n          blockTag: \"latest\"\n        });\n        return block.number;\n      }\n\n      return _super.perform.call(this, method, params);\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAASA,kBAAT,QAAmC,yBAAnC;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,OAAM,MAAOE,kBAAP,SAAkCJ,kBAAlC,CAAoD;AAEtC,SAATK,SAAS,CAACC,MAAD,EAAY;AACxB,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAChBH,YAAM,CAACI,kBAAP,CAA0B,qCAA1B,EAAiE,QAAjE,EAA2ED,MAA3E;AACH;;AACD,WAAO,IAAP;AACH;;AAEY,SAANE,MAAM,CAACC,OAAD,EAAmBH,MAAnB,EAA+B;AACxC,QAAII,IAAI,GAAG,IAAX;;AACA,YAAQD,OAAO,CAACE,IAAhB;AACI,WAAK,WAAL;AACID,YAAI,GAAG,6BAAP;AACA;;AACJ;AACGP,cAAM,CAACI,kBAAP,CAA0B,qBAA1B,EAAiD,SAAjD,EAA4DK,SAAS,CAAC,CAAD,CAArE;AALP;;AAQA,WAAOF,IAAP;AACH;;AAEKG,SAAO,CAACC,MAAD,EAAiBC,MAAjB,EAA4B;;;;;;;;AACrC;AACA;AACA,UAAID,MAAM,KAAK,gBAAf,EAAiC;AAC7B,cAAME,KAAK,GAAG,MAAMC,OAAMJ,OAAN,CAAaK,IAAb,CAAa,IAAb,EAAc,UAAd,EAA0B;AAAEC,kBAAQ,EAAE;AAAZ,SAA1B,CAApB;AACA,eAAOH,KAAK,CAACI,MAAb;AACH;;AAED,aAAOH,OAAMJ,OAAN,CAAaK,IAAb,CAAa,IAAb,EAAcJ,MAAd,EAAsBC,MAAtB,CAAP;AACH;AAAA;;AA/BqD","names":["UrlJsonRpcProvider","Logger","version","logger","CloudflareProvider","getApiKey","apiKey","throwArgumentError","getUrl","network","host","name","arguments","perform","method","params","block","_super","call","blockTag","number"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}