{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nexport var UnicodeNormalizationForm;\n\n(function (UnicodeNormalizationForm) {\n  UnicodeNormalizationForm[\"current\"] = \"\";\n  UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n  UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n  UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n  UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n\n;\nexport var Utf8ErrorReason;\n\n(function (Utf8ErrorReason) {\n  // A continuation byte was present where there was nothing to continue\n  // - offset = the index the codepoint began in\n  Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\"; // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n  // - offset = the index the codepoint began in\n\n  Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\"; // The string is too short to process the expected codepoint\n  // - offset = the index the codepoint began in\n\n  Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\"; // A missing continuation byte was expected but not found\n  // - offset = the index the continuation byte was expected at\n\n  Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\"; // The computed code point is outside the range for UTF-8\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; outside the UTF-8 range\n\n  Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\"; // UTF-8 strings may not contain UTF-16 surrogate pairs\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n\n  Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\"; // The string is an overlong representation\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; already bounds checked\n\n  Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n\n;\n\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n  return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\n\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n  // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n    let i = 0;\n\n    for (let o = offset + 1; o < bytes.length; o++) {\n      if (bytes[o] >> 6 !== 0x02) {\n        break;\n      }\n\n      i++;\n    }\n\n    return i;\n  } // This byte runs us past the end of the string, so just jump to the end\n  // (but the first byte was read already read and therefore skipped)\n\n\n  if (reason === Utf8ErrorReason.OVERRUN) {\n    return bytes.length - offset - 1;\n  } // Nothing to skip\n\n\n  return 0;\n}\n\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n  // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n  if (reason === Utf8ErrorReason.OVERLONG) {\n    output.push(badCodepoint);\n    return 0;\n  } // Put the replacement character into the output\n\n\n  output.push(0xfffd); // Otherwise, process as if ignoring errors\n\n  return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n} // Common error handing strategies\n\n\nexport const Utf8ErrorFuncs = Object.freeze({\n  error: errorFunc,\n  ignore: ignoreFunc,\n  replace: replaceFunc\n}); // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\n\nfunction getUtf8CodePoints(bytes, onError) {\n  if (onError == null) {\n    onError = Utf8ErrorFuncs.error;\n  }\n\n  bytes = arrayify(bytes);\n  const result = [];\n  let i = 0; // Invalid bytes are ignored\n\n  while (i < bytes.length) {\n    const c = bytes[i++]; // 0xxx xxxx\n\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    } // Multibyte; how many bytes left for this character?\n\n\n    let extraLength = null;\n    let overlongMask = null; // 110x xxxx 10xx xxxx\n\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f; // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff; // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n      } else {\n        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n      }\n\n      continue;\n    } // Do we have enough bytes in our data?\n\n\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n      continue;\n    } // Remove the length prefix from the char\n\n\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n\n    for (let j = 0; j < extraLength; j++) {\n      let nextChar = bytes[i]; // Invalid continuation byte\n\n      if ((nextChar & 0xc0) != 0x80) {\n        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n        res = null;\n        break;\n      }\n\n      ;\n      res = res << 6 | nextChar & 0x3f;\n      i++;\n    } // See above loop for invalid continuation byte\n\n\n    if (res === null) {\n      continue;\n    } // Maximum code point\n\n\n    if (res > 0x10ffff) {\n      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    } // Reserved for UTF-16 surrogate halves\n\n\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    } // Check for overlong sequences (more bytes than needed)\n\n\n    if (res <= overlongMask) {\n      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    result.push(res);\n  }\n\n  return result;\n} // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\n\nexport function toUtf8Bytes(str) {\n  let form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnicodeNormalizationForm.current;\n\n  if (form != UnicodeNormalizationForm.current) {\n    logger.checkNormalize();\n    str = str.normalize(form);\n  }\n\n  let result = [];\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push(c >> 6 | 0xc0);\n      result.push(c & 0x3f | 0x80);\n    } else if ((c & 0xfc00) == 0xd800) {\n      i++;\n      const c2 = str.charCodeAt(i);\n\n      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n        throw new Error(\"invalid utf-8 string\");\n      } // Surrogate Pair\n\n\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push(pair >> 18 | 0xf0);\n      result.push(pair >> 12 & 0x3f | 0x80);\n      result.push(pair >> 6 & 0x3f | 0x80);\n      result.push(pair & 0x3f | 0x80);\n    } else {\n      result.push(c >> 12 | 0xe0);\n      result.push(c >> 6 & 0x3f | 0x80);\n      result.push(c & 0x3f | 0x80);\n    }\n  }\n\n  return arrayify(result);\n}\n;\n\nfunction escapeChar(value) {\n  const hex = \"0000\" + value.toString(16);\n  return \"\\\\u\" + hex.substring(hex.length - 4);\n}\n\nexport function _toEscapedUtf8String(bytes, onError) {\n  return '\"' + getUtf8CodePoints(bytes, onError).map(codePoint => {\n    if (codePoint < 256) {\n      switch (codePoint) {\n        case 8:\n          return \"\\\\b\";\n\n        case 9:\n          return \"\\\\t\";\n\n        case 10:\n          return \"\\\\n\";\n\n        case 13:\n          return \"\\\\r\";\n\n        case 34:\n          return \"\\\\\\\"\";\n\n        case 92:\n          return \"\\\\\\\\\";\n      }\n\n      if (codePoint >= 32 && codePoint < 127) {\n        return String.fromCharCode(codePoint);\n      }\n    }\n\n    if (codePoint <= 0xffff) {\n      return escapeChar(codePoint);\n    }\n\n    codePoint -= 0x10000;\n    return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n  return codePoints.map(codePoint => {\n    if (codePoint <= 0xffff) {\n      return String.fromCharCode(codePoint);\n    }\n\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n  return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str) {\n  let form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnicodeNormalizationForm.current;\n  return getUtf8CodePoints(toUtf8Bytes(str, form));\n}","map":{"version":3,"mappings":"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","names":["arrayify","Logger","version","logger","UnicodeNormalizationForm","Utf8ErrorReason","errorFunc","reason","offset","bytes","output","badCodepoint","throwArgumentError","ignoreFunc","BAD_PREFIX","UNEXPECTED_CONTINUE","i","o","length","OVERRUN","replaceFunc","OVERLONG","push","Utf8ErrorFuncs","Object","freeze","error","ignore","replace","getUtf8CodePoints","onError","result","c","extraLength","overlongMask","res","j","nextChar","MISSING_CONTINUE","OUT_OF_RANGE","UTF16_SURROGATE","toUtf8Bytes","str","form","current","checkNormalize","normalize","charCodeAt","c2","Error","pair","escapeChar","value","hex","toString","substring","_toEscapedUtf8String","map","codePoint","String","fromCharCode","join","_toUtf8String","codePoints","toUtf8String","toUtf8CodePoints"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/strings/src.ts/utf8.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n\nexport enum UnicodeNormalizationForm {\n    current  = \"\",\n    NFC      = \"NFC\",\n    NFD      = \"NFD\",\n    NFKC     = \"NFKC\",\n    NFKD     = \"NFKD\"\n};\n\nexport enum Utf8ErrorReason {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    UNEXPECTED_CONTINUE   = \"unexpected continuation byte\",\n\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    BAD_PREFIX            = \"bad codepoint prefix\",\n\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    OVERRUN               = \"string overrun\",\n\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    MISSING_CONTINUE      = \"missing continuation byte\",\n\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    OUT_OF_RANGE          = \"out of UTF-8 range\",\n\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    UTF16_SURROGATE       = \"UTF-16 surrogate\",\n\n    // The string is an overlong representation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    OVERLONG              = \"overlong representation\",\n};\n\n\nexport type Utf8ErrorFunc = (reason: Utf8ErrorReason, offset: number, bytes: ArrayLike<number>, output: Array<number>, badCodepoint?: number) => number;\n\nfunction errorFunc(reason: Utf8ErrorReason, offset: number, bytes: ArrayLike<number>, output: Array<number>, badCodepoint?: number): number {\n    return logger.throwArgumentError(`invalid codepoint at offset ${ offset }; ${ reason }`, \"bytes\", bytes);\n}\n\nfunction ignoreFunc(reason: Utf8ErrorReason, offset: number, bytes: ArrayLike<number>, output: Array<number>, badCodepoint?: number): number {\n\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) { break; }\n            i++;\n        }\n        return i;\n    }\n\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n\n    // Nothing to skip\n    return 0;\n}\n\nfunction replaceFunc(reason: Utf8ErrorReason, offset: number, bytes: ArrayLike<number>, output: Array<number>, badCodepoint?: number): number {\n\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n\n    // Put the replacement character into the output\n    output.push(0xfffd);\n\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n\n// Common error handing strategies\nexport const Utf8ErrorFuncs: { [ name: string ]: Utf8ErrorFunc } = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes: BytesLike, onError?: Utf8ErrorFunc): Array<number> {\n    if (onError == null) { onError = Utf8ErrorFuncs.error; }\n\n    bytes = arrayify(bytes);\n\n    const result: Array<number> = [];\n    let i = 0;\n\n    // Invalid bytes are ignored\n    while(i < bytes.length) {\n\n        const c = bytes[i++];\n\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n\n        // 1110 xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n\n        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n\n        } else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            } else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            };\n\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n\n        // See above loop for invalid continuation byte\n        if (res === null) { continue; }\n\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n\n        result.push(res);\n    }\n\n    return result;\n}\n\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nexport function toUtf8Bytes(str: string, form: UnicodeNormalizationForm = UnicodeNormalizationForm.current): Uint8Array {\n\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n\n        if (c < 0x80) {\n            result.push(c);\n\n        } else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n\n        } else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n\n        } else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n\n    return arrayify(result);\n};\n\nfunction escapeChar(value: number) {\n    const hex = (\"0000\" + value.toString(16));\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\n\nexport function _toEscapedUtf8String(bytes: BytesLike, onError?: Utf8ErrorFunc): string {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\n        if (codePoint < 256) {\n            switch (codePoint) {\n                case 8:  return \"\\\\b\";\n                case 9:  return \"\\\\t\";\n                case 10: return \"\\\\n\"\n                case 13: return \"\\\\r\";\n                case 34: return \"\\\\\\\"\";\n                case 92: return \"\\\\\\\\\";\n            }\n\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n\n        codePoint -= 0x10000;\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\n\nexport function _toUtf8String(codePoints: Array<number>): string {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode(\n            (((codePoint >> 10) & 0x3ff) + 0xd800),\n            ((codePoint & 0x3ff) + 0xdc00)\n        );\n    }).join(\"\");\n}\n\nexport function toUtf8String(bytes: BytesLike, onError?: Utf8ErrorFunc): string {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n\nexport function toUtf8CodePoints(str: string, form: UnicodeNormalizationForm = UnicodeNormalizationForm.current): Array<number> {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n"]},"metadata":{},"sourceType":"module"}