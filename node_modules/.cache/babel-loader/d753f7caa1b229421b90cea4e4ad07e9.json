{"ast":null,"code":"import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    this.online = online;\n\n    if (online) {\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\n\nconst onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };","map":{"version":3,"mappings":";;;AAOO,MAAMA,aAAN,SAA4BC,YAA5B,CAAyC;AAM9CC,aAAW,GAAG;AACZ;;AACA,SAAKC,KAAL,GAAcC,QAAD,IAAc;AACzB;AACA;AACA,UAAI,CAACC,QAAD,IAAaC,MAAM,CAACC,gBAAxB,EAA0C;AACxC,cAAMC,QAAQ,GAAG,MAAMJ,QAAQ,EAA/B,CADwC;;;AAGxCE,cAAM,CAACC,gBAAPD,CAAwB,QAAxBA,EAAkCE,QAAlCF,EAA4C,KAA5CA;AACAA,cAAM,CAACC,gBAAPD,CAAwB,SAAxBA,EAAmCE,QAAnCF,EAA6C,KAA7CA;AAEA,eAAO,MAAM;AACX;AACAA,gBAAM,CAACG,mBAAPH,CAA2B,QAA3BA,EAAqCE,QAArCF;AACAA,gBAAM,CAACG,mBAAPH,CAA2B,SAA3BA,EAAsCE,QAAtCF;AAHF;AAKD;;AAED;AAhBF;AAkBD;;AAESI,aAAW,GAAS;AAC5B,QAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,WAAKC,gBAAL,CAAsB,KAAKT,KAA3B;AACD;AACF;;AAESU,eAAa,GAAG;AACxB,QAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;AAAA;;AACxB,4BAAKH,OAAL;AACA,WAAKA,OAAL,GAAeI,SAAf;AACD;AACF;;AAEDH,kBAAgB,CAACT,KAAD,EAAuB;AAAA;;AACrC,SAAKA,KAAL,GAAaA,KAAb;AACA,2BAAKQ,OAAL;AACA,SAAKA,OAAL,GAAeR,KAAK,CAAEa,MAAD,IAAsB;AACzC,UAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,aAAKC,SAAL,CAAeD,MAAf;AADF,aAEO;AACL,aAAKZ,QAAL;AACD;AALiB,MAApB;AAOD;;AAEDa,WAAS,CAACD,MAAD,EAAyB;AAChC,SAAKA,MAAL,GAAcA,MAAd;;AAEA,QAAIA,MAAJ,EAAY;AACV,WAAKZ,QAAL;AACD;AACF;;AAEDA,UAAQ,GAAS;AACf,SAAKc,SAAL,CAAeC,OAAf,CAAwBX,QAAD,IAAc;AACnCA,cAAQ;AADV;AAGD;;AAEDY,UAAQ,GAAY;AAClB,QAAI,OAAO,KAAKJ,MAAZ,KAAuB,SAA3B,EAAsC;AACpC,aAAO,KAAKA,MAAZ;AACD;;AAED,QACE,OAAOK,SAAP,KAAqB,WAArB,IACA,OAAOA,SAAS,CAACC,MAAjB,KAA4B,WAF9B,EAGE;AACA,aAAO,IAAP;AACD;;AAED,WAAOD,SAAS,CAACC,MAAjB;AACD;;AAhF6C;;AAmFnCC,mBAAa,GAAG,IAAIvB,aAAJ,EAAhBuB","names":["OnlineManager","Subscribable","constructor","setup","onOnline","isServer","window","addEventListener","listener","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","undefined","online","setOnline","listeners","forEach","isOnline","navigator","onLine","onlineManager"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/query-core/src/onlineManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n"]},"metadata":{},"sourceType":"module"}