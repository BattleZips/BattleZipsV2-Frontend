{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\"; // The transaction has already been sanitized by the calls in Provider\n\nfunction getTransactionPostData(transaction) {\n  const result = {};\n\n  for (let key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n\n    let value = transaction[key];\n\n    if (key === \"type\" && value === 0) {\n      continue;\n    } // Quantity-types require no leading zero, unless 0\n\n\n    if ({\n      type: true,\n      gasLimit: true,\n      gasPrice: true,\n      maxFeePerGs: true,\n      maxPriorityFeePerGas: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(hexlify(value));\n    } else if (key === \"accessList\") {\n      value = \"[\" + accessListify(value).map(set => {\n        return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n      }).join(\",\") + \"]\";\n    } else {\n      value = hexlify(value);\n    }\n\n    result[key] = value;\n  }\n\n  return result;\n}\n\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n\n  if (result.status != 1 || result.message != \"OK\") {\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n\n    throw error;\n  }\n\n  return result.result;\n}\n\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    const error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n\n  if (result.error) {\n    // @TODO: not any\n    const error = new Error(result.error.message || \"unknown error\");\n\n    if (result.error.code) {\n      error.code = result.error.code;\n    }\n\n    if (result.error.data) {\n      error.data = result.error.data;\n    }\n\n    throw error;\n  }\n\n  return result.result;\n} // The blockTag was normalized as a string by the Provider pre-perform operations\n\n\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n\n  return parseInt(blockTag.substring(2), 16);\n}\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    const e = error.error; // Etherscan keeps changing their string\n\n    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n      // Etherscan prefixes the data like \"Reverted 0x1234\"\n      let data = e.data;\n\n      if (data) {\n        data = \"0x\" + data.replace(/^.*0x/i, \"\");\n      }\n\n      if (isHexString(data)) {\n        return data;\n      }\n\n      logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n        error,\n        data: \"0x\"\n      });\n    }\n  } // Get the message from any nested error structure\n\n\n  let message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n\n  message = (message || \"\").toLowerCase(); // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  } // \"Transaction with the same hash was already imported.\"\n\n\n  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n\n\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  if (message.match(/execution failed due to an exception|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider {\n  constructor(network, apiKey) {\n    logger.checkNew(new.target, EtherscanProvider);\n    super(network);\n    defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n    defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n  }\n\n  getBaseUrl() {\n    switch (this.network ? this.network.name : \"invalid\") {\n      case \"homestead\":\n        return \"https:/\\/api.etherscan.io\";\n\n      case \"ropsten\":\n        return \"https:/\\/api-ropsten.etherscan.io\";\n\n      case \"rinkeby\":\n        return \"https:/\\/api-rinkeby.etherscan.io\";\n\n      case \"kovan\":\n        return \"https:/\\/api-kovan.etherscan.io\";\n\n      case \"goerli\":\n        return \"https:/\\/api-goerli.etherscan.io\";\n\n      default:\n    }\n\n    return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n  }\n\n  getUrl(module, params) {\n    const query = Object.keys(params).reduce((accum, key) => {\n      const value = params[key];\n\n      if (value != null) {\n        accum += `&${key}=${value}`;\n      }\n\n      return accum;\n    }, \"\");\n    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n    return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n  }\n\n  getPostUrl() {\n    return `${this.baseUrl}/api`;\n  }\n\n  getPostData(module, params) {\n    params.module = module;\n    params.apikey = this.apiKey;\n    return params;\n  }\n\n  fetch(module, params, post) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = post ? this.getPostUrl() : this.getUrl(module, params);\n      const payload = post ? this.getPostData(module, params) : null;\n      const procFunc = module === \"proxy\" ? getJsonResult : getResult;\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: url,\n        provider: this\n      });\n      const connection = {\n        url: url,\n        throttleSlotInterval: 1000,\n        throttleCallback: (attempt, url) => {\n          if (this.isCommunityResource()) {\n            showThrottleMessage();\n          }\n\n          return Promise.resolve(true);\n        }\n      };\n      let payloadStr = null;\n\n      if (payload) {\n        connection.headers = {\n          \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n        };\n        payloadStr = Object.keys(payload).map(key => {\n          return `${key}=${payload[key]}`;\n        }).join(\"&\");\n      }\n\n      const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: url,\n        response: deepCopy(result),\n        provider: this\n      });\n      return result;\n    });\n  }\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.network;\n    });\n  }\n\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (method) {\n        case \"getBlockNumber\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_blockNumber\"\n          });\n\n        case \"getGasPrice\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_gasPrice\"\n          });\n\n        case \"getBalance\":\n          // Returns base-10 result\n          return this.fetch(\"account\", {\n            action: \"balance\",\n            address: params.address,\n            tag: params.blockTag\n          });\n\n        case \"getTransactionCount\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionCount\",\n            address: params.address,\n            tag: params.blockTag\n          });\n\n        case \"getCode\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getCode\",\n            address: params.address,\n            tag: params.blockTag\n          });\n\n        case \"getStorageAt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getStorageAt\",\n            address: params.address,\n            position: params.position,\n            tag: params.blockTag\n          });\n\n        case \"sendTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_sendRawTransaction\",\n            hex: params.signedTransaction\n          }, true).catch(error => {\n            return checkError(\"sendTransaction\", error, params.signedTransaction);\n          });\n\n        case \"getBlock\":\n          if (params.blockTag) {\n            return this.fetch(\"proxy\", {\n              action: \"eth_getBlockByNumber\",\n              tag: params.blockTag,\n              boolean: params.includeTransactions ? \"true\" : \"false\"\n            });\n          }\n\n          throw new Error(\"getBlock by blockHash not implemented\");\n\n        case \"getTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionByHash\",\n            txhash: params.transactionHash\n          });\n\n        case \"getTransactionReceipt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionReceipt\",\n            txhash: params.transactionHash\n          });\n\n        case \"call\":\n          {\n            if (params.blockTag !== \"latest\") {\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            }\n\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_call\";\n\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"call\", error, params.transaction);\n            }\n          }\n\n        case \"estimateGas\":\n          {\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_estimateGas\";\n\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"estimateGas\", error, params.transaction);\n            }\n          }\n\n        case \"getLogs\":\n          {\n            const args = {\n              action: \"getLogs\"\n            };\n\n            if (params.filter.fromBlock) {\n              args.fromBlock = checkLogTag(params.filter.fromBlock);\n            }\n\n            if (params.filter.toBlock) {\n              args.toBlock = checkLogTag(params.filter.toBlock);\n            }\n\n            if (params.filter.address) {\n              args.address = params.filter.address;\n            } // @TODO: We can handle slightly more complicated logs using the logs API\n\n\n            if (params.filter.topics && params.filter.topics.length > 0) {\n              if (params.filter.topics.length > 1) {\n                logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  topics: params.filter.topics\n                });\n              }\n\n              if (params.filter.topics.length === 1) {\n                const topic0 = params.filter.topics[0];\n\n                if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                  logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    topic0: topic0\n                  });\n                }\n\n                args.topic0 = topic0;\n              }\n            }\n\n            const logs = yield this.fetch(\"logs\", args); // Cache txHash => blockHash\n\n            let blocks = {}; // Add any missing blockHash to the logs\n\n            for (let i = 0; i < logs.length; i++) {\n              const log = logs[i];\n\n              if (log.blockHash != null) {\n                continue;\n              }\n\n              if (blocks[log.blockNumber] == null) {\n                const block = yield this.getBlock(log.blockNumber);\n\n                if (block) {\n                  blocks[log.blockNumber] = block.hash;\n                }\n              }\n\n              log.blockHash = blocks[log.blockNumber];\n            }\n\n            return logs;\n          }\n\n        case \"getEtherPrice\":\n          if (this.network.name !== \"homestead\") {\n            return 0.0;\n          }\n\n          return parseFloat((yield this.fetch(\"stats\", {\n            action: \"ethprice\"\n          })).ethusd);\n\n        default:\n          break;\n      }\n\n      return _super.perform.call(this, method, params);\n    });\n  } // Note: The `page` page parameter only allows pagination within the\n  //       10,000 window available without a page and offset parameter\n  //       Error: Result window is too large, PageNo x Offset size must\n  //              be less than or equal to 10000\n\n\n  getHistory(addressOrName, startBlock, endBlock) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const params = {\n        action: \"txlist\",\n        address: yield this.resolveName(addressOrName),\n        startblock: startBlock == null ? 0 : startBlock,\n        endblock: endBlock == null ? 99999999 : endBlock,\n        sort: \"asc\"\n      };\n      const result = yield this.fetch(\"account\", params);\n      return result.map(tx => {\n        [\"contractAddress\", \"to\"].forEach(function (key) {\n          if (tx[key] == \"\") {\n            delete tx[key];\n          }\n        });\n\n        if (tx.creates == null && tx.contractAddress != null) {\n          tx.creates = tx.contractAddress;\n        }\n\n        const item = this.formatter.transactionResponse(tx);\n\n        if (tx.timeStamp) {\n          item.timestamp = parseInt(tx.timeStamp);\n        }\n\n        return item;\n      });\n    });\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,WAA5B,QAA+C,sBAA/C;AAEA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,2BAAzC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAAyBC,SAAzB,QAA0C,oBAA1C;AAEA,SAASC,mBAAT,QAAoC,aAApC;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,SAASE,YAAT,QAA6B,iBAA7B,C,CAGA;;AACA,SAASC,sBAAT,CAAgCC,WAAhC,EAA+D;AAC3D,QAAMC,MAAM,GAA2B,EAAvC;;AACA,OAAK,IAAIC,GAAT,IAAgBF,WAAhB,EAA6B;AACzB,QAAUA,WAAY,CAACE,GAAD,CAAZ,IAAqB,IAA/B,EAAqC;AAAE;AAAW;;AAClD,QAAIC,KAAK,GAASH,WAAY,CAACE,GAAD,CAA9B;;AACA,QAAIA,GAAG,KAAK,MAAR,IAAkBC,KAAK,KAAK,CAAhC,EAAmC;AAAE;AAAW,KAHvB,CAKzB;;;AACA,QAAU;AAAEC,UAAI,EAAE,IAAR;AAAcC,cAAQ,EAAE,IAAxB;AAA8BC,cAAQ,EAAE,IAAxC;AAA8CC,iBAAW,EAAE,IAA3D;AAAiEC,0BAAoB,EAAE,IAAvF;AAA6FC,WAAK,EAAE,IAApG;AAA0GN,WAAK,EAAE;AAAjH,MAAyHD,GAAzH,CAAV,EAAyI;AACrIC,WAAK,GAAGf,QAAQ,CAACD,OAAO,CAACgB,KAAD,CAAR,CAAhB;AACH,KAFD,MAEO,IAAID,GAAG,KAAK,YAAZ,EAA0B;AAC7BC,WAAK,GAAG,MAAMX,aAAa,CAACW,KAAD,CAAb,CAAqBO,GAArB,CAA0BC,GAAD,IAAQ;AAC3C,eAAO,aAAcA,GAAG,CAACC,OAAQ,mBAAoBD,GAAG,CAACE,WAAJ,CAAgBC,IAAhB,CAAqB,KAArB,CAA4B,KAAjF;AACH,OAFa,EAEXA,IAFW,CAEN,GAFM,CAAN,GAEO,GAFf;AAGH,KAJM,MAIA;AACHX,WAAK,GAAGhB,OAAO,CAACgB,KAAD,CAAf;AACH;;AACDF,UAAM,CAACC,GAAD,CAAN,GAAcC,KAAd;AACH;;AACD,SAAOF,MAAP;AACH;;AAED,SAASc,SAAT,CAAmBd,MAAnB,EAA8E;AAC1E;AACA,MAAIA,MAAM,CAACe,MAAP,IAAiB,CAAjB,KAAuBf,MAAM,CAACgB,OAAP,KAAmB,kBAAnB,IAAyChB,MAAM,CAACgB,OAAP,KAAmB,uBAAnF,CAAJ,EAAiH;AAC7G,WAAOhB,MAAM,CAACA,MAAd;AACH;;AAED,MAAIA,MAAM,CAACe,MAAP,IAAiB,CAAjB,IAAsBf,MAAM,CAACgB,OAAP,IAAkB,IAA5C,EAAkD;AAC9C,UAAMC,KAAK,GAAQ,IAAIC,KAAJ,CAAU,kBAAV,CAAnB;AACAD,SAAK,CAACjB,MAAN,GAAemB,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAf;;AACA,QAAI,CAACA,MAAM,CAACA,MAAP,IAAiB,EAAlB,EAAsBqB,WAAtB,GAAoCC,OAApC,CAA4C,YAA5C,KAA6D,CAAjE,EAAoE;AAChEL,WAAK,CAACM,aAAN,GAAsB,IAAtB;AACH;;AACD,UAAMN,KAAN;AACH;;AAED,SAAOjB,MAAM,CAACA,MAAd;AACH;;AAED,SAASwB,aAAT,CAAuBxB,MAAvB,EAAwH;AACpH;AACA,MAAIA,MAAM,IAAUA,MAAO,CAACe,MAAR,IAAkB,CAAlC,IAA6Cf,MAAO,CAACgB,OAAR,IAAmB,OAAhE,IAA2E,CAAChB,MAAM,CAACA,MAAP,IAAiB,EAAlB,EAAsBqB,WAAtB,GAAoCC,OAApC,CAA4C,YAA5C,KAA6D,CAA5I,EAA+I;AAC3I,UAAML,KAAK,GAAQ,IAAIC,KAAJ,CAAU,oBAAV,CAAnB;AACAD,SAAK,CAACjB,MAAN,GAAemB,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAf;AACAiB,SAAK,CAACM,aAAN,GAAsB,IAAtB;AACA,UAAMN,KAAN;AACH;;AAED,MAAIjB,MAAM,CAACyB,OAAP,IAAkB,KAAtB,EAA6B;AACzB;AACA,UAAMR,KAAK,GAAQ,IAAIC,KAAJ,CAAU,kBAAV,CAAnB;AACAD,SAAK,CAACjB,MAAN,GAAemB,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAf;AACA,UAAMiB,KAAN;AACH;;AAED,MAAIjB,MAAM,CAACiB,KAAX,EAAkB;AACd;AACA,UAAMA,KAAK,GAAQ,IAAIC,KAAJ,CAAUlB,MAAM,CAACiB,KAAP,CAAaD,OAAb,IAAwB,eAAlC,CAAnB;;AACA,QAAIhB,MAAM,CAACiB,KAAP,CAAaS,IAAjB,EAAuB;AAAET,WAAK,CAACS,IAAN,GAAa1B,MAAM,CAACiB,KAAP,CAAaS,IAA1B;AAAiC;;AAC1D,QAAI1B,MAAM,CAACiB,KAAP,CAAaU,IAAjB,EAAuB;AAAEV,WAAK,CAACU,IAAN,GAAa3B,MAAM,CAACiB,KAAP,CAAaU,IAA1B;AAAiC;;AAC1D,UAAMV,KAAN;AACH;;AAED,SAAOjB,MAAM,CAACA,MAAd;AACH,C,CAED;;;AACA,SAAS4B,WAAT,CAAqBC,QAArB,EAAqC;AACjC,MAAIA,QAAQ,KAAK,SAAjB,EAA4B;AAAE,UAAM,IAAIX,KAAJ,CAAU,uBAAV,CAAN;AAA2C;;AACzE,MAAIW,QAAQ,KAAK,QAAjB,EAA2B;AAAE,WAAOA,QAAP;AAAkB;;AAE/C,SAAOC,QAAQ,CAACD,QAAQ,CAACE,SAAT,CAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAf;AACH;;AAGD,MAAMC,aAAa,GAAG,oCAAtB;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAAoCjB,KAApC,EAAgDlB,WAAhD,EAAgE;AAC5D;AACA;AACA,MAAImC,MAAM,KAAK,MAAX,IAAqBjB,KAAK,CAACS,IAAN,KAAehC,MAAM,CAACyC,MAAP,CAAcC,YAAtD,EAAoE;AAChE,UAAMC,CAAC,GAAGpB,KAAK,CAACA,KAAhB,CADgE,CAGhE;;AACA,QAAIoB,CAAC,KAAKA,CAAC,CAACrB,OAAF,CAAUsB,KAAV,CAAgB,WAAhB,KAAgCD,CAAC,CAACrB,OAAF,CAAUsB,KAAV,CAAgB,qBAAhB,CAArC,CAAL,EAAmF;AAC/E;AACA,UAAIX,IAAI,GAAGU,CAAC,CAACV,IAAb;;AACA,UAAIA,IAAJ,EAAU;AAAEA,YAAI,GAAG,OAAOA,IAAI,CAACY,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAAd;AAA2C;;AAEvD,UAAInD,WAAW,CAACuC,IAAD,CAAf,EAAuB;AAAE,eAAOA,IAAP;AAAc;;AAEvC/B,YAAM,CAAC4C,UAAP,CAAkB,uCAAlB,EAA2D9C,MAAM,CAACyC,MAAP,CAAcM,cAAzE,EAAyF;AACrFxB,aADqF;AAC9EU,YAAI,EAAE;AADwE,OAAzF;AAGH;AACJ,GAlB2D,CAoB5D;;;AACA,MAAIX,OAAO,GAAGC,KAAK,CAACD,OAApB;;AACA,MAAIC,KAAK,CAACS,IAAN,KAAehC,MAAM,CAACyC,MAAP,CAAcC,YAAjC,EAA+C;AAC3C,QAAInB,KAAK,CAACA,KAAN,IAAe,OAAOA,KAAK,CAACA,KAAN,CAAYD,OAAnB,KAAgC,QAAnD,EAA6D;AACzDA,aAAO,GAAGC,KAAK,CAACA,KAAN,CAAYD,OAAtB;AACH,KAFD,MAEO,IAAI,OAAOC,KAAK,CAACyB,IAAb,KAAuB,QAA3B,EAAqC;AACxC1B,aAAO,GAAGC,KAAK,CAACyB,IAAhB;AACH,KAFM,MAEA,IAAI,OAAOzB,KAAK,CAAC0B,YAAb,KAA+B,QAAnC,EAA6C;AAChD3B,aAAO,GAAGC,KAAK,CAAC0B,YAAhB;AACH;AACJ;;AACD3B,SAAO,GAAG,CAACA,OAAO,IAAI,EAAZ,EAAgBK,WAAhB,EAAV,CA/B4D,CAiC5D;;AACA,MAAIL,OAAO,CAACsB,KAAR,CAAc,oBAAd,CAAJ,EAAyC;AACrC1C,UAAM,CAAC4C,UAAP,CAAkB,mDAAlB,EAAuE9C,MAAM,CAACyC,MAAP,CAAcS,kBAArF,EAAyG;AACtG3B,WADsG;AAC/FiB,YAD+F;AACvFnC;AADuF,KAAzG;AAGH,GAtC2D,CAwC5D;;;AACA,MAAIiB,OAAO,CAACsB,KAAR,CAAc,2EAAd,CAAJ,EAAgG;AAC5F1C,UAAM,CAAC4C,UAAP,CAAkB,6BAAlB,EAAiD9C,MAAM,CAACyC,MAAP,CAAcU,aAA/D,EAA8E;AAC3E5B,WAD2E;AACpEiB,YADoE;AAC5DnC;AAD4D,KAA9E;AAGH,GA7C2D,CA+C5D;;;AACA,MAAIiB,OAAO,CAACsB,KAAR,CAAc,qCAAd,CAAJ,EAA0D;AACrD1C,UAAM,CAAC4C,UAAP,CAAkB,yBAAlB,EAA6C9C,MAAM,CAACyC,MAAP,CAAcW,uBAA3D,EAAoF;AACjF7B,WADiF;AAC1EiB,YAD0E;AAClEnC;AADkE,KAApF;AAGJ;;AAED,MAAIiB,OAAO,CAACsB,KAAR,CAAc,yDAAd,CAAJ,EAA8E;AAC1E1C,UAAM,CAAC4C,UAAP,CAAkB,2EAAlB,EAA+F9C,MAAM,CAACyC,MAAP,CAAcY,uBAA7G,EAAsI;AAClI9B,WADkI;AAC3HiB,YAD2H;AACnHnC;AADmH,KAAtI;AAGH;;AAED,QAAMkB,KAAN;AACH;;AAED,OAAM,MAAO+B,iBAAP,SAAiCnD,YAAjC,CAA6C;AAI/CoD,cAAYC,OAAZ,EAAkCC,MAAlC,EAAiD;AAC7CvD,UAAM,CAACwD,QAAP,CAAgBC,GAAG,CAACC,MAApB,EAA4BN,iBAA5B;AAEA,UAAME,OAAN;AAEA5D,kBAAc,CAAC,IAAD,EAAO,SAAP,EAAkB,KAAKiE,UAAL,EAAlB,CAAd;AACAjE,kBAAc,CAAC,IAAD,EAAO,QAAP,EAAiB6D,MAAM,IAAInB,aAA3B,CAAd;AACH;;AAEDuB,YAAU;AACN,YAAO,KAAKL,OAAL,GAAe,KAAKA,OAAL,CAAaM,IAA5B,GAAkC,SAAzC;AACI,WAAK,WAAL;AACI,eAAO,2BAAP;;AACJ,WAAK,SAAL;AACI,eAAO,mCAAP;;AACJ,WAAK,SAAL;AACI,eAAO,mCAAP;;AACJ,WAAK,OAAL;AACI,eAAO,iCAAP;;AACJ,WAAK,QAAL;AACI,eAAO,kCAAP;;AACJ;AAXJ;;AAcA,WAAO5D,MAAM,CAAC6D,kBAAP,CAA0B,qBAA1B,EAAiD,SAAjD,EAA4DD,IAA5D,CAAP;AACH;;AAEDE,QAAM,CAACC,MAAD,EAAiBC,MAAjB,EAA+C;AACjD,UAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,CAA2B,CAACC,KAAD,EAAQhE,GAAR,KAAe;AACpD,YAAMC,KAAK,GAAG0D,MAAM,CAAC3D,GAAD,CAApB;;AACA,UAAIC,KAAK,IAAI,IAAb,EAAmB;AACf+D,aAAK,IAAI,IAAKhE,GAAI,IAAKC,KAAM,EAA7B;AACH;;AACD,aAAO+D,KAAP;AACH,KANa,EAMX,EANW,CAAd;AAOA,UAAMd,MAAM,GAAK,KAAKA,MAAN,GAAgB,WAAY,KAAKA,MAAO,EAAxC,GAA4C,EAA5D;AACA,WAAO,GAAI,KAAKe,OAAQ,eAAgBP,MAAO,GAAIE,KAAM,GAAIV,MAAO,EAApE;AACH;;AAEDgB,YAAU;AACN,WAAO,GAAI,KAAKD,OAAQ,MAAxB;AACH;;AAEDE,aAAW,CAACT,MAAD,EAAiBC,MAAjB,EAA4C;AACnDA,UAAM,CAACD,MAAP,GAAgBA,MAAhB;AACAC,UAAM,CAACS,MAAP,GAAgB,KAAKlB,MAArB;AACA,WAAOS,MAAP;AACH;;AAEKU,OAAK,CAACX,MAAD,EAAiBC,MAAjB,EAA8CW,IAA9C,EAA4D;;AACnE,YAAMC,GAAG,GAAID,IAAI,GAAG,KAAKJ,UAAL,EAAH,GAAsB,KAAKT,MAAL,CAAYC,MAAZ,EAAoBC,MAApB,CAAvC;AACA,YAAMa,OAAO,GAAIF,IAAI,GAAG,KAAKH,WAAL,CAAiBT,MAAjB,EAAyBC,MAAzB,CAAH,GAAqC,IAA1D;AACA,YAAMc,QAAQ,GAAIf,MAAM,KAAK,OAAZ,GAAuBnC,aAAvB,GAAsCV,SAAvD;AAEA,WAAK6D,IAAL,CAAU,OAAV,EAAmB;AACfC,cAAM,EAAE,SADO;AAEfC,eAAO,EAAEL,GAFM;AAGfM,gBAAQ,EAAE;AAHK,OAAnB;AAMA,YAAMC,UAAU,GAAmB;AAC/BP,WAAG,EAAEA,GAD0B;AAE/BQ,4BAAoB,EAAE,IAFS;AAG/BC,wBAAgB,EAAE,CAACC,OAAD,EAAkBV,GAAlB,KAAiC;AAC/C,cAAI,KAAKW,mBAAL,EAAJ,EAAgC;AAC5B1F,+BAAmB;AACtB;;AACD,iBAAO2F,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACH;AAR8B,OAAnC;AAWA,UAAIC,UAAU,GAAW,IAAzB;;AACA,UAAIb,OAAJ,EAAa;AACTM,kBAAU,CAACQ,OAAX,GAAqB;AAAE,0BAAgB;AAAlB,SAArB;AACAD,kBAAU,GAAGxB,MAAM,CAACC,IAAP,CAAYU,OAAZ,EAAqBhE,GAArB,CAA0BR,GAAD,IAAQ;AAC1C,iBAAO,GAAIA,GAAI,IAAKwE,OAAO,CAACxE,GAAD,CAAM,EAAjC;AACH,SAFY,EAEVY,IAFU,CAEL,GAFK,CAAb;AAGH;;AAED,YAAMb,MAAM,GAAG,MAAMR,SAAS,CAACuF,UAAD,EAAaO,UAAb,EAAyBZ,QAAQ,IAAIlD,aAArC,CAA9B;AAEA,WAAKmD,IAAL,CAAU,OAAV,EAAmB;AACfC,cAAM,EAAE,UADO;AAEfC,eAAO,EAAEL,GAFM;AAGfgB,gBAAQ,EAAEnG,QAAQ,CAACW,MAAD,CAHH;AAIf8E,gBAAQ,EAAE;AAJK,OAAnB;AAOA,aAAO9E,MAAP;AACH;AAAA;;AAEKyF,eAAa;;AACf,aAAO,KAAKvC,OAAZ;AACH;AAAA;;AAEKwC,SAAO,CAACxD,MAAD,EAAiB0B,MAAjB,EAA4B;;;;;;;;AAErC,cAAQ1B,MAAR;AACI,aAAK,gBAAL;AACI,iBAAO,KAAKoC,KAAL,CAAW,OAAX,EAAoB;AAAEM,kBAAM,EAAE;AAAV,WAApB,CAAP;;AAEJ,aAAK,aAAL;AACI,iBAAO,KAAKN,KAAL,CAAW,OAAX,EAAoB;AAAEM,kBAAM,EAAE;AAAV,WAApB,CAAP;;AAEJ,aAAK,YAAL;AACI;AACA,iBAAO,KAAKN,KAAL,CAAW,SAAX,EAAsB;AACzBM,kBAAM,EAAE,SADiB;AAEzBjE,mBAAO,EAAEiD,MAAM,CAACjD,OAFS;AAGzBgF,eAAG,EAAE/B,MAAM,CAAC/B;AAHa,WAAtB,CAAP;;AAMJ,aAAK,qBAAL;AACI,iBAAO,KAAKyC,KAAL,CAAW,OAAX,EAAoB;AACvBM,kBAAM,EAAE,yBADe;AAEvBjE,mBAAO,EAAEiD,MAAM,CAACjD,OAFO;AAGvBgF,eAAG,EAAE/B,MAAM,CAAC/B;AAHW,WAApB,CAAP;;AAMJ,aAAK,SAAL;AACI,iBAAO,KAAKyC,KAAL,CAAW,OAAX,EAAoB;AACvBM,kBAAM,EAAE,aADe;AAEvBjE,mBAAO,EAAEiD,MAAM,CAACjD,OAFO;AAGvBgF,eAAG,EAAE/B,MAAM,CAAC/B;AAHW,WAApB,CAAP;;AAMJ,aAAK,cAAL;AACI,iBAAO,KAAKyC,KAAL,CAAW,OAAX,EAAoB;AACvBM,kBAAM,EAAE,kBADe;AAEvBjE,mBAAO,EAAEiD,MAAM,CAACjD,OAFO;AAGvBiF,oBAAQ,EAAEhC,MAAM,CAACgC,QAHM;AAIvBD,eAAG,EAAE/B,MAAM,CAAC/B;AAJW,WAApB,CAAP;;AAOJ,aAAK,iBAAL;AACI,iBAAO,KAAKyC,KAAL,CAAW,OAAX,EAAoB;AACvBM,kBAAM,EAAE,wBADe;AAEvBiB,eAAG,EAAEjC,MAAM,CAACkC;AAFW,WAApB,EAGJ,IAHI,EAGEC,KAHF,CAGS9E,KAAD,IAAU;AACrB,mBAAOgB,UAAU,CAAC,iBAAD,EAAoBhB,KAApB,EAA2B2C,MAAM,CAACkC,iBAAlC,CAAjB;AACH,WALM,CAAP;;AAOJ,aAAK,UAAL;AACI,cAAIlC,MAAM,CAAC/B,QAAX,EAAqB;AACjB,mBAAO,KAAKyC,KAAL,CAAW,OAAX,EAAoB;AACvBM,oBAAM,EAAE,sBADe;AAEvBe,iBAAG,EAAE/B,MAAM,CAAC/B,QAFW;AAGvBmE,qBAAO,EAAGpC,MAAM,CAACqC,mBAAP,GAA6B,MAA7B,GAAqC;AAHxB,aAApB,CAAP;AAKH;;AACD,gBAAM,IAAI/E,KAAJ,CAAU,uCAAV,CAAN;;AAEJ,aAAK,gBAAL;AACI,iBAAO,KAAKoD,KAAL,CAAW,OAAX,EAAoB;AACvBM,kBAAM,EAAE,0BADe;AAEvBsB,kBAAM,EAAEtC,MAAM,CAACuC;AAFQ,WAApB,CAAP;;AAKJ,aAAK,uBAAL;AACI,iBAAO,KAAK7B,KAAL,CAAW,OAAX,EAAoB;AACvBM,kBAAM,EAAE,2BADe;AAEvBsB,kBAAM,EAAEtC,MAAM,CAACuC;AAFQ,WAApB,CAAP;;AAKJ,aAAK,MAAL;AAAa;AACT,gBAAIvC,MAAM,CAAC/B,QAAP,KAAoB,QAAxB,EAAkC;AAC9B,oBAAM,IAAIX,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAED,kBAAMkF,QAAQ,GAAGtG,sBAAsB,CAAC8D,MAAM,CAAC7D,WAAR,CAAvC;AACAqG,oBAAQ,CAACzC,MAAT,GAAkB,OAAlB;AACAyC,oBAAQ,CAACxB,MAAT,GAAkB,UAAlB;;AAEA,gBAAI;AACA,qBAAO,MAAM,KAAKN,KAAL,CAAW,OAAX,EAAoB8B,QAApB,EAA8B,IAA9B,CAAb;AACH,aAFD,CAEE,OAAOnF,KAAP,EAAc;AACZ,qBAAOgB,UAAU,CAAC,MAAD,EAAShB,KAAT,EAAgB2C,MAAM,CAAC7D,WAAvB,CAAjB;AACH;AACJ;;AAED,aAAK,aAAL;AAAoB;AAChB,kBAAMqG,QAAQ,GAAGtG,sBAAsB,CAAC8D,MAAM,CAAC7D,WAAR,CAAvC;AACAqG,oBAAQ,CAACzC,MAAT,GAAkB,OAAlB;AACAyC,oBAAQ,CAACxB,MAAT,GAAkB,iBAAlB;;AAEA,gBAAI;AACA,qBAAO,MAAM,KAAKN,KAAL,CAAW,OAAX,EAAoB8B,QAApB,EAA8B,IAA9B,CAAb;AACH,aAFD,CAEE,OAAOnF,KAAP,EAAc;AACZ,qBAAOgB,UAAU,CAAC,aAAD,EAAgBhB,KAAhB,EAAuB2C,MAAM,CAAC7D,WAA9B,CAAjB;AACH;AACJ;;AAED,aAAK,SAAL;AAAgB;AACZ,kBAAMsG,IAAI,GAAwB;AAAEzB,oBAAM,EAAE;AAAV,aAAlC;;AAEA,gBAAIhB,MAAM,CAAC0C,MAAP,CAAcC,SAAlB,EAA6B;AACzBF,kBAAI,CAACE,SAAL,GAAiB3E,WAAW,CAACgC,MAAM,CAAC0C,MAAP,CAAcC,SAAf,CAA5B;AACH;;AAED,gBAAI3C,MAAM,CAAC0C,MAAP,CAAcE,OAAlB,EAA2B;AACvBH,kBAAI,CAACG,OAAL,GAAe5E,WAAW,CAACgC,MAAM,CAAC0C,MAAP,CAAcE,OAAf,CAA1B;AACH;;AAED,gBAAI5C,MAAM,CAAC0C,MAAP,CAAc3F,OAAlB,EAA2B;AACvB0F,kBAAI,CAAC1F,OAAL,GAAeiD,MAAM,CAAC0C,MAAP,CAAc3F,OAA7B;AACH,aAbW,CAeZ;;;AACA,gBAAIiD,MAAM,CAAC0C,MAAP,CAAcG,MAAd,IAAwB7C,MAAM,CAAC0C,MAAP,CAAcG,MAAd,CAAqBC,MAArB,GAA8B,CAA1D,EAA6D;AACzD,kBAAI9C,MAAM,CAAC0C,MAAP,CAAcG,MAAd,CAAqBC,MAArB,GAA8B,CAAlC,EAAqC;AACjC9G,sBAAM,CAAC4C,UAAP,CAAkB,yBAAlB,EAA6C9C,MAAM,CAACyC,MAAP,CAAcwE,qBAA3D,EAAkF;AAAEF,wBAAM,EAAE7C,MAAM,CAAC0C,MAAP,CAAcG;AAAxB,iBAAlF;AACH;;AAED,kBAAI7C,MAAM,CAAC0C,MAAP,CAAcG,MAAd,CAAqBC,MAArB,KAAgC,CAApC,EAAuC;AACnC,sBAAME,MAAM,GAAGhD,MAAM,CAAC0C,MAAP,CAAcG,MAAd,CAAqB,CAArB,CAAf;;AACA,oBAAI,OAAOG,MAAP,KAAmB,QAAnB,IAA+BA,MAAM,CAACF,MAAP,KAAkB,EAArD,EAAyD;AACrD9G,wBAAM,CAAC4C,UAAP,CAAkB,0BAAlB,EAA8C9C,MAAM,CAACyC,MAAP,CAAcwE,qBAA5D,EAAmF;AAAEC,0BAAM,EAAEA;AAAV,mBAAnF;AACH;;AACDP,oBAAI,CAACO,MAAL,GAAcA,MAAd;AACH;AACJ;;AAED,kBAAMC,IAAI,GAAe,MAAM,KAAKvC,KAAL,CAAW,MAAX,EAAmB+B,IAAnB,CAA/B,CA9BY,CAgCZ;;AACA,gBAAIS,MAAM,GAA8B,EAAxC,CAjCY,CAmCZ;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACH,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AAClC,oBAAMC,GAAG,GAAGH,IAAI,CAACE,CAAD,CAAhB;;AACA,kBAAIC,GAAG,CAACC,SAAJ,IAAiB,IAArB,EAA2B;AAAE;AAAW;;AACxC,kBAAIH,MAAM,CAACE,GAAG,CAACE,WAAL,CAAN,IAA2B,IAA/B,EAAqC;AACjC,sBAAMC,KAAK,GAAG,MAAM,KAAKC,QAAL,CAAcJ,GAAG,CAACE,WAAlB,CAApB;;AACA,oBAAIC,KAAJ,EAAW;AACPL,wBAAM,CAACE,GAAG,CAACE,WAAL,CAAN,GAA0BC,KAAK,CAACE,IAAhC;AACH;AACJ;;AACDL,iBAAG,CAACC,SAAJ,GAAgBH,MAAM,CAACE,GAAG,CAACE,WAAL,CAAtB;AACH;;AAED,mBAAOL,IAAP;AACH;;AAED,aAAK,eAAL;AACI,cAAI,KAAK3D,OAAL,CAAaM,IAAb,KAAsB,WAA1B,EAAuC;AAAE,mBAAO,GAAP;AAAa;;AACtD,iBAAO8D,UAAU,CAAC,CAAC,MAAM,KAAKhD,KAAL,CAAW,OAAX,EAAoB;AAAEM,kBAAM,EAAE;AAAV,WAApB,CAAP,EAAoD2C,MAArD,CAAjB;;AAEJ;AACI;AAvJR;;AA0JA,aAAOC,OAAM9B,OAAN,CAAa+B,IAAb,CAAa,IAAb,EAAcvF,MAAd,EAAsB0B,MAAtB,CAAP;AACH;AAAA,GAhQ8C,CAkQ/C;AACA;AACA;AACA;;;AACM8D,YAAU,CAACC,aAAD,EAA0CC,UAA1C,EAAiEC,QAAjE,EAAoF;;AAChG,YAAMjE,MAAM,GAAG;AACXgB,cAAM,EAAE,QADG;AAEXjE,eAAO,EAAG,MAAM,KAAKmH,WAAL,CAAiBH,aAAjB,CAFL;AAGXI,kBAAU,EAAIH,UAAU,IAAI,IAAf,GAAuB,CAAvB,GAA0BA,UAH5B;AAIXI,gBAAQ,EAAIH,QAAQ,IAAI,IAAb,GAAqB,QAArB,GAA+BA,QAJ/B;AAKXI,YAAI,EAAE;AALK,OAAf;AAQA,YAAMjI,MAAM,GAAG,MAAM,KAAKsE,KAAL,CAAW,SAAX,EAAsBV,MAAtB,CAArB;AAEA,aAAO5D,MAAM,CAACS,GAAP,CAAYyH,EAAD,IAAY;AAC1B,SAAC,iBAAD,EAAoB,IAApB,EAA0BC,OAA1B,CAAkC,UAASlI,GAAT,EAAY;AAC1C,cAAIiI,EAAE,CAACjI,GAAD,CAAF,IAAW,EAAf,EAAmB;AAAE,mBAAOiI,EAAE,CAACjI,GAAD,CAAT;AAAiB;AACzC,SAFD;;AAGA,YAAIiI,EAAE,CAACE,OAAH,IAAc,IAAd,IAAsBF,EAAE,CAACG,eAAH,IAAsB,IAAhD,EAAsD;AAClDH,YAAE,CAACE,OAAH,GAAaF,EAAE,CAACG,eAAhB;AACH;;AACD,cAAMC,IAAI,GAAG,KAAKC,SAAL,CAAeC,mBAAf,CAAmCN,EAAnC,CAAb;;AACA,YAAIA,EAAE,CAACO,SAAP,EAAkB;AAAEH,cAAI,CAACI,SAAL,GAAiB5G,QAAQ,CAACoG,EAAE,CAACO,SAAJ,CAAzB;AAA0C;;AAC9D,eAAOH,IAAP;AACH,OAVM,CAAP;AAWH;AAAA;;AAEDnD,qBAAmB;AACf,WAAQ,KAAKhC,MAAL,KAAgBnB,aAAxB;AACH;;AAhS8C","names":["hexlify","hexValue","isHexString","deepCopy","defineReadOnly","accessListify","fetchJson","showThrottleMessage","Logger","version","logger","BaseProvider","getTransactionPostData","transaction","result","key","value","type","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","map","set","address","storageKeys","join","getResult","status","message","error","Error","JSON","stringify","toLowerCase","indexOf","throttleRetry","getJsonResult","jsonrpc","code","data","checkLogTag","blockTag","parseInt","substring","defaultApiKey","checkError","method","errors","SERVER_ERROR","e","match","replace","throwError","CALL_EXCEPTION","body","responseText","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","EtherscanProvider","constructor","network","apiKey","checkNew","new","target","getBaseUrl","name","throwArgumentError","getUrl","module","params","query","Object","keys","reduce","accum","baseUrl","getPostUrl","getPostData","apikey","fetch","post","url","payload","procFunc","emit","action","request","provider","connection","throttleSlotInterval","throttleCallback","attempt","isCommunityResource","Promise","resolve","payloadStr","headers","response","detectNetwork","perform","tag","position","hex","signedTransaction","catch","boolean","includeTransactions","txhash","transactionHash","postData","args","filter","fromBlock","toBlock","topics","length","UNSUPPORTED_OPERATION","topic0","logs","blocks","i","log","blockHash","blockNumber","block","getBlock","hash","parseFloat","ethusd","_super","call","getHistory","addressOrName","startBlock","endBlock","resolveName","startblock","endblock","sort","tx","forEach","creates","contractAddress","item","formatter","transactionResponse","timeStamp","timestamp"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || result.message != \"OK\") {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        logger.checkNew(new.target, EtherscanProvider);\n\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}