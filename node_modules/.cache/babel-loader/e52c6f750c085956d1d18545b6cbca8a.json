{"ast":null,"code":"import warning from 'tiny-warning';\n/**\n * Set selector.\n *\n * @param original rule\n * @param className class string\n * @return flag indicating function was successfull or not\n */\n\nfunction registerClass(rule, className) {\n  // Skip falsy values\n  if (!className) return true; // Support array of class names `{composes: ['foo', 'bar']}`\n\n  if (Array.isArray(className)) {\n    for (var index = 0; index < className.length; index++) {\n      var isSetted = registerClass(rule, className[index]);\n      if (!isSetted) return false;\n    }\n\n    return true;\n  } // Support space separated class names `{composes: 'foo bar'}`\n\n\n  if (className.indexOf(' ') > -1) {\n    return registerClass(rule, className.split(' '));\n  }\n\n  var parent = rule.options.parent; // It is a ref to a local rule.\n\n  if (className[0] === '$') {\n    var refRule = parent.getRule(className.substr(1));\n\n    if (!refRule) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Referenced rule is not defined. \\n\" + rule.toString()) : void 0;\n      return false;\n    }\n\n    if (refRule === rule) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Cyclic composition detected. \\n\" + rule.toString()) : void 0;\n      return false;\n    }\n\n    parent.classes[rule.key] += \" \" + parent.classes[refRule.key];\n    return true;\n  }\n\n  parent.classes[rule.key] += \" \" + className;\n  return true;\n}\n/**\n * Convert compose property to additional class, remove property from original styles.\n */\n\n\nfunction jssCompose() {\n  function onProcessStyle(style, rule) {\n    if (!('composes' in style)) return style;\n    registerClass(rule, style.composes); // Remove composes property to prevent infinite loop.\n\n    delete style.composes;\n    return style;\n  }\n\n  return {\n    onProcessStyle: onProcessStyle\n  };\n}\n\nexport default jssCompose;","map":{"version":3,"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/jss-plugin-compose/dist/jss-plugin-compose.esm.js"],"names":["warning","registerClass","rule","className","Array","isArray","index","length","isSetted","indexOf","split","parent","options","refRule","getRule","substr","process","env","NODE_ENV","toString","classes","key","jssCompose","onProcessStyle","style","composes"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,SAA7B,EAAwC;AACtC;AACA,MAAI,CAACA,SAAL,EAAgB,OAAO,IAAP,CAFsB,CAET;;AAE7B,MAAIC,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,EAA8B;AAC5B,SAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,SAAS,CAACI,MAAtC,EAA8CD,KAAK,EAAnD,EAAuD;AACrD,UAAIE,QAAQ,GAAGP,aAAa,CAACC,IAAD,EAAOC,SAAS,CAACG,KAAD,CAAhB,CAA5B;AACA,UAAI,CAACE,QAAL,EAAe,OAAO,KAAP;AAChB;;AAED,WAAO,IAAP;AACD,GAXqC,CAWpC;;;AAGF,MAAIL,SAAS,CAACM,OAAV,CAAkB,GAAlB,IAAyB,CAAC,CAA9B,EAAiC;AAC/B,WAAOR,aAAa,CAACC,IAAD,EAAOC,SAAS,CAACO,KAAV,CAAgB,GAAhB,CAAP,CAApB;AACD;;AAED,MAAIC,MAAM,GAAGT,IAAI,CAACU,OAAL,CAAaD,MAA1B,CAlBsC,CAkBJ;;AAElC,MAAIR,SAAS,CAAC,CAAD,CAAT,KAAiB,GAArB,EAA0B;AACxB,QAAIU,OAAO,GAAGF,MAAM,CAACG,OAAP,CAAeX,SAAS,CAACY,MAAV,CAAiB,CAAjB,CAAf,CAAd;;AAEA,QAAI,CAACF,OAAL,EAAc;AACZG,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClB,OAAO,CAAC,KAAD,EAAQ,6CAA6CE,IAAI,CAACiB,QAAL,EAArD,CAA/C,GAAuH,KAAK,CAA5H;AACA,aAAO,KAAP;AACD;;AAED,QAAIN,OAAO,KAAKX,IAAhB,EAAsB;AACpBc,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClB,OAAO,CAAC,KAAD,EAAQ,0CAA0CE,IAAI,CAACiB,QAAL,EAAlD,CAA/C,GAAoH,KAAK,CAAzH;AACA,aAAO,KAAP;AACD;;AAEDR,IAAAA,MAAM,CAACS,OAAP,CAAelB,IAAI,CAACmB,GAApB,KAA4B,MAAMV,MAAM,CAACS,OAAP,CAAeP,OAAO,CAACQ,GAAvB,CAAlC;AACA,WAAO,IAAP;AACD;;AAEDV,EAAAA,MAAM,CAACS,OAAP,CAAelB,IAAI,CAACmB,GAApB,KAA4B,MAAMlB,SAAlC;AACA,SAAO,IAAP;AACD;AACD;AACA;AACA;;;AAGA,SAASmB,UAAT,GAAsB;AACpB,WAASC,cAAT,CAAwBC,KAAxB,EAA+BtB,IAA/B,EAAqC;AACnC,QAAI,EAAE,cAAcsB,KAAhB,CAAJ,EAA4B,OAAOA,KAAP;AAC5BvB,IAAAA,aAAa,CAACC,IAAD,EAAOsB,KAAK,CAACC,QAAb,CAAb,CAFmC,CAEE;;AAErC,WAAOD,KAAK,CAACC,QAAb;AACA,WAAOD,KAAP;AACD;;AAED,SAAO;AACLD,IAAAA,cAAc,EAAEA;AADX,GAAP;AAGD;;AAED,eAAeD,UAAf","sourcesContent":["import warning from 'tiny-warning';\n\n/**\n * Set selector.\n *\n * @param original rule\n * @param className class string\n * @return flag indicating function was successfull or not\n */\n\nfunction registerClass(rule, className) {\n  // Skip falsy values\n  if (!className) return true; // Support array of class names `{composes: ['foo', 'bar']}`\n\n  if (Array.isArray(className)) {\n    for (var index = 0; index < className.length; index++) {\n      var isSetted = registerClass(rule, className[index]);\n      if (!isSetted) return false;\n    }\n\n    return true;\n  } // Support space separated class names `{composes: 'foo bar'}`\n\n\n  if (className.indexOf(' ') > -1) {\n    return registerClass(rule, className.split(' '));\n  }\n\n  var parent = rule.options.parent; // It is a ref to a local rule.\n\n  if (className[0] === '$') {\n    var refRule = parent.getRule(className.substr(1));\n\n    if (!refRule) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Referenced rule is not defined. \\n\" + rule.toString()) : void 0;\n      return false;\n    }\n\n    if (refRule === rule) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Cyclic composition detected. \\n\" + rule.toString()) : void 0;\n      return false;\n    }\n\n    parent.classes[rule.key] += \" \" + parent.classes[refRule.key];\n    return true;\n  }\n\n  parent.classes[rule.key] += \" \" + className;\n  return true;\n}\n/**\n * Convert compose property to additional class, remove property from original styles.\n */\n\n\nfunction jssCompose() {\n  function onProcessStyle(style, rule) {\n    if (!('composes' in style)) return style;\n    registerClass(rule, style.composes); // Remove composes property to prevent infinite loop.\n\n    delete style.composes;\n    return style;\n  }\n\n  return {\n    onProcessStyle: onProcessStyle\n  };\n}\n\nexport default jssCompose;\n"]},"metadata":{},"sourceType":"module"}