{"ast":null,"code":"import { getDefaultState } from './mutation.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { shallowEqualObjects } from './utils.mjs'; // CLASS\n\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.client.defaultMutationOptions(options);\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}\n\nexport { MutationObserver };","map":{"version":3,"mappings":"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","names":["MutationObserver","Subscribable","constructor","client","options","setOptions","bindMethods","updateResult","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","listeners","length","removeObserver","onMutationUpdate","action","notifyOptions","onSuccess","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","addObserver","execute","state","getDefaultState","result","isLoading","status","isSuccess","isError","isIdle","notifyManager","batch","hasListeners","_this$mutateOptions$o","data","context","onSettled","_this$mutateOptions$o3","error","forEach","listener"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/query-core/src/mutationObserver.ts"],"sourcesContent":["import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}