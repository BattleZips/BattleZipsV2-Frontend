{"ast":null,"code":"import { scheduleMicrotask } from './utils.mjs';\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\n\nconst notifyManager = createNotifyManager();\nexport { createNotifyManager, notifyManager };","map":{"version":3,"mappings":";;AAUO,SAASA,mBAAT,GAA+B;AACpC,MAAIC,KAAuB,GAAG,EAA9B;AACA,MAAIC,YAAY,GAAG,CAAnB;;AACA,MAAIC,QAAwB,GAAIC,QAAD,IAAc;AAC3CA,YAAQ;AADV;;AAGA,MAAIC,aAAkC,GAAID,QAAD,IAA0B;AACjEA,YAAQ;AADV;;AAIA,QAAME,KAAK,GAAOF,QAAJ,IAA6B;AACzC,QAAIG,MAAJ;AACAL,gBAAY;;AACZ,QAAI;AACFK,YAAM,GAAGH,QAAQ,EAAjBG;AADF,cAEU;AACRL,kBAAY;;AACZ,UAAI,CAACA,YAAL,EAAmB;AACjBM,aAAK;AACN;AACF;;AACD,WAAOD,MAAP;AAXF;;AAcA,QAAME,QAAQ,GAAIL,QAAD,IAAoC;AACnD,QAAIF,YAAJ,EAAkB;AAChBD,WAAK,CAACS,IAANT,CAAWG,QAAXH;AADF,WAEO;AACLU,uBAAiB,CAAC,MAAM;AACtBR,gBAAQ,CAACC,QAAD,CAARD;AADe,QAAjBQ;AAGD;AAPH;AAUA;AACF;AACA;;;AACE,QAAMC,UAAU,GAAwBR,QAArB,IAAwC;AACzD,WAAQ,YAAoB;AAAA,wCAAhBS,IAAgB;AAAhBA,YAAgB;AAAA;;AAC1BJ,cAAQ,CAAC,MAAM;AACbL,gBAAQ,CAAC,GAAGS,IAAJ,CAART;AADM,QAARK;AADF;AADF;;AAQA,QAAMD,KAAK,GAAG,MAAY;AACxB,UAAMM,aAAa,GAAGb,KAAtB;AACAA,SAAK,GAAG,EAARA;;AACA,QAAIa,aAAa,CAACC,MAAlB,EAA0B;AACxBJ,uBAAiB,CAAC,MAAM;AACtBN,qBAAa,CAAC,MAAM;AAClBS,uBAAa,CAACE,OAAdF,CAAuBV,QAAD,IAAc;AAClCD,oBAAQ,CAACC,QAAD,CAARD;AADF;AADW,UAAbE;AADe,QAAjBM;AAOD;AAXH;AAcA;AACF;AACA;AACA;;;AACE,QAAMM,iBAAiB,GAAIC,EAAD,IAAwB;AAChDf,YAAQ,GAAGe,EAAXf;AADF;AAIA;AACF;AACA;AACA;;;AACE,QAAMgB,sBAAsB,GAAID,EAAD,IAA6B;AAC1Db,iBAAa,GAAGa,EAAhBb;AADF;;AAIA,SAAO;AACLC,SADK;AAELM,cAFK;AAGLH,YAHK;AAILQ,qBAJK;AAKLE;AALK,GAAP;AAOD,C,CAAA;;;AAGYC,mBAAa,GAAGpB,mBAAmB,EAAnCoB","names":["createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","batch","result","flush","schedule","push","scheduleMicrotask","batchCalls","args","originalQueue","length","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@tanstack/query-core/src/notifyManager.ts"],"sourcesContent":["import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"]},"metadata":{},"sourceType":"module"}