{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"];\nconst forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];\n;\n;\nexport class Signer {\n  ///////////////////\n  // Sub-classes MUST call super\n  constructor() {\n    logger.checkAbstract(new.target, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  } ///////////////////\n  // Sub-classes MAY override these\n\n\n  getBalance(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getBalance\");\n\n      return yield this.provider.getBalance(this.getAddress(), blockTag);\n    });\n  }\n\n  getTransactionCount(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getTransactionCount\");\n\n      return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n    });\n  } // Populates \"from\" if unspecified, and estimates the gas for the transaction\n\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"estimateGas\");\n\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.estimateGas(tx);\n    });\n  } // Populates \"from\" if unspecified, and calls with the transaction\n\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"call\");\n\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.call(tx, blockTag);\n    });\n  } // Populates all fields in a transaction, signs it and sends it to the network\n\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"sendTransaction\");\n\n      const tx = yield this.populateTransaction(transaction);\n      const signedTx = yield this.signTransaction(tx);\n      return yield this.provider.sendTransaction(signedTx);\n    });\n  }\n\n  getChainId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getChainId\");\n\n      const network = yield this.provider.getNetwork();\n      return network.chainId;\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getGasPrice\");\n\n      return yield this.provider.getGasPrice();\n    });\n  }\n\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getFeeData\");\n\n      return yield this.provider.getFeeData();\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"resolveName\");\n\n      return yield this.provider.resolveName(name);\n    });\n  } // Checks a transaction does not contain invalid keys and if\n  // no \"from\" is provided, populates it.\n  // - does NOT require a provider\n  // - adds \"from\" is not present\n  // - returns a COPY (safe to mutate the result)\n  // By default called from: (overriding these prevents it)\n  //   - call\n  //   - estimateGas\n  //   - populateTransaction (and therefor sendTransaction)\n\n\n  checkTransaction(transaction) {\n    for (const key in transaction) {\n      if (allowedTransactionKeys.indexOf(key) === -1) {\n        logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n      }\n    }\n\n    const tx = shallowCopy(transaction);\n\n    if (tx.from == null) {\n      tx.from = this.getAddress();\n    } else {\n      // Make sure any provided address matches this signer\n      tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(result => {\n        if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n\n        return result[0];\n      });\n    }\n\n    return tx;\n  } // Populates ALL keys for a transaction and checks that \"from\" matches\n  // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n  // By default called from: (overriding these prevents it)\n  //   - sendTransaction\n  //\n  // Notes:\n  //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n\n\n  populateTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n\n      if (tx.to != null) {\n        tx.to = Promise.resolve(tx.to).then(to => __awaiter(this, void 0, void 0, function* () {\n          if (to == null) {\n            return null;\n          }\n\n          const address = yield this.resolveName(to);\n\n          if (address == null) {\n            logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n          }\n\n          return address;\n        })); // Prevent this error from causing an UnhandledPromiseException\n\n        tx.to.catch(error => {});\n      } // Do not allow mixing pre-eip-1559 and eip-1559 properties\n\n\n      const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n\n      if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n        logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n      } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n        logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n      }\n\n      if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) {\n        // Fully-formed EIP-1559 transaction (skip getFeeData)\n        tx.type = 2;\n      } else if (tx.type === 0 || tx.type === 1) {\n        // Explicit Legacy or EIP-2930 transaction\n        // Populate missing gasPrice\n        if (tx.gasPrice == null) {\n          tx.gasPrice = this.getGasPrice();\n        }\n      } else {\n        // We need to get fee data to determine things\n        const feeData = yield this.getFeeData();\n\n        if (tx.type == null) {\n          // We need to auto-detect the intended type of this transaction...\n          if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n            // The network supports EIP-1559!\n            // Upgrade transaction from null to eip-1559\n            tx.type = 2;\n\n            if (tx.gasPrice != null) {\n              // Using legacy gasPrice property on an eip-1559 network,\n              // so use gasPrice as both fee properties\n              const gasPrice = tx.gasPrice;\n              delete tx.gasPrice;\n              tx.maxFeePerGas = gasPrice;\n              tx.maxPriorityFeePerGas = gasPrice;\n            } else {\n              // Populate missing fee data\n              if (tx.maxFeePerGas == null) {\n                tx.maxFeePerGas = feeData.maxFeePerGas;\n              }\n\n              if (tx.maxPriorityFeePerGas == null) {\n                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n              }\n            }\n          } else if (feeData.gasPrice != null) {\n            // Network doesn't support EIP-1559...\n            // ...but they are trying to use EIP-1559 properties\n            if (hasEip1559) {\n              logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"populateTransaction\"\n              });\n            } // Populate missing fee data\n\n\n            if (tx.gasPrice == null) {\n              tx.gasPrice = feeData.gasPrice;\n            } // Explicitly set untyped transaction to legacy\n\n\n            tx.type = 0;\n          } else {\n            // getFeeData has failed us.\n            logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"signer.getFeeData\"\n            });\n          }\n        } else if (tx.type === 2) {\n          // Explicitly using EIP-1559\n          // Populate missing fee data\n          if (tx.maxFeePerGas == null) {\n            tx.maxFeePerGas = feeData.maxFeePerGas;\n          }\n\n          if (tx.maxPriorityFeePerGas == null) {\n            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n          }\n        }\n      }\n\n      if (tx.nonce == null) {\n        tx.nonce = this.getTransactionCount(\"pending\");\n      }\n\n      if (tx.gasLimit == null) {\n        tx.gasLimit = this.estimateGas(tx).catch(error => {\n          if (forwardErrors.indexOf(error.code) >= 0) {\n            throw error;\n          }\n\n          return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error: error,\n            tx: tx\n          });\n        });\n      }\n\n      if (tx.chainId == null) {\n        tx.chainId = this.getChainId();\n      } else {\n        tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(results => {\n          if (results[1] !== 0 && results[0] !== results[1]) {\n            logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n          }\n\n          return results[0];\n        });\n      }\n\n      return yield resolveProperties(tx);\n    });\n  } ///////////////////\n  // Sub-classes SHOULD leave these alone\n\n\n  _checkProvider(operation) {\n    if (!this.provider) {\n      logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation || \"_checkProvider\"\n      });\n    }\n  }\n\n  static isSigner(value) {\n    return !!(value && value._isSigner);\n  }\n\n}\nexport class VoidSigner extends Signer {\n  constructor(address, provider) {\n    logger.checkNew(new.target, VoidSigner);\n    super();\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n\n  _fail(message, operation) {\n    return Promise.resolve().then(() => {\n      logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation\n      });\n    });\n  }\n\n  signMessage(message) {\n    return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n  }\n\n  signTransaction(transaction) {\n    return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n  }\n\n  _signTypedData(domain, types, value) {\n    return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n  }\n\n  connect(provider) {\n    return new VoidSigner(this.address, provider);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["defineReadOnly","resolveProperties","shallowCopy","Logger","version","logger","allowedTransactionKeys","forwardErrors","errors","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","Signer","constructor","checkAbstract","new","target","getBalance","blockTag","_checkProvider","provider","getAddress","getTransactionCount","estimateGas","transaction","tx","checkTransaction","call","sendTransaction","populateTransaction","signedTx","signTransaction","getChainId","network","getNetwork","chainId","getGasPrice","getFeeData","resolveName","name","key","indexOf","throwArgumentError","from","Promise","all","resolve","then","result","toLowerCase","to","__awaiter","address","catch","error","hasEip1559","maxFeePerGas","maxPriorityFeePerGas","gasPrice","type","feeData","throwError","UNSUPPORTED_OPERATION","operation","nonce","gasLimit","code","UNPREDICTABLE_GAS_LIMIT","results","isSigner","value","_isSigner","VoidSigner","checkNew","_fail","message","signMessage","_signTypedData","domain","types","connect"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/abstract-signer/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { BlockTag, FeeData, Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { Bytes, BytesLike } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst allowedTransactionKeys: Array<string> = [\n    \"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n];\n\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n\n// EIP-712 Typed Data\n// See: https://eips.ethereum.org/EIPS/eip-712\n\nexport interface TypedDataDomain {\n    name?: string;\n    version?: string;\n    chainId?: BigNumberish;\n    verifyingContract?: string;\n    salt?: BytesLike;\n};\n\nexport interface TypedDataField {\n    name: string;\n    type: string;\n};\n\n// Sub-classes of Signer may optionally extend this interface to indicate\n// they have a private key available synchronously\nexport interface ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n}\n\n// Sub-Class Notes:\n//  - A Signer MUST always make sure, that if present, the \"from\" field\n//    matches the Signer, before sending or signing a transaction\n//  - A Signer SHOULD always wrap private information (such as a private\n//    key or mnemonic) in a function, so that console.log does not leak\n//    the data\n\n// @TODO: This is a temporary measure to preserve backwards compatibility\n//        In v6, the method on TypedDataSigner will be added to Signer\nexport interface TypedDataSigner {\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\nexport abstract class Signer {\n    readonly provider?: Provider;\n\n    ///////////////////\n    // Sub-classes MUST implement these\n\n    // Returns the checksum address\n    abstract getAddress(): Promise<string>\n\n    // Returns the signed prefixed-message. This MUST treat:\n    // - Bytes as a binary message\n    // - string as a UTF8-message\n    // i.e. \"0x1234\" is a SIX (6) byte string, NOT 2 bytes of data\n    abstract signMessage(message: Bytes | string): Promise<string>;\n\n    // Signs a transaction and returns the fully serialized, signed transaction.\n    // The EXACT transaction MUST be signed, and NO additional properties to be added.\n    // - This MAY throw if signing transactions is not supports, but if\n    //   it does, sentTransaction MUST be overridden.\n    abstract signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;\n\n    // Returns a new instance of the Signer, connected to provider.\n    // This MAY throw if changing providers is not supported.\n    abstract connect(provider: Provider): Signer;\n\n    readonly _isSigner: boolean;\n\n\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n\n\n    ///////////////////\n    // Sub-classes MAY override these\n\n    async getBalance(blockTag?: BlockTag): Promise<BigNumber> {\n        this._checkProvider(\"getBalance\");\n        return await this.provider.getBalance(this.getAddress(), blockTag);\n    }\n\n    async getTransactionCount(blockTag?: BlockTag): Promise<number> {\n        this._checkProvider(\"getTransactionCount\");\n        return await this.provider.getTransactionCount(this.getAddress(), blockTag);\n    }\n\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        this._checkProvider(\"estimateGas\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.estimateGas(tx);\n    }\n\n    // Populates \"from\" if unspecified, and calls with the transaction\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag): Promise<string> {\n        this._checkProvider(\"call\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.call(tx, blockTag);\n    }\n\n    // Populates all fields in a transaction, signs it and sends it to the network\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        this._checkProvider(\"sendTransaction\");\n        const tx = await this.populateTransaction(transaction);\n        const signedTx = await this.signTransaction(tx);\n        return await this.provider.sendTransaction(signedTx);\n    }\n\n    async getChainId(): Promise<number> {\n        this._checkProvider(\"getChainId\");\n        const network = await this.provider.getNetwork();\n        return network.chainId;\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        this._checkProvider(\"getGasPrice\");\n        return await this.provider.getGasPrice();\n    }\n\n    async getFeeData(): Promise<FeeData> {\n        this._checkProvider(\"getFeeData\");\n        return await this.provider.getFeeData();\n    }\n\n\n    async resolveName(name: string): Promise<string> {\n        this._checkProvider(\"resolveName\");\n        return await this.provider.resolveName(name);\n    }\n\n\n\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction: Deferrable<TransactionRequest>): Deferrable<TransactionRequest> {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n\n        const tx = shallowCopy(transaction);\n\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n\n        } else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n\n        return tx;\n    }\n\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    async populateTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionRequest> {\n\n        const tx: Deferrable<TransactionRequest> = await resolveProperties(this.checkTransaction(transaction))\n\n        if (tx.to != null) {\n            tx.to = Promise.resolve(tx.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n\n            // Prevent this error from causing an UnhandledPromiseException\n            tx.to.catch((error) => {  });\n        }\n\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n        if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n            logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n        } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n            logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n        }\n\n        if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            tx.type = 2;\n\n        } else if (tx.type === 0 || tx.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n\n            // Populate missing gasPrice\n            if (tx.gasPrice == null) { tx.gasPrice = this.getGasPrice(); }\n\n        } else {\n\n            // We need to get fee data to determine things\n            const feeData = await this.getFeeData();\n\n            if (tx.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to eip-1559\n                    tx.type = 2;\n\n                    if (tx.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = tx.gasPrice;\n                        delete tx.gasPrice;\n                        tx.maxFeePerGas = gasPrice;\n                        tx.maxPriorityFeePerGas = gasPrice;\n\n                    } else {\n                        // Populate missing fee data\n                        if (tx.maxFeePerGas == null) { tx.maxFeePerGas = feeData.maxFeePerGas; }\n                        if (tx.maxPriorityFeePerGas == null) { tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas; }\n                    }\n\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n\n                    // ...but they are trying to use EIP-1559 properties\n                    if (hasEip1559) {\n                        logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"populateTransaction\"\n                        });\n                    }\n\n                    // Populate missing fee data\n                    if (tx.gasPrice == null) { tx.gasPrice = feeData.gasPrice; }\n\n                    // Explicitly set untyped transaction to legacy\n                    tx.type = 0;\n\n                } else {\n                    // getFeeData has failed us.\n                    logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n\n            } else if (tx.type === 2) {\n                // Explicitly using EIP-1559\n\n                // Populate missing fee data\n                if (tx.maxFeePerGas == null) { tx.maxFeePerGas = feeData.maxFeePerGas; }\n                if (tx.maxPriorityFeePerGas == null) { tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas; }\n            }\n        }\n\n        if (tx.nonce == null) { tx.nonce = this.getTransactionCount(\"pending\"); }\n\n        if (tx.gasLimit == null) {\n            tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                if (forwardErrors.indexOf(error.code) >= 0) {\n                    throw error;\n                }\n\n                return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                    error: error,\n                    tx: tx\n                });\n            });\n        }\n\n        if (tx.chainId == null) {\n            tx.chainId = this.getChainId();\n        } else {\n            tx.chainId = Promise.all([\n                Promise.resolve(tx.chainId),\n                this.getChainId()\n            ]).then((results) => {\n                if (results[1] !== 0 && results[0] !== results[1]) {\n                    logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                }\n                return results[0];\n            });\n        }\n\n        return await resolveProperties(tx);\n    }\n\n\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n\n    _checkProvider(operation?: string): void {\n        if (!this.provider) { logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: (operation || \"_checkProvider\") });\n        }\n    }\n\n    static isSigner(value: any): value is Signer {\n        return !!(value && value._isSigner);\n    }\n}\n\nexport class VoidSigner extends Signer implements TypedDataSigner {\n    readonly address: string;\n\n    constructor(address: string, provider?: Provider) {\n        logger.checkNew(new.target, VoidSigner);\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    _fail(message: string, operation: string): Promise<any> {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n\n    signMessage(message: Bytes | string): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n\n    connect(provider: Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}