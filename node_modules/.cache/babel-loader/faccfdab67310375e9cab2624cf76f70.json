{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class ErrorDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n\n}\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\n\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n\nexport class Interface {\n  constructor(fragments) {\n    logger.checkNew(new.target, Interface);\n    let abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n\n        case \"error\":\n          bucket = this.errors;\n          break;\n\n        default:\n          return;\n      }\n\n      let signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n\n    const abi = this.fragments.map(fragment => fragment.format(format)); // We need to re-bundle the JSON fragments a bit\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n\n    return abi;\n  } // Sub-classes can override these to handle other blockchains\n\n\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n\n  static getAddress(address) {\n    return getAddress(address);\n  }\n\n  static getSighash(fragment) {\n    return hexDataSlice(id(fragment.format()), 0, 4);\n  }\n\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  } // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n\n      return this.functions[matching[0]];\n    } // Normalize the signature and lookup the function\n\n\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  } // Find an event definition by any means necessary (unless it is ambiguous)\n\n\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n\n      return this.events[matching[0]];\n    } // Normalize the signature and lookup the function\n\n\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n\n    return result;\n  } // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  getError(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      const getSighash = getStatic(this.constructor, \"getSighash\");\n\n      for (const name in this.errors) {\n        const error = this.errors[name];\n\n        if (nameOrSignatureOrSighash === getSighash(error)) {\n          return this.errors[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.errors).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching error\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n      }\n\n      return this.errors[matching[0]];\n    } // Normalize the signature and lookup the function\n\n\n    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n\n  getSighash(fragment) {\n    if (typeof fragment === \"string\") {\n      try {\n        fragment = this.getFunction(fragment);\n      } catch (error) {\n        try {\n          fragment = this.getError(fragment);\n        } catch (_) {\n          throw error;\n        }\n      }\n    }\n\n    return getStatic(this.constructor, \"getSighash\")(fragment);\n  } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n\n    const bytes = arrayify(data);\n\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n      logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n    }\n\n    return this._decodeParams(fragment.inputs, bytes.slice(4));\n  }\n\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n\n    return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n  } // Decode the data for a function call (e.g. tx.data)\n\n\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    const bytes = arrayify(data);\n\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  } // Encode the data for a function call (e.g. tx.data)\n\n\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  } // Decode the result from a function call (e.g. from eth_call)\n\n\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    let bytes = arrayify(data);\n    let reason = null;\n    let errorArgs = null;\n    let errorName = null;\n    let errorSignature = null;\n\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n\n        break;\n\n      case 4:\n        {\n          const selector = hexlify(bytes.slice(0, 4));\n          const builtin = BuiltinErrors[selector];\n\n          if (builtin) {\n            errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n            errorName = builtin.name;\n            errorSignature = builtin.signature;\n\n            if (builtin.reason) {\n              reason = errorArgs[0];\n            }\n          } else {\n            try {\n              const error = this.getError(selector);\n              errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n              errorName = error.name;\n              errorSignature = error.format();\n            } catch (error) {}\n          }\n\n          break;\n        }\n    }\n\n    return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      errorArgs,\n      errorName,\n      errorSignature,\n      reason\n    });\n  } // Encode the result for a function call (e.g. for eth_call)\n\n\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n\n    let topics = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      } // Check addresses are valid\n\n\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n\n      return hexZeroPad(hexlify(value), 32);\n    };\n\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n\n        return;\n      }\n\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    }); // Trim off trailing nulls\n\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n\n    return topics;\n  }\n\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  } // Decode a filter for the event and the search criteria\n\n\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n\n      topics = topics.slice(1);\n    }\n\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n    let result = [];\n    let nonIndexedIndex = 0,\n        indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      } // Add the keyword argument if named and safe\n\n\n      if (param.name && result[param.name] == null) {\n        const value = result[index]; // Make error named values throw on access\n\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            enumerable: true,\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    }); // Make all error indexed values throw on access\n\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          enumerable: true,\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n\n    return Object.freeze(result);\n  } // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n\n\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  } // @TODO\n  //parseCallResult(data: BytesLike): ??\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n\n\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n\n    if (!fragment || fragment.anonymous) {\n      return null;\n    } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n\n\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n\n  parseError(data) {\n    const hexData = hexlify(data);\n    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new ErrorDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n      errorFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n\n\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","ErrorDescription","Indexed","isIndexed","value","_isIndexed","BuiltinErrors","signature","name","inputs","reason","wrapAccessError","property","error","wrap","Error","Interface","constructor","fragments","checkNew","new","target","abi","JSON","parse","map","fragment","from","filter","forEach","bucket","type","deploy","warn","functions","events","errors","format","payable","full","sighash","throwArgumentError","json","stringify","j","getAbiCoder","address","getSighash","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getError","_","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeErrorResult","bytes","slice","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","errorArgs","errorName","errorSignature","_getWordSize","outputs","selector","builtin","throwError","CALL_EXCEPTION","method","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","index","indexed","baseType","Array","isArray","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","enumerable","get","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","parseError","hexData","errorFragment","isInterface","_isInterface"],"sources":["/Users/ianbrighton/Documents/Mach 34/BattleZipsV2/BattleZipsV2-Frontend/node_modules/@ethersproject/abi/src.ts/interface.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        logger.checkNew(new.target, Interface);\n\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = eventFragment.inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}