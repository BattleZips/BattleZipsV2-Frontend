type Address = `0x${string}`;
type BlockExplorer = {
    name: string;
    url: string;
};
type Chain = {
    /** ID in number form */
    id: number;
    /** Human-readable name */
    name: string;
    /** Internal network name */
    network: string;
    /** Currency used by chain */
    nativeCurrency: NativeCurrency;
    /** Collection of RPC endpoints */
    rpcUrls: {
        [key: string]: RpcUrls;
        default: RpcUrls;
        public: RpcUrls;
    };
    /** Collection of block explorers */
    blockExplorers?: {
        [key: string]: BlockExplorer;
        default: BlockExplorer;
    };
    /** Collection of contracts */
    contracts?: {
        ensRegistry?: Contract;
        multicall3?: Contract;
    };
    /** Flag for test networks */
    testnet?: boolean;
};
type Contract = {
    address: Address;
    blockCreated?: number;
};
type NativeCurrency = {
    name: string;
    /** 2-6 characters long */
    symbol: string;
    decimals: number;
};
type RpcUrls = {
    http: readonly string[];
    webSocket?: readonly string[];
};

declare const arbitrum: {
    readonly id: 42161;
    readonly name: "Arbitrum One";
    readonly network: "arbitrum";
    readonly nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly alchemy: {
            readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
            readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
        };
        readonly infura: {
            readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
            readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
        };
        readonly public: {
            readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Arbiscan";
            readonly url: "https://arbiscan.io";
        };
        readonly default: {
            readonly name: "Arbiscan";
            readonly url: "https://arbiscan.io";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 7654707;
        };
    };
};

declare const arbitrumGoerli: {
    readonly id: 421613;
    readonly name: "Arbitrum Goerli";
    readonly network: "arbitrum-goerli";
    readonly nativeCurrency: {
        readonly name: "Arbitrum Goerli Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly alchemy: {
            readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
            readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
        };
        readonly infura: {
            readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
            readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
        };
        readonly public: {
            readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Arbiscan";
            readonly url: "https://goerli.arbiscan.io/";
        };
        readonly default: {
            readonly name: "Arbiscan";
            readonly url: "https://goerli.arbiscan.io/";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 88114;
        };
    };
    readonly testnet: true;
};

declare const aurora: {
    readonly id: 1313161554;
    readonly name: "Aurora";
    readonly network: "aurora";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Ether";
        readonly symbol: "ETH";
    };
    readonly rpcUrls: {
        readonly infura: {
            readonly http: readonly ["https://aurora-mainnet.infura.io/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://mainnet.aurora.dev"];
        };
        readonly public: {
            readonly http: readonly ["https://mainnet.aurora.dev"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Aurorascan";
            readonly url: "https://aurorascan.dev";
        };
        readonly default: {
            readonly name: "Aurorascan";
            readonly url: "https://aurorascan.dev";
        };
    };
};

declare const auroraTestnet: {
    readonly id: 1313161555;
    readonly name: "Aurora Testnet";
    readonly network: "aurora-testnet";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Ether";
        readonly symbol: "ETH";
    };
    readonly rpcUrls: {
        readonly infura: {
            readonly http: readonly ["https://aurora-testnet.infura.io/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://testnet.aurora.dev"];
        };
        readonly public: {
            readonly http: readonly ["https://testnet.aurora.dev"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Aurorascan";
            readonly url: "https://testnet.aurorascan.dev";
        };
        readonly default: {
            readonly name: "Aurorascan";
            readonly url: "https://testnet.aurorascan.dev";
        };
    };
    readonly testnet: true;
};

declare const avalanche: {
    readonly id: 43114;
    readonly name: "Avalanche";
    readonly network: "avalanche";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Avalanche";
        readonly symbol: "AVAX";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
        };
        readonly public: {
            readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "SnowTrace";
            readonly url: "https://snowtrace.io";
        };
        readonly default: {
            readonly name: "SnowTrace";
            readonly url: "https://snowtrace.io";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 11907934;
        };
    };
};

declare const avalancheFuji: {
    readonly id: 43113;
    readonly name: "Avalanche Fuji";
    readonly network: "avalanche-fuji";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Avalanche Fuji";
        readonly symbol: "AVAX";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
        };
        readonly public: {
            readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "SnowTrace";
            readonly url: "https://testnet.snowtrace.io";
        };
        readonly default: {
            readonly name: "SnowTrace";
            readonly url: "https://testnet.snowtrace.io";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 7096959;
        };
    };
    readonly testnet: true;
};

declare const bronos: {
    readonly id: 1039;
    readonly name: "Bronos";
    readonly network: "bronos";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "BRO";
        readonly symbol: "BRO";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://evm.bronos.org"];
        };
        readonly public: {
            readonly http: readonly ["https://evm.bronos.org"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "BronoScan";
            readonly url: "https://broscan.bronos.org";
        };
    };
};

declare const bronosTestnet: {
    readonly id: 1038;
    readonly name: "Bronos Testnet";
    readonly network: "bronos-testnet";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Bronos Coin";
        readonly symbol: "tBRO";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://evm-testnet.bronos.org"];
        };
        readonly public: {
            readonly http: readonly ["https://evm-testnet.bronos.org"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "BronoScan";
            readonly url: "https://tbroscan.bronos.org";
        };
    };
    readonly testnet: true;
};

declare const bsc: {
    readonly id: 56;
    readonly name: "BNB Smart Chain";
    readonly network: "bsc";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "BNB";
        readonly symbol: "BNB";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://rpc.ankr.com/bsc"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.ankr.com/bsc"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "BscScan";
            readonly url: "https://bscscan.com";
        };
        readonly default: {
            readonly name: "BscScan";
            readonly url: "https://bscscan.com";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 15921452;
        };
    };
};

declare const bscTestnet: {
    readonly id: 97;
    readonly name: "Binance Smart Chain Testnet";
    readonly network: "bsc-testnet";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "BNB";
        readonly symbol: "tBNB";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://bsc-testnet.public.blastapi.io"];
        };
        readonly public: {
            readonly http: readonly ["https://bsc-testnet.public.blastapi.io"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "BscScan";
            readonly url: "https://testnet.bscscan.com";
        };
        readonly default: {
            readonly name: "BscScan";
            readonly url: "https://testnet.bscscan.com";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 17422483;
        };
    };
    readonly testnet: true;
};

declare const canto: {
    readonly id: 7700;
    readonly name: "Canto";
    readonly network: "canto";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Canto";
        readonly symbol: "CANTO";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://canto.slingshot.finance"];
        };
        readonly public: {
            readonly http: readonly ["https://canto.slingshot.finance"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Canto EVM Explorer (Blockscout)";
            readonly url: "https://evm.explorer.canto.io";
        };
    };
};

declare const celo: {
    readonly id: 42220;
    readonly name: "Celo";
    readonly network: "celo";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "CELO";
        readonly symbol: "CELO";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://forno.celo.org"];
        };
        readonly infura: {
            readonly http: readonly ["https://celo-mainnet.infura.io/v3"];
        };
        readonly public: {
            readonly http: readonly ["https://forno.celo.org"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Celo Explorer";
            readonly url: "https://explorer.celo.org/mainnet";
        };
        readonly etherscan: {
            readonly name: "CeloScan";
            readonly url: "https://celoscan.io";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
            readonly blockCreated: 13112599;
        };
    };
    readonly testnet: false;
};

declare const celoAlfajores: {
    readonly id: 44787;
    readonly name: "Alfajores";
    readonly network: "celo-alfajores";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "CELO";
        readonly symbol: "A-CELO";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://alfajores-forno.celo-testnet.org"];
        };
        readonly infura: {
            readonly http: readonly ["https://celo-alfajores.infura.io/v3"];
        };
        readonly public: {
            readonly http: readonly ["https://alfajores-forno.celo-testnet.org"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Celo Explorer";
            readonly url: "https://explorer.celo.org/alfajores";
        };
        readonly etherscan: {
            readonly name: "CeloScan";
            readonly url: "https://alfajores.celoscan.io/";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
            readonly blockCreated: 14569001;
        };
    };
    readonly testnet: true;
};

declare const crossbell: {
    readonly id: 3737;
    readonly network: "crossbell";
    readonly name: "Crossbell";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "CSB";
        readonly symbol: "CSB";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://rpc.crossbell.io"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.crossbell.io"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "CrossScan";
            readonly url: "https://scan.crossbell.io";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xBB9759009cDaC82774EfC84D94cD9F7440f75Fcf";
            readonly blockCreated: 23499787;
        };
    };
};

declare const evmos: {
    readonly id: 9001;
    readonly name: "Evmos";
    readonly network: "evmos";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Evmos";
        readonly symbol: "EVMOS";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://eth.bd.evmos.org:8545"];
        };
        readonly public: {
            readonly http: readonly ["https://eth.bd.evmos.org:8545"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Evmos Block Explorer";
            readonly url: "https://escan.live/";
        };
    };
};

declare const evmosTestnet: {
    readonly id: 9000;
    readonly name: "Evmos Testnet";
    readonly network: "evmos-testnet";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Evmos";
        readonly symbol: "EVMOS";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://eth.bd.evmos.dev:8545"];
        };
        readonly public: {
            readonly http: readonly ["https://eth.bd.evmos.dev:8545"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Evmos Testnet Block Explorer";
            readonly url: "https://evm.evmos.dev/";
        };
    };
};

declare const fantom: {
    readonly id: 250;
    readonly name: "Fantom";
    readonly network: "fantom";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Fantom";
        readonly symbol: "FTM";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://rpc.ankr.com/fantom"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.ankr.com/fantom"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "FTMScan";
            readonly url: "https://ftmscan.com";
        };
        readonly default: {
            readonly name: "FTMScan";
            readonly url: "https://ftmscan.com";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 33001987;
        };
    };
};

declare const fantomTestnet: {
    readonly id: 4002;
    readonly name: "Fantom Testnet";
    readonly network: "fantom-testnet";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Fantom";
        readonly symbol: "FTM";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://rpc.testnet.fantom.network"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.testnet.fantom.network"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "FTMScan";
            readonly url: "https://testnet.ftmscan.com";
        };
        readonly default: {
            readonly name: "FTMScan";
            readonly url: "https://testnet.ftmscan.com";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 8328688;
        };
    };
};

declare const filecoin: {
    readonly id: 314;
    readonly name: "Filecoin Mainnet";
    readonly network: "filecoin-mainnet";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "filecoin";
        readonly symbol: "FIL";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://api.node.glif.io"];
        };
        readonly public: {
            readonly http: readonly ["https://api.node.glif.io"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Filfox";
            readonly url: "https://filfox.info/en";
        };
        readonly filscan: {
            readonly name: "Filscan";
            readonly url: "https://filscan.io";
        };
        readonly filscout: {
            readonly name: "Filscout";
            readonly url: "https://filscout.io/en";
        };
    };
};

declare const filecoinHyperspace: {
    readonly id: 3141;
    readonly name: "Filecoin Hyperspace";
    readonly network: "filecoin-hyperspace";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "testnet filecoin";
        readonly symbol: "tFIL";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://api.hyperspace.node.glif.io/rpc/v1"];
        };
        readonly public: {
            readonly http: readonly ["https://api.hyperspace.node.glif.io/rpc/v1"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Filfox";
            readonly url: "https://hyperspace.filfox.info/en";
        };
        readonly gilf: {
            readonly name: "Glif";
            readonly url: "https://explorer.glif.io/?network=hyperspace";
        };
    };
};

declare const foundry: {
    readonly id: 31337;
    readonly name: "Foundry";
    readonly network: "foundry";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Ether";
        readonly symbol: "ETH";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:8545"];
        };
        readonly public: {
            readonly http: readonly ["http://127.0.0.1:8545"];
        };
    };
};

declare const iotex: {
    readonly id: 4689;
    readonly name: "IoTeX";
    readonly network: "iotex";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "IoTeX";
        readonly symbol: "IOTX";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://babel-api.mainnet.iotex.io"];
            readonly webSocket: readonly ["wss://babel-api.mainnet.iotex.io"];
        };
        readonly public: {
            readonly http: readonly ["https://babel-api.mainnet.iotex.io"];
            readonly webSocket: readonly ["wss://babel-api.mainnet.iotex.io"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "IoTeXScan";
            readonly url: "https://iotexscan.io";
        };
    };
};

declare const iotexTestnet: {
    readonly id: 4690;
    readonly name: "IoTeX Testnet";
    readonly network: "iotex-testnet";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "IoTeX";
        readonly symbol: "IOTX";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://babel-api.testnet.iotex.io"];
            readonly webSocket: readonly ["wss://babel-api.testnet.iotex.io"];
        };
        readonly public: {
            readonly http: readonly ["https://babel-api.testnet.iotex.io"];
            readonly webSocket: readonly ["wss://babel-api.testnet.iotex.io"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "IoTeXScan";
            readonly url: "https://testnet.iotexscan.io";
        };
    };
};

declare const goerli: {
    readonly id: 5;
    readonly network: "goerli";
    readonly name: "Goerli";
    readonly nativeCurrency: {
        readonly name: "Goerli Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly alchemy: {
            readonly http: readonly ["https://eth-goerli.g.alchemy.com/v2"];
            readonly webSocket: readonly ["wss://eth-goerli.g.alchemy.com/v2"];
        };
        readonly infura: {
            readonly http: readonly ["https://goerli.infura.io/v3"];
            readonly webSocket: readonly ["wss://goerli.infura.io/ws/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://rpc.ankr.com/eth_goerli"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.ankr.com/eth_goerli"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Etherscan";
            readonly url: "https://goerli.etherscan.io";
        };
        readonly default: {
            readonly name: "Etherscan";
            readonly url: "https://goerli.etherscan.io";
        };
    };
    readonly contracts: {
        readonly ensRegistry: {
            readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
        };
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 6507670;
        };
    };
    readonly testnet: true;
};

declare const gnosis: {
    readonly id: 100;
    readonly name: "Gnosis";
    readonly network: "gnosis";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Gnosis";
        readonly symbol: "xDAI";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://rpc.gnosischain.com"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.gnosischain.com"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Gnosisscan";
            readonly url: "https://gnosisscan.io/";
        };
        readonly default: {
            readonly name: "Gnosis Chain Explorer";
            readonly url: "https://blockscout.com/xdai/mainnet/";
        };
    };
};

declare const gnosisChiado: {
    readonly id: 10200;
    readonly name: "Gnosis Chiado";
    readonly network: "chiado";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Gnosis";
        readonly symbol: "xDAI";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://rpc.chiadochain.net"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.chiadochain.net"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Blockscout";
            readonly url: "https://blockscout.chiadochain.net";
        };
    };
};

declare const hardhat: {
    readonly id: 31337;
    readonly name: "Hardhat";
    readonly network: "hardhat";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Ether";
        readonly symbol: "ETH";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:8545"];
        };
        readonly public: {
            readonly http: readonly ["http://127.0.0.1:8545"];
        };
    };
};

declare const localhost: {
    readonly id: 1337;
    readonly name: "Localhost";
    readonly network: "localhost";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Ether";
        readonly symbol: "ETH";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:8545"];
        };
        readonly public: {
            readonly http: readonly ["http://127.0.0.1:8545"];
        };
    };
};

declare const mainnet: {
    readonly id: 1;
    readonly network: "homestead";
    readonly name: "Ethereum";
    readonly nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly alchemy: {
            readonly http: readonly ["https://eth-mainnet.g.alchemy.com/v2"];
            readonly webSocket: readonly ["wss://eth-mainnet.g.alchemy.com/v2"];
        };
        readonly infura: {
            readonly http: readonly ["https://mainnet.infura.io/v3"];
            readonly webSocket: readonly ["wss://mainnet.infura.io/ws/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://cloudflare-eth.com"];
        };
        readonly public: {
            readonly http: readonly ["https://cloudflare-eth.com"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Etherscan";
            readonly url: "https://etherscan.io";
        };
        readonly default: {
            readonly name: "Etherscan";
            readonly url: "https://etherscan.io";
        };
    };
    readonly contracts: {
        readonly ensRegistry: {
            readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
        };
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 14353601;
        };
    };
};

declare const metis: {
    readonly id: 1088;
    readonly name: "Metis";
    readonly network: "andromeda";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Metis";
        readonly symbol: "METIS";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://andromeda.metis.io/?owner=1088"];
        };
        readonly public: {
            readonly http: readonly ["https://andromeda.metis.io/?owner=1088"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Andromeda Explorer";
            readonly url: "https://andromeda-explorer.metis.io";
        };
    };
};

declare const metisGoerli: {
    readonly id: 599;
    readonly name: "Metis Goerli";
    readonly network: "metis-goerli";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Metis Goerli";
        readonly symbol: "METIS";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://goerli.gateway.metisdevops.link"];
        };
        readonly public: {
            readonly http: readonly ["https://goerli.gateway.metisdevops.link"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Metis Goerli Explorer";
            readonly url: "https://goerli.explorer.metisdevops.link";
        };
    };
};

declare const okc: {
    readonly id: 66;
    readonly name: "OKC";
    readonly network: "okc";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "OKT";
        readonly symbol: "OKT";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://exchainrpc.okex.org"];
        };
        readonly public: {
            readonly http: readonly ["https://exchainrpc.okex.org"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "oklink";
            readonly url: "https://www.oklink.com/okc";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 10364792;
        };
    };
};

declare const optimism: {
    readonly id: 10;
    readonly name: "Optimism";
    readonly network: "optimism";
    readonly nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly alchemy: {
            readonly http: readonly ["https://opt-mainnet.g.alchemy.com/v2"];
            readonly webSocket: readonly ["wss://opt-mainnet.g.alchemy.com/v2"];
        };
        readonly infura: {
            readonly http: readonly ["https://optimism-mainnet.infura.io/v3"];
            readonly webSocket: readonly ["wss://optimism-mainnet.infura.io/ws/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://mainnet.optimism.io"];
        };
        readonly public: {
            readonly http: readonly ["https://mainnet.optimism.io"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Etherscan";
            readonly url: "https://optimistic.etherscan.io";
        };
        readonly default: {
            readonly name: "Optimism Explorer";
            readonly url: "https://explorer.optimism.io";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 4286263;
        };
    };
};

declare const optimismGoerli: {
    readonly id: 420;
    readonly name: "Optimism Goerli";
    readonly network: "optimism-goerli";
    readonly nativeCurrency: {
        readonly name: "Goerli Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly alchemy: {
            readonly http: readonly ["https://opt-goerli.g.alchemy.com/v2"];
            readonly webSocket: readonly ["wss://opt-goerli.g.alchemy.com/v2"];
        };
        readonly infura: {
            readonly http: readonly ["https://optimism-goerli.infura.io/v3"];
            readonly webSocket: readonly ["wss://optimism-goerli.infura.io/ws/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://goerli.optimism.io"];
        };
        readonly public: {
            readonly http: readonly ["https://goerli.optimism.io"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Etherscan";
            readonly url: "https://goerli-optimism.etherscan.io";
        };
        readonly default: {
            readonly name: "Etherscan";
            readonly url: "https://goerli-optimism.etherscan.io";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 49461;
        };
    };
    readonly testnet: true;
};

declare const polygon: {
    readonly id: 137;
    readonly name: "Polygon";
    readonly network: "matic";
    readonly nativeCurrency: {
        readonly name: "MATIC";
        readonly symbol: "MATIC";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly alchemy: {
            readonly http: readonly ["https://polygon-mainnet.g.alchemy.com/v2"];
            readonly webSocket: readonly ["wss://polygon-mainnet.g.alchemy.com/v2"];
        };
        readonly infura: {
            readonly http: readonly ["https://polygon-mainnet.infura.io/v3"];
            readonly webSocket: readonly ["wss://polygon-mainnet.infura.io/ws/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://polygon-rpc.com"];
        };
        readonly public: {
            readonly http: readonly ["https://polygon-rpc.com"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "PolygonScan";
            readonly url: "https://polygonscan.com";
        };
        readonly default: {
            readonly name: "PolygonScan";
            readonly url: "https://polygonscan.com";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 25770160;
        };
    };
};

declare const polygonMumbai: {
    readonly id: 80001;
    readonly name: "Polygon Mumbai";
    readonly network: "maticmum";
    readonly nativeCurrency: {
        readonly name: "MATIC";
        readonly symbol: "MATIC";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly alchemy: {
            readonly http: readonly ["https://polygon-mumbai.g.alchemy.com/v2"];
            readonly webSocket: readonly ["wss://polygon-mumbai.g.alchemy.com/v2"];
        };
        readonly infura: {
            readonly http: readonly ["https://polygon-mumbai.infura.io/v3"];
            readonly webSocket: readonly ["wss://polygon-mumbai.infura.io/ws/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://matic-mumbai.chainstacklabs.com"];
        };
        readonly public: {
            readonly http: readonly ["https://matic-mumbai.chainstacklabs.com"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "PolygonScan";
            readonly url: "https://mumbai.polygonscan.com";
        };
        readonly default: {
            readonly name: "PolygonScan";
            readonly url: "https://mumbai.polygonscan.com";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 25770160;
        };
    };
    readonly testnet: true;
};

declare const sepolia: {
    readonly id: 11155111;
    readonly network: "sepolia";
    readonly name: "Sepolia";
    readonly nativeCurrency: {
        readonly name: "Sepolia Ether";
        readonly symbol: "SEP";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly infura: {
            readonly http: readonly ["https://sepolia.infura.io/v3"];
            readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
        };
        readonly default: {
            readonly http: readonly ["https://rpc.sepolia.org"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.sepolia.org"];
        };
    };
    readonly blockExplorers: {
        readonly etherscan: {
            readonly name: "Etherscan";
            readonly url: "https://sepolia.etherscan.io";
        };
        readonly default: {
            readonly name: "Etherscan";
            readonly url: "https://sepolia.etherscan.io";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 6507670;
        };
    };
    readonly testnet: true;
};

declare const taraxa: {
    readonly id: 841;
    readonly name: "Taraxa Mainnet";
    readonly network: "taraxa";
    readonly nativeCurrency: {
        readonly name: "Tara";
        readonly symbol: "TARA";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://rpc.mainnet.taraxa.io"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.mainnet.taraxa.io"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Taraxa Explorer";
            readonly url: "https://explorer.mainnet.taraxa.io";
        };
    };
};

declare const taraxaTestnet: {
    readonly id: 842;
    readonly name: "Taraxa Testnet";
    readonly network: "taraxa-testnet";
    readonly nativeCurrency: {
        readonly name: "Tara";
        readonly symbol: "TARA";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://rpc.testnet.taraxa.io"];
        };
        readonly public: {
            readonly http: readonly ["https://rpc.testnet.taraxa.io"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Taraxa Explorer";
            readonly url: "https://explorer.testnet.taraxa.io";
        };
    };
    readonly testnet: true;
};

declare const telos: {
    readonly id: 40;
    readonly name: "Telos";
    readonly network: "telos";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Telos";
        readonly symbol: "TLOS";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://mainnet.telos.net/evm"];
        };
        readonly public: {
            readonly http: readonly ["https://mainnet.telos.net/evm"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Teloscan";
            readonly url: "https://www.teloscan.io/";
        };
    };
    readonly contracts: {
        readonly multicall3: {
            readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
            readonly blockCreated: 246530709;
        };
    };
};

declare const telosTestnet: {
    readonly id: 41;
    readonly name: "Telos";
    readonly network: "telosTestnet";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Telos";
        readonly symbol: "TLOS";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://testnet.telos.net/evm"];
        };
        readonly public: {
            readonly http: readonly ["https://testnet.telos.net/evm"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "Teloscan (testnet)";
            readonly url: "https://testnet.teloscan.io/";
        };
    };
    readonly testnet: true;
};

declare const zkSync: {
    readonly id: 324;
    readonly name: "zkSync";
    readonly network: "zksync";
    readonly nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Ether";
        readonly symbol: "ETH";
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://zksync2-mainnet.zksync.io"];
            readonly webSocket: readonly ["wss://zksync2-mainnet.zksync.io/ws"];
        };
        readonly public: {
            readonly http: readonly ["https://zksync2-mainnet.zksync.io"];
            readonly webSocket: readonly ["wss://zksync2-mainnet.zksync.io/ws"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "zkExplorer";
            readonly url: "https://explorer.zksync.io";
        };
    };
};

declare const zkSyncTestnet: {
    readonly id: 280;
    readonly name: "zkSync Testnet";
    readonly network: "zksync-testnet";
    readonly nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    readonly rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://zksync2-testnet.zksync.dev"];
            readonly webSocket: readonly ["wss://zksync2-testnet.zksync.dev/ws"];
        };
        readonly public: {
            readonly http: readonly ["https://zksync2-testnet.zksync.dev"];
            readonly webSocket: readonly ["wss://zksync2-testnet.zksync.dev/ws"];
        };
    };
    readonly blockExplorers: {
        readonly default: {
            readonly name: "zkExplorer";
            readonly url: "https://goerli.explorer.zksync.io";
        };
    };
    readonly testnet: true;
};

export { Chain, arbitrum, arbitrumGoerli, aurora, auroraTestnet, avalanche, avalancheFuji, bronos, bronosTestnet, bsc, bscTestnet, canto, celo, celoAlfajores, crossbell, evmos, evmosTestnet, fantom, fantomTestnet, filecoin, filecoinHyperspace, foundry, gnosis, gnosisChiado, goerli, hardhat, iotex, iotexTestnet, localhost, mainnet, metis, metisGoerli, okc, optimism, optimismGoerli, polygon, polygonMumbai, sepolia, taraxa, taraxaTestnet, telos, telosTestnet, zkSync, zkSyncTestnet };
