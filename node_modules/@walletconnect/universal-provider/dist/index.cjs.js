"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var P=require("pino"),w=require("@walletconnect/sign-client"),d=require("@walletconnect/utils"),C=require("@walletconnect/logger"),a=require("@walletconnect/jsonrpc-provider"),p=require("@walletconnect/jsonrpc-http-connection"),I=require("events");function c(i){return i&&typeof i=="object"&&"default"in i?i:{default:i}}var y=c(P),q=c(w),h=c(p),O=c(I);function E(i){var e;const t=(e=i[Object.keys(i)[0]])==null?void 0:e.chains[0];return[t.split(":")[0],t.split(":")[1]]}function r(i,e){let t;return e.rpcMap&&(t=e.rpcMap[b([i])]),t}function b(i){return Number(i[0].split(":")[1])}class H{constructor(e){this.name="eip155",this.namespace=e.namespace,this.client=e.client,this.events=e.events,this.httpProviders=this.createHttpProviders(),this.chainId=this.getDefaultChainId()}async request(e){var t;switch(e.request.method){case"eth_requestAccounts":return this.getAccounts();case"eth_accounts":return this.getAccounts();case"wallet_switchEthereumChain":{const s=e.request.params?(t=e.request.params[0])==null?void 0:t.chainId:"0x0";return this.setDefaultChain(parseInt(s,16).toString()),null}case"eth_chainId":return this.getDefaultChainId()}return this.namespace.methods.includes(e.request.method)?await this.client.request(e):this.getHttpProvider().request(e.request)}updateNamespace(e){this.namespace=Object.assign(this.namespace,e)}setDefaultChain(e,t){if(this.chainId=parseInt(e),!this.httpProviders[e]){const s=t||r(`${this.name}:${e}`,this.namespace);if(!s)throw new Error(`No RPC url provided for chainId: ${e}`);this.setHttpProvider(e,s)}this.events.emit("chainChanged",this.chainId)}requestAccounts(){return this.getAccounts()}createHttpProvider(e,t){const s=t||r(e,this.namespace);return typeof s>"u"?void 0:new a.JsonRpcProvider(new p.HttpConnection(s))}setHttpProvider(e,t){const s=this.createHttpProvider(e,t);s&&(this.httpProviders[e]=s)}createHttpProviders(){const e={};return this.namespace.chains.forEach(t=>{e[t]=this.createHttpProvider(t)}),e}getAccounts(){const e=this.namespace.accounts;return e?e.filter(t=>t.split(":")[1]===this.chainId.toString()).map(t=>t.split(":")[2])||[]:[]}getDefaultChainId(){if(this.chainId)return this.chainId;const e=this.namespace.chains[0];if(!e)throw new Error("ChainId not found");return parseInt(e.split(":")[1])}getHttpProvider(){const e=`${this.name}:${this.chainId}`,t=this.httpProviders[e];if(typeof t>"u")throw new Error(`JSON-RPC provider for ${e} not found`);return t}}class ${constructor(e){this.name="solana",this.namespace=e.namespace,this.events=e.events,this.client=e.client,this.chainId=this.getDefaultChainId(),this.httpProviders=this.createHttpProviders()}updateNamespace(e){this.namespace=Object.assign(this.namespace,e)}requestAccounts(){return this.getAccounts()}getAccounts(){const e=this.namespace.accounts;return e?e.filter(t=>t.split(":")[1]===this.chainId.toString()).map(t=>t.split(":")[2])||[]:[]}createHttpProviders(){const e={};return this.namespace.chains.forEach(t=>{e[t]=this.createHttpProvider(t)}),e}getDefaultChainId(){if(this.chainId)return this.chainId;const e=this.namespace.chains[0];if(!e)throw new Error("ChainId not found");return e.split(":")[1]}request(e){return this.namespace.methods.includes(e.request.method)?this.client.request(e):this.getHttpProvider().request(e.request)}getHttpProvider(){const e=`${this.name}:${this.chainId}`,t=this.httpProviders[e];if(typeof t>"u")throw new Error(`JSON-RPC provider for ${e} not found`);return t}setDefaultChain(e,t){if(this.chainId=e,!this.httpProviders[e]){const s=t||r(`${this.name}:${e}`,this.namespace);if(!s)throw new Error(`No RPC url provided for chainId: ${e}`);this.setHttpProvider(e,s)}this.events.emit("chainChanged",this.chainId)}setHttpProvider(e,t){const s=this.createHttpProvider(e,t);s&&(this.httpProviders[e]=s)}createHttpProvider(e,t){const s=t||r(e,this.namespace);return typeof s>"u"?void 0:new a.JsonRpcProvider(new h.default(s))}}class _{constructor(e){this.name="cosmos",this.namespace=e.namespace,this.events=e.events,this.client=e.client,this.chainId=this.getDefaultChainId(),this.httpProviders=this.createHttpProviders()}updateNamespace(e){this.namespace=Object.assign(this.namespace,e)}requestAccounts(){return this.getAccounts()}getAccounts(){const e=this.namespace.accounts;return e?e.filter(t=>t.split(":")[1]===this.chainId.toString()).map(t=>t.split(":")[2])||[]:[]}createHttpProviders(){const e={};return this.namespace.chains.forEach(t=>{e[t]=this.createHttpProvider(t)}),e}getDefaultChainId(){if(this.chainId)return this.chainId;const e=this.namespace.chains[0];if(!e)throw new Error("ChainId not found");return e.split(":")[1]}request(e){return this.namespace.methods.includes(e.request.method)?this.client.request(e):this.getHttpProvider().request(e.request)}getHttpProvider(){const e=`${this.name}:${this.chainId}`,t=this.httpProviders[e];if(typeof t>"u")throw new Error(`JSON-RPC provider for ${e} not found`);return t}setDefaultChain(e,t){if(this.chainId=e,!this.httpProviders[e]){const s=t||r(`${this.name}:${e}`,this.namespace);if(!s)throw new Error(`No RPC url provided for chainId: ${e}`);this.setHttpProvider(e,s)}this.events.emit("chainChanged",this.chainId)}setHttpProvider(e,t){const s=this.createHttpProvider(e,t);s&&(this.httpProviders[e]=s)}createHttpProvider(e,t){const s=t||r(e,this.namespace);return typeof s>"u"?void 0:new a.JsonRpcProvider(new h.default(s))}}class A{constructor(e){this.name="cip34",this.namespace=e.namespace,this.events=e.events,this.client=e.client,this.chainId=this.getDefaultChainId(),this.httpProviders=this.createHttpProviders()}updateNamespace(e){this.namespace=Object.assign(this.namespace,e)}requestAccounts(){return this.getAccounts()}getAccounts(){const e=this.namespace.accounts;return e?e.filter(t=>t.split(":")[1]===this.chainId.toString()).map(t=>t.split(":")[2])||[]:[]}createHttpProviders(){const e={};return this.namespace.chains.forEach(t=>{e[t]=this.createHttpProvider(t)}),e}getDefaultChainId(){if(this.chainId)return this.chainId;const e=this.namespace.chains[0];if(!e)throw new Error("ChainId not found");return e.split(":")[1]}request(e){return this.namespace.methods.includes(e.request.method)?this.client.request(e):this.getHttpProvider().request(e.request)}getHttpProvider(){const e=`${this.name}:${this.chainId}`,t=this.httpProviders[e];if(typeof t>"u")throw new Error(`JSON-RPC provider for ${e} not found`);return t}setDefaultChain(e,t){if(this.chainId=e,!this.httpProviders[e]){const s=t||r(`${this.name}:${e}`,this.namespace);if(!s)throw new Error(`No RPC url provided for chainId: ${e}`);this.setHttpProvider(e,s)}this.events.emit("chainChanged",this.chainId)}setHttpProvider(e,t){const s=this.createHttpProvider(e,t);s&&(this.httpProviders[e]=s)}createHttpProvider(e,t){const s=t||r(e,this.namespace);return typeof s>"u"?void 0:new a.JsonRpcProvider(new h.default(s))}}const u="error",S="wss://relay.walletconnect.com",N="wc",D="universal_provider",l=`${N}@${2}:${D}:`;var j=Object.defineProperty,R=Object.defineProperties,k=Object.getOwnPropertyDescriptors,v=Object.getOwnPropertySymbols,U=Object.prototype.hasOwnProperty,L=Object.prototype.propertyIsEnumerable,m=(i,e,t)=>e in i?j(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,f=(i,e)=>{for(var t in e||(e={}))U.call(e,t)&&m(i,t,e[t]);if(v)for(var t of v(e))L.call(e,t)&&m(i,t,e[t]);return i},z=(i,e)=>R(i,k(e));class o{constructor(e){this.events=new O.default,this.rpcProviders={},this.providerOpts=e,this.logger=typeof e?.logger<"u"&&typeof e?.logger!="string"?e.logger:y.default(C.getDefaultLoggerOptions({level:e?.logger||u}))}static async init(e){const t=new o(e);return await t.initialize(),t}async request(e,t){const[s,n]=this.validateChain(t);if(!this.session)throw new Error("Please call connect() before request()");return await this.getProvider(s).request({request:f({},e),chainId:`${s}:${n}`,topic:this.session.topic})}sendAsync(e,t,s){this.request(e,s).then(n=>t(null,n)).catch(n=>t(n,void 0))}async enable(){if(!this.client)throw new Error("Sign Client not initialized");return this.session||await this.connect({namespaces:this.namespaces}),await this.requestAccounts()}async disconnect(){var e;if(!this.session)throw new Error("Please call connect() before enable()");await this.client.disconnect({topic:(e=this.session)==null?void 0:e.topic,reason:d.getSdkError("USER_DISCONNECTED")}),await this.cleanup()}async connect(e){if(!this.client)throw new Error("Sign Client not initialized");const{namespaces:t}=e;return this.setNamespaces(t),this.createProviders(),await this.cleanupPendingPairings(),e.skipPairing===!0?void 0:await this.pair(e.pairingTopic)}on(e,t){this.events.on(e,t)}once(e,t){this.events.once(e,t)}removeListener(e,t){this.events.removeListener(e,t)}off(e,t){this.events.off(e,t)}get isWalletConnect(){return!0}async pair(e){const{uri:t,approval:s}=await this.client.connect({pairingTopic:e,requiredNamespaces:this.namespaces});return t&&(this.uri=t,this.events.emit("display_uri",t)),this.session=await s(),this.onSessionUpdate(),this.onConnect(),this.session}setDefaultChain(e,t){try{const[s,n]=this.validateChain(e);this.getProvider(s).setDefaultChain(n,t)}catch(s){if(!/Please call connect/.test(s.message))throw s}}async cleanupPendingPairings(e={}){this.logger.info("Cleaning up inactive pairings...");const t=this.client.pairing.getAll();if(d.isValidArray(t)){for(const s of t)e.deletePairings?this.client.core.expirer.set(s.topic,0):await this.client.core.relayer.subscriber.unsubscribe(s.topic);this.logger.info(`Inactive pairings cleared: ${t.length}`)}}async checkStorage(){if(this.namespaces=await this.client.core.storage.getItem(`${l}/namespaces`)||{},this.namespaces&&this.createProviders(),this.client.session.length){const e=this.client.session.keys.length-1;this.session=this.client.session.get(this.client.session.keys[e]),this.onSessionUpdate()}}async initialize(){this.logger.trace("Initialized"),await this.createClient(),this.checkStorage(),this.registerEventListeners()}async createClient(){this.client=this.providerOpts.client||await q.default.init({logger:this.providerOpts.logger||u,relayUrl:this.providerOpts.relayUrl||S,projectId:this.providerOpts.projectId,metadata:this.providerOpts.metadata,storageOptions:this.providerOpts.storageOptions,name:this.providerOpts.name}),this.logger.trace("SignClient Initialized")}createProviders(){if(!this.client)throw new Error("Sign Client not initialized");Object.keys(this.namespaces).forEach(e=>{switch(e){case"eip155":this.rpcProviders[e]=new H({client:this.client,namespace:this.namespaces[e],events:this.events});break;case"solana":this.rpcProviders[e]=new $({client:this.client,namespace:this.namespaces[e],events:this.events});break;case"cosmos":this.rpcProviders[e]=new _({client:this.client,namespace:this.namespaces[e],events:this.events});break;case"polkadot":break;case"cip34":this.rpcProviders[e]=new A({client:this.client,namespace:this.namespaces[e],events:this.events});break}})}registerEventListeners(){if(typeof this.client>"u")throw new Error("Sign Client is not initialized");this.client.on("session_ping",e=>{this.events.emit("session_ping",e)}),this.client.on("session_event",e=>{const{params:t}=e,{event:s}=t;s.name==="accountsChanged"?this.events.emit("accountsChanged",s.data):s.name==="chainChanged"?this.onChainChanged(s.data,t.chainId):this.events.emit(s.name,s.data),this.events.emit("session_event",e)}),this.client.on("session_update",({topic:e,params:t})=>{var s;const{namespaces:n}=t,g=(s=this.client)==null?void 0:s.session.get(e);this.session=z(f({},g),{namespaces:n}),this.onSessionUpdate(),this.events.emit("session_update",{topic:e,params:t})}),this.client.on("session_delete",async e=>{await this.cleanup(),this.events.emit("session_delete",e)})}getProvider(e){if(!this.rpcProviders[e])throw new Error(`Provider not found: ${e}`);return this.rpcProviders[e]}onSessionUpdate(){Object.keys(this.rpcProviders).forEach(e=>{var t;this.getProvider(e).updateNamespace((t=this.session)==null?void 0:t.namespaces[e])})}setNamespaces(e){if(!e||!Object.keys(e).length)throw new Error("Namespaces must be not empty");this.client.core.storage.setItem(`${l}/namespaces`,e),this.namespaces=e}validateChain(e){const[t,s]=e?.split(":")||["",""];if(t&&!Object.keys(this.namespaces).includes(t))throw new Error(`Namespace '${t}' is not configured. Please call connect() first with namespace config.`);return!t||!s?E(this.namespaces):[t,s]}async requestAccounts(){const[e]=this.validateChain();return await this.getProvider(e).requestAccounts()}onChainChanged(e,t){const[s,n]=this.validateChain(t);this.getProvider(s).setDefaultChain(n),this.events.emit("chainChanged",e)}onConnect(){this.events.emit("connect",{session:this.session})}async cleanup(){this.session=void 0,await this.cleanupPendingPairings({deletePairings:!0})}}const J=o;exports.UniversalProvider=J,exports.default=o;
//# sourceMappingURL=index.cjs.js.map
