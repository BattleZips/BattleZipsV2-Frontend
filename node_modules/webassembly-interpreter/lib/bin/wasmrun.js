#!/usr/bin/env node
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require("../index"),
    instantiate = _require.instantiate;

var fs = require("fs");

function debug(msg) {
  console.error(msg);
}

function toArrayBuffer(buf) {
  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
}

var filename = process.argv[2];
var entrypoint = process.argv[3];

if (typeof filename === "undefined") {
  throw new Error("Missing file");
}

debug("Compiling..."); // $FlowIgnore: this is correct but not correctly documented

var buff = toArrayBuffer(fs.readFileSync(filename, null));
var importObject = {
  env: {
    printf: function printf() {
      var _console;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_console = console).log.apply(_console, ["printf"].concat(args));
    }
  }
};
instantiate(buff, importObject).then(function (_ref) {
  var instance = _ref.instance;
  console.log("exports", Object.keys(instance.exports));

  if (typeof entrypoint !== "undefined") {
    var startfn = instance.exports[entrypoint];

    if (typeof startfn !== "function") {
      throw new Error("Entrypoint not found");
    }

    debug("Executing...");
    var exitCode = startfn.apply(void 0, _toConsumableArray(process.argv.slice(4)));
    console.log("exited with code", exitCode);
  }
}).catch(function (err) {
  throw err;
});